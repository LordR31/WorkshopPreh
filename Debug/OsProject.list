
OsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f8  080079f8  00021c7c  2**0
                  CONTENTS
  4 .ARM          00000000  080079f8  080079f8  00021c7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079f8  080079f8  00021c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001c7c  20000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c48  20001c7c  0800967c  00021c7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038c4  0800967c  000238c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00021c7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b38c  00000000  00000000  00021ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389c  00000000  00000000  0003d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  000408d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  000420f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045b7  00000000  00000000  000437a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb15  00000000  00000000  00047d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b70f2  00000000  00000000  00063874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a966  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a74  00000000  00000000  0011a9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20001c7c 	.word	0x20001c7c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007884 	.word	0x08007884

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20001c80 	.word	0x20001c80
 8000104:	08007884 	.word	0x08007884

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Display_modLucruDisplay>:

int cleared = 0;		// Pt treptele de viteza
int displayBusy = 0;	// Pt a evita suprapunerile de imagini

//Master function?
void Display_modLucruDisplay(int modDisplay){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (displayBusy == 0 || modDisplay == 0){
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <Display_modLucruDisplay+0x6c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <Display_modLucruDisplay+0x16>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d107      	bne.n	8000246 <Display_modLucruDisplay+0x26>
		Icons_clearScreen();
 8000236:	f000 f941 	bl	80004bc <Icons_clearScreen>
		cleared = 0;
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <Display_modLucruDisplay+0x70>)
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
		displayBusy = 0;
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <Display_modLucruDisplay+0x6c>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
	}

	if(modDisplay == 1){
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d101      	bne.n	8000250 <Display_modLucruDisplay+0x30>
		Display_displayStergereX1();
 800024c:	f000 f822 	bl	8000294 <Display_displayStergereX1>
	}

	if(modDisplay == 2){
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d101      	bne.n	800025a <Display_modLucruDisplay+0x3a>
		Display_displayTreapta1();
 8000256:	f000 f82d 	bl	80002b4 <Display_displayTreapta1>
	}

	if(modDisplay == 3){
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b03      	cmp	r3, #3
 800025e:	d101      	bne.n	8000264 <Display_modLucruDisplay+0x44>
		Display_displayTreapta2();
 8000260:	f000 f840 	bl	80002e4 <Display_displayTreapta2>
	}

	if(modDisplay == 4){
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b04      	cmp	r3, #4
 8000268:	d101      	bne.n	800026e <Display_modLucruDisplay+0x4e>
		Display_displayTreapta3();
 800026a:	f000 f853 	bl	8000314 <Display_displayTreapta3>
	}

	if(modDisplay == 5){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b05      	cmp	r3, #5
 8000272:	d101      	bne.n	8000278 <Display_modLucruDisplay+0x58>
		Display_displaySpalareParbriz();
 8000274:	f000 f866 	bl	8000344 <Display_displaySpalareParbriz>
	}

	if(modDisplay == 6){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b06      	cmp	r3, #6
 800027c:	d101      	bne.n	8000282 <Display_modLucruDisplay+0x62>
		Display_displaySpalareLuneta();
 800027e:	f000 f871 	bl	8000364 <Display_displaySpalareLuneta>
	}

}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	20001c9c 	.word	0x20001c9c
 8000290:	20001c98 	.word	0x20001c98

08000294 <Display_displayStergereX1>:

// Functiile pentru afisat modul de lucru

void Display_displayStergereX1(){
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	if(displayBusy == 0){
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <Display_displayStergereX1+0x1c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d104      	bne.n	80002aa <Display_displayStergereX1+0x16>
		displayBusy = 1;
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <Display_displayStergereX1+0x1c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]
		Icons_loadX1();
 80002a6:	f000 f86d 	bl	8000384 <Icons_loadX1>
	}
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20001c9c 	.word	0x20001c9c

080002b4 <Display_displayTreapta1>:

void Display_displayTreapta1(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
		displayBusy = 1;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <Display_displayTreapta1+0x28>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]

		if(cleared != 0){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <Display_displayTreapta1+0x2c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d004      	beq.n	80002d0 <Display_displayTreapta1+0x1c>
			Icons_clearScreen();	// (trecere de la o treapta la alta)
 80002c6:	f000 f8f9 	bl	80004bc <Icons_clearScreen>
			cleared = 0;
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <Display_displayTreapta1+0x2c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
		}

		Icons_loadTreapta1();
 80002d0:	f000 f872 	bl	80003b8 <Icons_loadTreapta1>
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20001c9c 	.word	0x20001c9c
 80002e0:	20001c98 	.word	0x20001c98

080002e4 <Display_displayTreapta2>:

void Display_displayTreapta2(){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
		displayBusy = 1;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <Display_displayTreapta2+0x28>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]

		if(cleared != 1){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <Display_displayTreapta2+0x2c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d004      	beq.n	8000300 <Display_displayTreapta2+0x1c>
			Icons_clearScreen();	// (trecere de la o treapta la alta)
 80002f6:	f000 f8e1 	bl	80004bc <Icons_clearScreen>
			cleared = 1;
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <Display_displayTreapta2+0x2c>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	601a      	str	r2, [r3, #0]
		}

		Icons_loadTreapta2();
 8000300:	f000 f874 	bl	80003ec <Icons_loadTreapta2>
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	20001c9c 	.word	0x20001c9c
 8000310:	20001c98 	.word	0x20001c98

08000314 <Display_displayTreapta3>:

void Display_displayTreapta3(){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
		displayBusy = 1;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <Display_displayTreapta3+0x28>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]

		if(cleared != 2){	// Verifica daca este nevoie sa curete ecranul pt afisaj
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <Display_displayTreapta3+0x2c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b02      	cmp	r3, #2
 8000324:	d004      	beq.n	8000330 <Display_displayTreapta3+0x1c>
			Icons_clearScreen();	// (trecere de la o treapta la alta)
 8000326:	f000 f8c9 	bl	80004bc <Icons_clearScreen>
			cleared = 2;
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <Display_displayTreapta3+0x2c>)
 800032c:	2202      	movs	r2, #2
 800032e:	601a      	str	r2, [r3, #0]
		}

		Icons_loadTreapta3();
 8000330:	f000 f876 	bl	8000420 <Icons_loadTreapta3>
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	20001c9c 	.word	0x20001c9c
 8000340:	20001c98 	.word	0x20001c98

08000344 <Display_displaySpalareParbriz>:

void Display_displaySpalareParbriz(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	if(displayBusy == 0){
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <Display_displaySpalareParbriz+0x1c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d104      	bne.n	800035a <Display_displaySpalareParbriz+0x16>
		displayBusy = 1;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <Display_displaySpalareParbriz+0x1c>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
		Icons_loadSpalareParbriz();
 8000356:	f000 f87d 	bl	8000454 <Icons_loadSpalareParbriz>
	}
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20001c9c 	.word	0x20001c9c

08000364 <Display_displaySpalareLuneta>:

void Display_displaySpalareLuneta(){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	if(displayBusy == 0){
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <Display_displaySpalareLuneta+0x1c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d104      	bne.n	800037a <Display_displaySpalareLuneta+0x16>
		displayBusy = 1;
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <Display_displaySpalareLuneta+0x1c>)
 8000372:	2201      	movs	r2, #1
 8000374:	601a      	str	r2, [r3, #0]
		Icons_loadSpalareLuneta();
 8000376:	f000 f887 	bl	8000488 <Icons_loadSpalareLuneta>
	}
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20001c9c 	.word	0x20001c9c

08000384 <Icons_loadX1>:
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void Icons_loadX1(){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, iconX1, 128, 64, 1); // copiaza poza in buffer
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <Icons_loadX1+0x2c>)
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <Icons_loadX1+0x30>)
 800038e:	2201      	movs	r2, #1
 8000390:	9202      	str	r2, [sp, #8]
 8000392:	2240      	movs	r2, #64	; 0x40
 8000394:	9201      	str	r2, [sp, #4]
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	f000 fbe9 	bl	8000b74 <st7565_drawbitmap>
	st7565_write_buffer(buffer);	//o scrie pe ecran
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <Icons_loadX1+0x30>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 f9a5 	bl	80006f4 <st7565_write_buffer>
}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20001800 	.word	0x20001800

080003b8 <Icons_loadTreapta1>:

void Icons_loadTreapta1(){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, iconTreapta1, 128, 64, 1); // copiaza poza in buffer
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <Icons_loadTreapta1+0x2c>)
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <Icons_loadTreapta1+0x30>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	9202      	str	r2, [sp, #8]
 80003c6:	2240      	movs	r2, #64	; 0x40
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2280      	movs	r2, #128	; 0x80
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	2200      	movs	r2, #0
 80003d0:	2100      	movs	r1, #0
 80003d2:	f000 fbcf 	bl	8000b74 <st7565_drawbitmap>
	st7565_write_buffer(buffer);	//o scrie pe ecran
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <Icons_loadTreapta1+0x30>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 f98b 	bl	80006f4 <st7565_write_buffer>
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000400 	.word	0x20000400
 80003e8:	20001800 	.word	0x20001800

080003ec <Icons_loadTreapta2>:

void Icons_loadTreapta2(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, iconTreapta2, 128, 64, 1); // copiaza poza in buffer
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <Icons_loadTreapta2+0x2c>)
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <Icons_loadTreapta2+0x30>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	9202      	str	r2, [sp, #8]
 80003fa:	2240      	movs	r2, #64	; 0x40
 80003fc:	9201      	str	r2, [sp, #4]
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	9200      	str	r2, [sp, #0]
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	f000 fbb5 	bl	8000b74 <st7565_drawbitmap>
	st7565_write_buffer(buffer);	//o scrie pe ecran
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <Icons_loadTreapta2+0x30>)
 800040c:	0018      	movs	r0, r3
 800040e:	f000 f971 	bl	80006f4 <st7565_write_buffer>
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000800 	.word	0x20000800
 800041c:	20001800 	.word	0x20001800

08000420 <Icons_loadTreapta3>:

void Icons_loadTreapta3(){
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, iconTreapta3, 128, 64, 1); // copiaza poza in buffer
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <Icons_loadTreapta3+0x2c>)
 8000428:	4809      	ldr	r0, [pc, #36]	; (8000450 <Icons_loadTreapta3+0x30>)
 800042a:	2201      	movs	r2, #1
 800042c:	9202      	str	r2, [sp, #8]
 800042e:	2240      	movs	r2, #64	; 0x40
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	9200      	str	r2, [sp, #0]
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	f000 fb9b 	bl	8000b74 <st7565_drawbitmap>
	st7565_write_buffer(buffer);	//o scrie pe ecran
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <Icons_loadTreapta3+0x30>)
 8000440:	0018      	movs	r0, r3
 8000442:	f000 f957 	bl	80006f4 <st7565_write_buffer>
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000c00 	.word	0x20000c00
 8000450:	20001800 	.word	0x20001800

08000454 <Icons_loadSpalareParbriz>:

void Icons_loadSpalareParbriz(){
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, iconSpalareParbriz, 128, 64, 1); // copiaza poza in buffer
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <Icons_loadSpalareParbriz+0x2c>)
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <Icons_loadSpalareParbriz+0x30>)
 800045e:	2201      	movs	r2, #1
 8000460:	9202      	str	r2, [sp, #8]
 8000462:	2240      	movs	r2, #64	; 0x40
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	9200      	str	r2, [sp, #0]
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	f000 fb81 	bl	8000b74 <st7565_drawbitmap>
	st7565_write_buffer(buffer);	//o scrie pe ecran
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <Icons_loadSpalareParbriz+0x30>)
 8000474:	0018      	movs	r0, r3
 8000476:	f000 f93d 	bl	80006f4 <st7565_write_buffer>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20001000 	.word	0x20001000
 8000484:	20001800 	.word	0x20001800

08000488 <Icons_loadSpalareLuneta>:

void Icons_loadSpalareLuneta(){
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, iconSpalareLuneta, 128, 64, 1); // copiaza poza in buffer
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <Icons_loadSpalareLuneta+0x2c>)
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <Icons_loadSpalareLuneta+0x30>)
 8000492:	2201      	movs	r2, #1
 8000494:	9202      	str	r2, [sp, #8]
 8000496:	2240      	movs	r2, #64	; 0x40
 8000498:	9201      	str	r2, [sp, #4]
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	9200      	str	r2, [sp, #0]
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	f000 fb67 	bl	8000b74 <st7565_drawbitmap>
	st7565_write_buffer(buffer);	//o scrie pe ecran
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <Icons_loadSpalareLuneta+0x30>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 f923 	bl	80006f4 <st7565_write_buffer>
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20001400 	.word	0x20001400
 80004b8:	20001800 	.word	0x20001800

080004bc <Icons_clearScreen>:

// Functia pentru curatat ecranul
void Icons_clearScreen(){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	st7565_clear_buffer(buffer); 	// goleste buffer
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <Icons_clearScreen+0x1c>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fadc 	bl	8000a80 <st7565_clear_buffer>
	st7565_write_buffer(buffer);	// il scrie pe ecran (curata ecranul)
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <Icons_clearScreen+0x1c>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 f912 	bl	80006f4 <st7565_write_buffer>
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20001800 	.word	0x20001800

080004dc <Servo_modLucruServo>:
#include <function_servo.h>
#include "main.h"

// Master function?
void Servo_modLucruServo(int modServo){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(modServo == 0){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d103      	bne.n	80004f2 <Servo_modLucruServo+0x16>
		TIM3 -> CCR4 = 500;   // 0%
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <Servo_modLucruServo+0x5c>)
 80004ec:	22fa      	movs	r2, #250	; 0xfa
 80004ee:	0052      	lsls	r2, r2, #1
 80004f0:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if(modServo == 1){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d101      	bne.n	80004fc <Servo_modLucruServo+0x20>
		Servo_servoStergereX1();
 80004f8:	f000 f820 	bl	800053c <Servo_servoStergereX1>
	}

	if(modServo == 2){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d101      	bne.n	8000506 <Servo_modLucruServo+0x2a>
		Servo_servoTreapta1();
 8000502:	f000 f84d 	bl	80005a0 <Servo_servoTreapta1>
	}

	if(modServo == 3){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d101      	bne.n	8000510 <Servo_modLucruServo+0x34>
		Servo_servoTreapta2();
 800050c:	f000 f87a 	bl	8000604 <Servo_servoTreapta2>
	}

	if(modServo == 4){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b04      	cmp	r3, #4
 8000514:	d101      	bne.n	800051a <Servo_modLucruServo+0x3e>
		Servo_servoTreapta3();
 8000516:	f000 f8a7 	bl	8000668 <Servo_servoTreapta3>
	}

	if(modServo == 5){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d101      	bne.n	8000524 <Servo_modLucruServo+0x48>
		Servo_servoSpalareParbriz();
 8000520:	f000 f8d4 	bl	80006cc <Servo_servoSpalareParbriz>
	}

	if(modServo == 6){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b06      	cmp	r3, #6
 8000528:	d101      	bne.n	800052e <Servo_modLucruServo+0x52>
		Servo_servoSpalareLuneta();
 800052a:	f000 f8d9 	bl	80006e0 <Servo_servoSpalareLuneta>
	}
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40000400 	.word	0x40000400

0800053c <Servo_servoStergereX1>:

//Functiile pentru modul de lucru al servo motorului

void Servo_servoStergereX1(){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	TIM3 -> CCR4 = 500;   // 0%
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <Servo_servoStergereX1+0x5c>)
 8000542:	22fa      	movs	r2, #250	; 0xfa
 8000544:	0052      	lsls	r2, r2, #1
 8000546:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8000548:	20c8      	movs	r0, #200	; 0xc8
 800054a:	f001 f9ff 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1000; // 25%
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <Servo_servoStergereX1+0x5c>)
 8000550:	22fa      	movs	r2, #250	; 0xfa
 8000552:	0092      	lsls	r2, r2, #2
 8000554:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8000556:	20c8      	movs	r0, #200	; 0xc8
 8000558:	f001 f9f8 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1450; // 55%
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <Servo_servoStergereX1+0x5c>)
 800055e:	4a0f      	ldr	r2, [pc, #60]	; (800059c <Servo_servoStergereX1+0x60>)
 8000560:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8000562:	20c8      	movs	r0, #200	; 0xc8
 8000564:	f001 f9f2 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2000; // 85%
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <Servo_servoStergereX1+0x5c>)
 800056a:	22fa      	movs	r2, #250	; 0xfa
 800056c:	00d2      	lsls	r2, r2, #3
 800056e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8000570:	20c8      	movs	r0, #200	; 0xc8
 8000572:	f001 f9eb 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2400; // 100%
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <Servo_servoStergereX1+0x5c>)
 8000578:	2296      	movs	r2, #150	; 0x96
 800057a:	0112      	lsls	r2, r2, #4
 800057c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(250);
 800057e:	20fa      	movs	r0, #250	; 0xfa
 8000580:	f001 f9e4 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 500;   // 0%
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <Servo_servoStergereX1+0x5c>)
 8000586:	22fa      	movs	r2, #250	; 0xfa
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 800058c:	20c8      	movs	r0, #200	; 0xc8
 800058e:	f001 f9dd 	bl	800194c <HAL_Delay>

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40000400 	.word	0x40000400
 800059c:	000005aa 	.word	0x000005aa

080005a0 <Servo_servoTreapta1>:

void Servo_servoTreapta1(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	TIM3 -> CCR4 = 500;   // 0%
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <Servo_servoTreapta1+0x5c>)
 80005a6:	22fa      	movs	r2, #250	; 0xfa
 80005a8:	0052      	lsls	r2, r2, #1
 80005aa:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(150);
 80005ac:	2096      	movs	r0, #150	; 0x96
 80005ae:	f001 f9cd 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1000; // 25%
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <Servo_servoTreapta1+0x5c>)
 80005b4:	22fa      	movs	r2, #250	; 0xfa
 80005b6:	0092      	lsls	r2, r2, #2
 80005b8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(150);
 80005ba:	2096      	movs	r0, #150	; 0x96
 80005bc:	f001 f9c6 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1450; // 55%
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <Servo_servoTreapta1+0x5c>)
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <Servo_servoTreapta1+0x60>)
 80005c4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(150);
 80005c6:	2096      	movs	r0, #150	; 0x96
 80005c8:	f001 f9c0 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2000; // 85%
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <Servo_servoTreapta1+0x5c>)
 80005ce:	22fa      	movs	r2, #250	; 0xfa
 80005d0:	00d2      	lsls	r2, r2, #3
 80005d2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(150);
 80005d4:	2096      	movs	r0, #150	; 0x96
 80005d6:	f001 f9b9 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2400; // 100%
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <Servo_servoTreapta1+0x5c>)
 80005dc:	2296      	movs	r2, #150	; 0x96
 80005de:	0112      	lsls	r2, r2, #4
 80005e0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(150);
 80005e2:	2096      	movs	r0, #150	; 0x96
 80005e4:	f001 f9b2 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 500;   // 0%
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <Servo_servoTreapta1+0x5c>)
 80005ea:	22fa      	movs	r2, #250	; 0xfa
 80005ec:	0052      	lsls	r2, r2, #1
 80005ee:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 80005f0:	20c8      	movs	r0, #200	; 0xc8
 80005f2:	f001 f9ab 	bl	800194c <HAL_Delay>
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40000400 	.word	0x40000400
 8000600:	000005aa 	.word	0x000005aa

08000604 <Servo_servoTreapta2>:

void Servo_servoTreapta2(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	TIM3 -> CCR4 = 500;   // 0%
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <Servo_servoTreapta2+0x5c>)
 800060a:	22fa      	movs	r2, #250	; 0xfa
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f001 f99b 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1000; // 25%
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <Servo_servoTreapta2+0x5c>)
 8000618:	22fa      	movs	r2, #250	; 0xfa
 800061a:	0092      	lsls	r2, r2, #2
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f001 f994 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1450; // 55%
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <Servo_servoTreapta2+0x5c>)
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <Servo_servoTreapta2+0x60>)
 8000628:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f001 f98e 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2000; // 85%
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <Servo_servoTreapta2+0x5c>)
 8000632:	22fa      	movs	r2, #250	; 0xfa
 8000634:	00d2      	lsls	r2, r2, #3
 8000636:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f001 f987 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2400; // 100%
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <Servo_servoTreapta2+0x5c>)
 8000640:	2296      	movs	r2, #150	; 0x96
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8000646:	2064      	movs	r0, #100	; 0x64
 8000648:	f001 f980 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 500;   // 0%
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <Servo_servoTreapta2+0x5c>)
 800064e:	22fa      	movs	r2, #250	; 0xfa
 8000650:	0052      	lsls	r2, r2, #1
 8000652:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 8000654:	20c8      	movs	r0, #200	; 0xc8
 8000656:	f001 f979 	bl	800194c <HAL_Delay>
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40000400 	.word	0x40000400
 8000664:	000005aa 	.word	0x000005aa

08000668 <Servo_servoTreapta3>:

void Servo_servoTreapta3(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	TIM3 -> CCR4 = 500;   // 0%
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <Servo_servoTreapta3+0x5c>)
 800066e:	22fa      	movs	r2, #250	; 0xfa
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(75);
 8000674:	204b      	movs	r0, #75	; 0x4b
 8000676:	f001 f969 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1000; // 25%
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <Servo_servoTreapta3+0x5c>)
 800067c:	22fa      	movs	r2, #250	; 0xfa
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(75);
 8000682:	204b      	movs	r0, #75	; 0x4b
 8000684:	f001 f962 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 1450; // 55%
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <Servo_servoTreapta3+0x5c>)
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <Servo_servoTreapta3+0x60>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(75);
 800068e:	204b      	movs	r0, #75	; 0x4b
 8000690:	f001 f95c 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2000; // 85%
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <Servo_servoTreapta3+0x5c>)
 8000696:	22fa      	movs	r2, #250	; 0xfa
 8000698:	00d2      	lsls	r2, r2, #3
 800069a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(75);
 800069c:	204b      	movs	r0, #75	; 0x4b
 800069e:	f001 f955 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 2400; // 100%
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <Servo_servoTreapta3+0x5c>)
 80006a4:	2296      	movs	r2, #150	; 0x96
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(75);
 80006aa:	204b      	movs	r0, #75	; 0x4b
 80006ac:	f001 f94e 	bl	800194c <HAL_Delay>

	TIM3 -> CCR4 = 500;   // 0%
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <Servo_servoTreapta3+0x5c>)
 80006b2:	22fa      	movs	r2, #250	; 0xfa
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(200);
 80006b8:	20c8      	movs	r0, #200	; 0xc8
 80006ba:	f001 f947 	bl	800194c <HAL_Delay>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40000400 	.word	0x40000400
 80006c8:	000005aa 	.word	0x000005aa

080006cc <Servo_servoSpalareParbriz>:

void Servo_servoSpalareParbriz(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 f939 	bl	800194c <HAL_Delay>
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Servo_servoSpalareLuneta>:

void Servo_servoSpalareLuneta(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 80006e4:	23fa      	movs	r3, #250	; 0xfa
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 f92f 	bl	800194c <HAL_Delay>
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80006fc:	230e      	movs	r3, #14
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e060      	b.n	80007c8 <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8000706:	4b35      	ldr	r3, [pc, #212]	; (80007dc <st7565_write_buffer+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	0018      	movs	r0, r3
 800070e:	f002 f93d 	bl	800298c <HAL_GPIO_WritePin>
 8000712:	230e      	movs	r3, #14
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <st7565_write_buffer+0xec>)
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	2250      	movs	r2, #80	; 0x50
 800071e:	4252      	negs	r2, r2
 8000720:	4313      	orrs	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	0018      	movs	r0, r3
 8000726:	f000 f85d 	bl	80007e4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <st7565_write_buffer+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	0018      	movs	r0, r3
 8000732:	f002 f92b 	bl	800298c <HAL_GPIO_WritePin>
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f854 	bl	80007e4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <st7565_write_buffer+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0018      	movs	r0, r3
 8000744:	f002 f922 	bl	800298c <HAL_GPIO_WritePin>
 8000748:	2010      	movs	r0, #16
 800074a:	f000 f84b 	bl	80007e4 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <st7565_write_buffer+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	0018      	movs	r0, r3
 8000756:	f002 f919 	bl	800298c <HAL_GPIO_WritePin>
 800075a:	20e0      	movs	r0, #224	; 0xe0
 800075c:	f000 f842 	bl	80007e4 <st7565_sendbyte>
		DATA(0xff);
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <st7565_write_buffer+0xe8>)
 8000762:	2201      	movs	r2, #1
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0018      	movs	r0, r3
 8000768:	f002 f910 	bl	800298c <HAL_GPIO_WritePin>
 800076c:	20ff      	movs	r0, #255	; 0xff
 800076e:	f000 f839 	bl	80007e4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000772:	230f      	movs	r3, #15
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e019      	b.n	80007b0 <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <st7565_write_buffer+0xe8>)
 800077e:	2201      	movs	r2, #1
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0018      	movs	r0, r3
 8000784:	f002 f902 	bl	800298c <HAL_GPIO_WritePin>
 8000788:	230e      	movs	r3, #14
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	01da      	lsls	r2, r3, #7
 8000790:	240f      	movs	r4, #15
 8000792:	193b      	adds	r3, r7, r4
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	18d3      	adds	r3, r2, r3
 8000798:	001a      	movs	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	189b      	adds	r3, r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 f81f 	bl	80007e4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	3201      	adds	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	230f      	movs	r3, #15
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dadf      	bge.n	800077c <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 80007bc:	210e      	movs	r1, #14
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	3201      	adds	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	230e      	movs	r3, #14
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d999      	bls.n	8000706 <st7565_write_buffer+0x12>
		}
	}
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b005      	add	sp, #20
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	48000800 	.word	0x48000800
 80007e0:	20001c00 	.word	0x20001c00

080007e4 <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 80007f0:	1df9      	adds	r1, r7, #7
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <st7565_sendbyte+0x20>)
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	2201      	movs	r2, #1
 80007f8:	f002 ff9e 	bl	8003738 <HAL_SPI_Transmit>
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20001d24 	.word	0x20001d24

08000808 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	0059      	lsls	r1, r3, #1
 8000810:	2390      	movs	r3, #144	; 0x90
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	2201      	movs	r2, #1
 8000816:	0018      	movs	r0, r3
 8000818:	f002 f8b8 	bl	800298c <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 800081c:	4b4e      	ldr	r3, [pc, #312]	; (8000958 <st7565_init+0x150>)
 800081e:	2201      	movs	r2, #1
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0018      	movs	r0, r3
 8000824:	f002 f8b2 	bl	800298c <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	0099      	lsls	r1, r3, #2
 800082c:	2390      	movs	r3, #144	; 0x90
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2201      	movs	r2, #1
 8000832:	0018      	movs	r0, r3
 8000834:	f002 f8aa 	bl	800298c <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000838:	4b48      	ldr	r3, [pc, #288]	; (800095c <st7565_init+0x154>)
 800083a:	2201      	movs	r2, #1
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	0018      	movs	r0, r3
 8000840:	f002 f8a4 	bl	800298c <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000844:	4b45      	ldr	r3, [pc, #276]	; (800095c <st7565_init+0x154>)
 8000846:	2200      	movs	r2, #0
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	0018      	movs	r0, r3
 800084c:	f002 f89e 	bl	800298c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	0099      	lsls	r1, r3, #2
 8000854:	2390      	movs	r3, #144	; 0x90
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	2200      	movs	r2, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f002 f896 	bl	800298c <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000860:	23fa      	movs	r3, #250	; 0xfa
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	0018      	movs	r0, r3
 8000866:	f001 f871 	bl	800194c <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	0099      	lsls	r1, r3, #2
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2201      	movs	r2, #1
 8000874:	0018      	movs	r0, r3
 8000876:	f002 f889 	bl	800298c <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <st7565_init+0x150>)
 800087c:	2200      	movs	r2, #0
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0018      	movs	r0, r3
 8000882:	f002 f883 	bl	800298c <HAL_GPIO_WritePin>
 8000886:	20a3      	movs	r0, #163	; 0xa3
 8000888:	f7ff ffac 	bl	80007e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 800088c:	4b32      	ldr	r3, [pc, #200]	; (8000958 <st7565_init+0x150>)
 800088e:	2200      	movs	r2, #0
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0018      	movs	r0, r3
 8000894:	f002 f87a 	bl	800298c <HAL_GPIO_WritePin>
 8000898:	20a0      	movs	r0, #160	; 0xa0
 800089a:	f7ff ffa3 	bl	80007e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <st7565_init+0x150>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	2180      	movs	r1, #128	; 0x80
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 f871 	bl	800298c <HAL_GPIO_WritePin>
 80008aa:	20c0      	movs	r0, #192	; 0xc0
 80008ac:	f7ff ff9a 	bl	80007e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <st7565_init+0x150>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 f868 	bl	800298c <HAL_GPIO_WritePin>
 80008bc:	2040      	movs	r0, #64	; 0x40
 80008be:	f7ff ff91 	bl	80007e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <st7565_init+0x150>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 f85f 	bl	800298c <HAL_GPIO_WritePin>
 80008ce:	202c      	movs	r0, #44	; 0x2c
 80008d0:	f7ff ff88 	bl	80007e4 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 80008d4:	2032      	movs	r0, #50	; 0x32
 80008d6:	f001 f839 	bl	800194c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <st7565_init+0x150>)
 80008dc:	2200      	movs	r2, #0
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f853 	bl	800298c <HAL_GPIO_WritePin>
 80008e6:	202e      	movs	r0, #46	; 0x2e
 80008e8:	f7ff ff7c 	bl	80007e4 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f001 f82d 	bl	800194c <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <st7565_init+0x150>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 f847 	bl	800298c <HAL_GPIO_WritePin>
 80008fe:	202f      	movs	r0, #47	; 0x2f
 8000900:	f7ff ff70 	bl	80007e4 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000904:	200a      	movs	r0, #10
 8000906:	f001 f821 	bl	800194c <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <st7565_init+0x150>)
 800090c:	2200      	movs	r2, #0
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	0018      	movs	r0, r3
 8000912:	f002 f83b 	bl	800298c <HAL_GPIO_WritePin>
 8000916:	2026      	movs	r0, #38	; 0x26
 8000918:	f7ff ff64 	bl	80007e4 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <st7565_init+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0018      	movs	r0, r3
 8000924:	f002 f832 	bl	800298c <HAL_GPIO_WritePin>
 8000928:	20af      	movs	r0, #175	; 0xaf
 800092a:	f7ff ff5b 	bl	80007e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <st7565_init+0x150>)
 8000930:	2200      	movs	r2, #0
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	0018      	movs	r0, r3
 8000936:	f002 f829 	bl	800298c <HAL_GPIO_WritePin>
 800093a:	20a4      	movs	r0, #164	; 0xa4
 800093c:	f7ff ff52 	bl	80007e4 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000940:	2000      	movs	r0, #0
 8000942:	f000 f81d 	bl	8000980 <st7565_set_brightness>
 	st7565_clear_screen();
 8000946:	f000 f83f 	bl	80009c8 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <st7565_init+0x158>)
 800094c:	0018      	movs	r0, r3
 800094e:	f000 f897 	bl	8000a80 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	48000800 	.word	0x48000800
 800095c:	48000400 	.word	0x48000400
 8000960:	20001800 	.word	0x20001800

08000964 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	0059      	lsls	r1, r3, #1
 800096c:	2390      	movs	r3, #144	; 0x90
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	2201      	movs	r2, #1
 8000972:	0018      	movs	r0, r3
 8000974:	f002 f80a 	bl	800298c <HAL_GPIO_WritePin>
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	0002      	movs	r2, r0
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <st7565_set_brightness+0x44>)
 800098e:	2200      	movs	r2, #0
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0018      	movs	r0, r3
 8000994:	f001 fffa 	bl	800298c <HAL_GPIO_WritePin>
 8000998:	2081      	movs	r0, #129	; 0x81
 800099a:	f7ff ff23 	bl	80007e4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <st7565_set_brightness+0x44>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 fff1 	bl	800298c <HAL_GPIO_WritePin>
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	223f      	movs	r2, #63	; 0x3f
 80009b0:	4013      	ands	r3, r2
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ff15 	bl	80007e4 <st7565_sendbyte>
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	48000800 	.word	0x48000800

080009c8 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e049      	b.n	8000a6a <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <st7565_clear_screen+0xb4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 ffd5 	bl	800298c <HAL_GPIO_WritePin>
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2250      	movs	r2, #80	; 0x50
 80009e8:	4252      	negs	r2, r2
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff fef8 	bl	80007e4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 80009f4:	1dbb      	adds	r3, r7, #6
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e02d      	b.n	8000a58 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <st7565_clear_screen+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 ffc2 	bl	800298c <HAL_GPIO_WritePin>
 8000a08:	1dbb      	adds	r3, r7, #6
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	4013      	ands	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fee6 	bl	80007e4 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <st7565_clear_screen+0xb4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 ffb4 	bl	800298c <HAL_GPIO_WritePin>
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	091b      	lsrs	r3, r3, #4
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	2210      	movs	r2, #16
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fed4 	bl	80007e4 <st7565_sendbyte>
			DATA(0x0);
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <st7565_clear_screen+0xb4>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 ffa2 	bl	800298c <HAL_GPIO_WritePin>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff fecb 	bl	80007e4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	1dbb      	adds	r3, r7, #6
 8000a54:	3201      	adds	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	1dbb      	adds	r3, r7, #6
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b80      	cmp	r3, #128	; 0x80
 8000a5e:	d9cd      	bls.n	80009fc <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	3201      	adds	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b07      	cmp	r3, #7
 8000a70:	d9b1      	bls.n	80009d6 <st7565_clear_screen+0xe>
		}
	}
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	48000800 	.word	0x48000800

08000a80 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	00da      	lsls	r2, r3, #3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2100      	movs	r1, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f006 fe22 	bl	80076da <memset>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000a9e:	b590      	push	{r4, r7, lr}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	000c      	movs	r4, r1
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	0019      	movs	r1, r3
 8000aac:	1cfb      	adds	r3, r7, #3
 8000aae:	1c22      	adds	r2, r4, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	1cbb      	adds	r3, r7, #2
 8000ab4:	1c02      	adds	r2, r0, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	1c7b      	adds	r3, r7, #1
 8000aba:	1c0a      	adds	r2, r1, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000abe:	1cfb      	adds	r3, r7, #3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db51      	blt.n	8000b6c <st7565_setpixel+0xce>
 8000ac8:	1cbb      	adds	r3, r7, #2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ace:	d84d      	bhi.n	8000b6c <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000ad0:	1c7b      	adds	r3, r7, #1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d023      	beq.n	8000b20 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000ad8:	1cfb      	adds	r3, r7, #3
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	1cbb      	adds	r3, r7, #2
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	b2d8      	uxtb	r0, r3
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	01db      	lsls	r3, r3, #7
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	001a      	movs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25a      	sxtb	r2, r3
 8000af4:	1cbb      	adds	r3, r7, #2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	2107      	movs	r1, #7
 8000afc:	400b      	ands	r3, r1
 8000afe:	2101      	movs	r1, #1
 8000b00:	4099      	lsls	r1, r3
 8000b02:	000b      	movs	r3, r1
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b259      	sxtb	r1, r3
 8000b0a:	1cfb      	adds	r3, r7, #3
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	0003      	movs	r3, r0
 8000b10:	01db      	lsls	r3, r3, #7
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	001a      	movs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	189b      	adds	r3, r3, r2
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e026      	b.n	8000b6e <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000b20:	1cfb      	adds	r3, r7, #3
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	1cbb      	adds	r3, r7, #2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	b2d8      	uxtb	r0, r3
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	18d3      	adds	r3, r2, r3
 8000b32:	001a      	movs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	189b      	adds	r3, r3, r2
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	1cba      	adds	r2, r7, #2
 8000b3e:	7812      	ldrb	r2, [r2, #0]
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	2107      	movs	r1, #7
 8000b44:	400a      	ands	r2, r1
 8000b46:	2101      	movs	r1, #1
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	b252      	sxtb	r2, r2
 8000b4e:	43d2      	mvns	r2, r2
 8000b50:	b252      	sxtb	r2, r2
 8000b52:	4013      	ands	r3, r2
 8000b54:	b259      	sxtb	r1, r3
 8000b56:	1cfb      	adds	r3, r7, #3
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	01db      	lsls	r3, r3, #7
 8000b5e:	18d3      	adds	r3, r2, r3
 8000b60:	001a      	movs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	189b      	adds	r3, r3, r2
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e000      	b.n	8000b6e <st7565_setpixel+0xd0>
		return;
 8000b6c:	46c0      	nop			; (mov r8, r8)
}
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b003      	add	sp, #12
 8000b72:	bd90      	pop	{r4, r7, pc}

08000b74 <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	0008      	movs	r0, r1
 8000b7e:	0011      	movs	r1, r2
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	230b      	movs	r3, #11
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	1c0a      	adds	r2, r1, #0
 8000b90:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 8000b92:	2317      	movs	r3, #23
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e04c      	b.n	8000c36 <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 8000b9c:	2316      	movs	r3, #22
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e037      	b.n	8000c16 <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 8000ba6:	2416      	movs	r4, #22
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	2017      	movs	r0, #23
 8000bae:	183b      	adds	r3, r7, r0
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	2320      	movs	r3, #32
 8000bba:	2508      	movs	r5, #8
 8000bbc:	195b      	adds	r3, r3, r5
 8000bbe:	19db      	adds	r3, r3, r7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	434b      	muls	r3, r1
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0019      	movs	r1, r3
 8000bce:	183b      	adds	r3, r7, r0
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	4119      	asrs	r1, r3
 8000bd8:	000b      	movs	r3, r1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d014      	beq.n	8000c0a <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 8000be0:	230b      	movs	r3, #11
 8000be2:	18fa      	adds	r2, r7, r3
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	b2d9      	uxtb	r1, r3
 8000bee:	230a      	movs	r3, #10
 8000bf0:	18fa      	adds	r2, r7, r3
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	2328      	movs	r3, #40	; 0x28
 8000bfe:	195b      	adds	r3, r3, r5
 8000c00:	19db      	adds	r3, r3, r7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff ff4a 	bl	8000a9e <st7565_setpixel>
		for (i = 0; i < w; i++) {
 8000c0a:	2116      	movs	r1, #22
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	3201      	adds	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	2316      	movs	r3, #22
 8000c18:	18fa      	adds	r2, r7, r3
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	185b      	adds	r3, r3, r1
 8000c20:	19db      	adds	r3, r3, r7
 8000c22:	7812      	ldrb	r2, [r2, #0]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3bd      	bcc.n	8000ba6 <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 8000c2a:	2117      	movs	r1, #23
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	3201      	adds	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	2317      	movs	r3, #23
 8000c38:	18fa      	adds	r2, r7, r3
 8000c3a:	2324      	movs	r3, #36	; 0x24
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	185b      	adds	r3, r3, r1
 8000c40:	19db      	adds	r3, r3, r7
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d3a8      	bcc.n	8000b9c <st7565_drawbitmap+0x28>
			}
		}
	}
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b006      	add	sp, #24
 8000c52:	bdb0      	pop	{r4, r5, r7, pc}

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fe14 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f83e 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f000 fa2a 	bl	80010b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c64:	f000 fa02 	bl	800106c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c68:	f000 f9d0 	bl	800100c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000c6c:	f000 f89c 	bl	8000da8 <MX_ADC_Init>
  MX_TIM3_Init();
 8000c70:	f000 f94c 	bl	8000f0c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000c74:	f000 f90c 	bl	8000e90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c78:	f004 faba 	bl	80051f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Servo */
  ServoHandle = osThreadNew(Task_Servo, NULL, &Servo_attributes);
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <main+0x64>)
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <main+0x68>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f004 fb0e 	bl	80052a4 <osThreadNew>
 8000c88:	0002      	movs	r2, r0
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <main+0x6c>)
 8000c8c:	601a      	str	r2, [r3, #0]

  /* creation of Joystick */
  JoystickHandle = osThreadNew(Task_Joystick, NULL, &Joystick_attributes);
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <main+0x70>)
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <main+0x74>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	0018      	movs	r0, r3
 8000c96:	f004 fb05 	bl	80052a4 <osThreadNew>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <main+0x78>)
 8000c9e:	601a      	str	r2, [r3, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Task_LCD, NULL, &LCD_attributes);
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <main+0x7c>)
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <main+0x80>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f004 fafc 	bl	80052a4 <osThreadNew>
 8000cac:	0002      	movs	r2, r0
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <main+0x84>)
 8000cb0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cb2:	f004 fac9 	bl	8005248 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <main+0x62>
 8000cb8:	080078ec 	.word	0x080078ec
 8000cbc:	080011f1 	.word	0x080011f1
 8000cc0:	20001e98 	.word	0x20001e98
 8000cc4:	08007910 	.word	0x08007910
 8000cc8:	08001335 	.word	0x08001335
 8000ccc:	20001e9c 	.word	0x20001e9c
 8000cd0:	08007934 	.word	0x08007934
 8000cd4:	08001359 	.word	0x08001359
 8000cd8:	20001ea0 	.word	0x20001ea0

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b099      	sub	sp, #100	; 0x64
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	242c      	movs	r4, #44	; 0x2c
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2334      	movs	r3, #52	; 0x34
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f006 fcf4 	bl	80076da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf2:	231c      	movs	r3, #28
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f006 fcec 	bl	80076da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d02:	003b      	movs	r3, r7
 8000d04:	0018      	movs	r0, r3
 8000d06:	231c      	movs	r3, #28
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f006 fce5 	bl	80076da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000d10:	0021      	movs	r1, r4
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2211      	movs	r2, #17
 8000d16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2201      	movs	r2, #1
 8000d22:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2210      	movs	r2, #16
 8000d28:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	0252      	lsls	r2, r2, #9
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	22a0      	movs	r2, #160	; 0xa0
 8000d3c:	0392      	lsls	r2, r2, #14
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2201      	movs	r2, #1
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 fe3d 	bl	80029c8 <HAL_RCC_OscConfig>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d52:	f000 fb4b 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	211c      	movs	r1, #28
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2202      	movs	r2, #2
 8000d62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2101      	movs	r1, #1
 8000d74:	0018      	movs	r0, r3
 8000d76:	f002 f9ad 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d7e:	f000 fb35 	bl	80013ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d82:	003b      	movs	r3, r7
 8000d84:	2202      	movs	r2, #2
 8000d86:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d88:	003b      	movs	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	003b      	movs	r3, r7
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 fb19 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d9a:	f000 fb27 	bl	80013ec <Error_Handler>
  }
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b019      	add	sp, #100	; 0x64
 8000da4:	bd90      	pop	{r4, r7, pc}
	...

08000da8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	0018      	movs	r0, r3
 8000db2:	230c      	movs	r3, #12
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f006 fc8f 	bl	80076da <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000dbc:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000dbe:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <MX_ADC_Init+0xe4>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dc2:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000dfa:	22c2      	movs	r2, #194	; 0xc2
 8000dfc:	32ff      	adds	r2, #255	; 0xff
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000e08:	2224      	movs	r2, #36	; 0x24
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fdbc 	bl	8001994 <HAL_ADC_Init>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e20:	f000 fae4 	bl	80013ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0152      	lsls	r2, r2, #5
 8000e30:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2207      	movs	r2, #7
 8000e36:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e38:	1d3a      	adds	r2, r7, #4
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 ff82 	bl	8001d48 <HAL_ADC_ConfigChannel>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e48:	f000 fad0 	bl	80013ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	220d      	movs	r2, #13
 8000e50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e52:	1d3a      	adds	r2, r7, #4
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 ff75 	bl	8001d48 <HAL_ADC_ConfigChannel>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000e62:	f000 fac3 	bl	80013ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	220e      	movs	r2, #14
 8000e6a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e6c:	1d3a      	adds	r2, r7, #4
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_ADC_Init+0xe0>)
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 ff68 	bl	8001d48 <HAL_ADC_ConfigChannel>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000e7c:	f000 fab6 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b004      	add	sp, #16
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20001ca0 	.word	0x20001ca0
 8000e8c:	40012400 	.word	0x40012400

08000e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_SPI1_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000e9c:	2282      	movs	r2, #130	; 0x82
 8000e9e:	0052      	lsls	r2, r2, #1
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eaa:	22e0      	movs	r2, #224	; 0xe0
 8000eac:	00d2      	lsls	r2, r2, #3
 8000eae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ec6:	2230      	movs	r2, #48	; 0x30
 8000ec8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ede:	2207      	movs	r2, #7
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eea:	2208      	movs	r2, #8
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f002 fb69 	bl	80035c8 <HAL_SPI_Init>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 fa77 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20001d24 	.word	0x20001d24
 8000f08:	40013000 	.word	0x40013000

08000f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	2328      	movs	r3, #40	; 0x28
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	0018      	movs	r0, r3
 8000f18:	2310      	movs	r3, #16
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f006 fbdc 	bl	80076da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	2320      	movs	r3, #32
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	0018      	movs	r0, r3
 8000f28:	2308      	movs	r3, #8
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f006 fbd4 	bl	80076da <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	0018      	movs	r0, r3
 8000f36:	231c      	movs	r3, #28
 8000f38:	001a      	movs	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f006 fbcd 	bl	80076da <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f40:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f42:	4a30      	ldr	r2, [pc, #192]	; (8001004 <MX_TIM3_Init+0xf8>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f48:	222f      	movs	r2, #47	; 0x2f
 8000f4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_TIM3_Init+0xfc>)
 8000f56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 feb4 	bl	8003cd4 <HAL_TIM_Base_Init>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f70:	f000 fa3c 	bl	80013ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f74:	2128      	movs	r1, #40	; 0x28
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	0152      	lsls	r2, r2, #5
 8000f7c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f7e:	187a      	adds	r2, r7, r1
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f003 f8cb 	bl	8004120 <HAL_TIM_ConfigClockSource>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f8e:	f000 fa2d 	bl	80013ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f002 feed 	bl	8003d74 <HAL_TIM_PWM_Init>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f9e:	f000 fa25 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb0:	187a      	adds	r2, r7, r1
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f003 fcc0 	bl	800493c <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000fc0:	f000 fa14 	bl	80013ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2260      	movs	r2, #96	; 0x60
 8000fc8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fdc:	1d39      	adds	r1, r7, #4
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000fe0:	220c      	movs	r2, #12
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f002 ffd6 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000fec:	f000 f9fe 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <MX_TIM3_Init+0xf4>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 fb5e 	bl	80016b4 <HAL_TIM_MspPostInit>

}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00e      	add	sp, #56	; 0x38
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20001d88 	.word	0x20001d88
 8001004:	40000400 	.word	0x40000400
 8001008:	00004e1f 	.word	0x00004e1f

0800100c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MX_USART2_UART_Init+0x5c>)
 8001014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001018:	22e1      	movs	r2, #225	; 0xe1
 800101a:	0252      	lsls	r2, r2, #9
 800101c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART2_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <MX_USART2_UART_Init+0x58>)
 8001050:	0018      	movs	r0, r3
 8001052:	f003 fcd1 	bl	80049f8 <HAL_UART_Init>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800105a:	f000 f9c7 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20001e14 	.word	0x20001e14
 8001068:	40004400 	.word	0x40004400

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_DMA_Init+0x48>)
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_DMA_Init+0x48>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MX_DMA_Init+0x48>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2103      	movs	r1, #3
 800108e:	2009      	movs	r0, #9
 8001090:	f001 f91c 	bl	80022cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8001094:	2009      	movs	r0, #9
 8001096:	f001 f92e 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2103      	movs	r1, #3
 800109e:	200a      	movs	r0, #10
 80010a0:	f001 f914 	bl	80022cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f001 f926 	bl	80022f6 <HAL_NVIC_EnableIRQ>

}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40021000 	.word	0x40021000

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	2414      	movs	r4, #20
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	0018      	movs	r0, r3
 80010c4:	2314      	movs	r3, #20
 80010c6:	001a      	movs	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	f006 fb06 	bl	80076da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b45      	ldr	r3, [pc, #276]	; (80011e4 <MX_GPIO_Init+0x12c>)
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	4b44      	ldr	r3, [pc, #272]	; (80011e4 <MX_GPIO_Init+0x12c>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	0309      	lsls	r1, r1, #12
 80010d8:	430a      	orrs	r2, r1
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <MX_GPIO_Init+0x12c>)
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	031b      	lsls	r3, r3, #12
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <MX_GPIO_Init+0x12c>)
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <MX_GPIO_Init+0x12c>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	03c9      	lsls	r1, r1, #15
 80010f4:	430a      	orrs	r2, r1
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <MX_GPIO_Init+0x12c>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	03db      	lsls	r3, r3, #15
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <MX_GPIO_Init+0x12c>)
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <MX_GPIO_Init+0x12c>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0289      	lsls	r1, r1, #10
 8001110:	430a      	orrs	r2, r1
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <MX_GPIO_Init+0x12c>)
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <MX_GPIO_Init+0x12c>)
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <MX_GPIO_Init+0x12c>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	02c9      	lsls	r1, r1, #11
 800112c:	430a      	orrs	r2, r1
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_GPIO_Init+0x12c>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	02db      	lsls	r3, r3, #11
 8001138:	4013      	ands	r3, r2
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_GPIO_Init+0x130>)
 8001140:	2201      	movs	r2, #1
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	0018      	movs	r0, r3
 8001146:	f001 fc21 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	0099      	lsls	r1, r3, #2
 800114e:	2390      	movs	r3, #144	; 0x90
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	2200      	movs	r2, #0
 8001154:	0018      	movs	r0, r3
 8001156:	f001 fc19 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_GPIO_Init+0x134>)
 800115c:	2200      	movs	r2, #0
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	0018      	movs	r0, r3
 8001162:	f001 fc13 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8001166:	193b      	adds	r3, r7, r4
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	193b      	adds	r3, r7, r4
 800116e:	2201      	movs	r2, #1
 8001170:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 800117e:	193b      	adds	r3, r7, r4
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <MX_GPIO_Init+0x130>)
 8001182:	0019      	movs	r1, r3
 8001184:	0010      	movs	r0, r2
 8001186:	f001 fa89 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 800118a:	0021      	movs	r1, r4
 800118c:	187b      	adds	r3, r7, r1
 800118e:	22c0      	movs	r2, #192	; 0xc0
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	000c      	movs	r4, r1
 8001196:	193b      	adds	r3, r7, r4
 8001198:	2201      	movs	r2, #1
 800119a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	193b      	adds	r3, r7, r4
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	193a      	adds	r2, r7, r4
 80011aa:	2390      	movs	r3, #144	; 0x90
 80011ac:	05db      	lsls	r3, r3, #23
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 fa73 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 80011b6:	0021      	movs	r1, r4
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2201      	movs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <MX_GPIO_Init+0x134>)
 80011d4:	0019      	movs	r1, r3
 80011d6:	0010      	movs	r0, r2
 80011d8:	f001 fa60 	bl	800269c <HAL_GPIO_Init>

}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b00b      	add	sp, #44	; 0x2c
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000400 	.word	0x48000400

080011f0 <Task_Servo>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Servo */
void Task_Servo(void *argument)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////  IMPLEMENTARE STERGATOARE  /////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)
 80011f8:	4b49      	ldr	r3, [pc, #292]	; (8001320 <Task_Servo+0x130>)
 80011fa:	210c      	movs	r1, #12
 80011fc:	0018      	movs	r0, r3
 80011fe:	f002 fe11 	bl	8003e24 <HAL_TIM_PWM_Start>

	for(;;){

		// STERGERE X1 - Joystick Sus
		if(adcValue[0] <= 1000 && treaptaCurentaServo == 0){ // Joystick sus
 8001202:	4b48      	ldr	r3, [pc, #288]	; (8001324 <Task_Servo+0x134>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	23fa      	movs	r3, #250	; 0xfa
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	429a      	cmp	r2, r3
 800120c:	d80d      	bhi.n	800122a <Task_Servo+0x3a>
 800120e:	4b46      	ldr	r3, [pc, #280]	; (8001328 <Task_Servo+0x138>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <Task_Servo+0x3a>
			isServoBusy = 1;
 8001216:	4b45      	ldr	r3, [pc, #276]	; (800132c <Task_Servo+0x13c>)
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]
			Servo_modLucruServo(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff f95d 	bl	80004dc <Servo_modLucruServo>
			isServoBusy = 0;
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <Task_Servo+0x13c>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e005      	b.n	8001236 <Task_Servo+0x46>
		}
		else{
			Servo_modLucruServo(0);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff f956 	bl	80004dc <Servo_modLucruServo>
			isServoBusy = 0;
 8001230:	4b3e      	ldr	r3, [pc, #248]	; (800132c <Task_Servo+0x13c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
		}

		// Setare treapta de viteza, maxim 3 trepte
		if (adcValue[0] >= 4000 && treaptaCurentaServo <= 2){ //Joystick jos
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <Task_Servo+0x134>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	23fa      	movs	r3, #250	; 0xfa
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	429a      	cmp	r2, r3
 8001240:	d308      	bcc.n	8001254 <Task_Servo+0x64>
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <Task_Servo+0x138>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d804      	bhi.n	8001254 <Task_Servo+0x64>
			treaptaCurentaServo++;
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <Task_Servo+0x138>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <Task_Servo+0x138>)
 8001252:	601a      	str	r2, [r3, #0]
		}

		// Joystick sus, micsorare treapta viteza
		if(adcValue[0] <= 1000 && treaptaCurentaServo > 0){
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <Task_Servo+0x134>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	23fa      	movs	r3, #250	; 0xfa
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d808      	bhi.n	8001272 <Task_Servo+0x82>
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <Task_Servo+0x138>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <Task_Servo+0x82>
			treaptaCurentaServo--;
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <Task_Servo+0x138>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <Task_Servo+0x138>)
 8001270:	601a      	str	r2, [r3, #0]
		}

		// TREAPTA 1

		if(treaptaCurentaServo == 1)	{
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <Task_Servo+0x138>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <Task_Servo+0x96>
			isServoBusy = 1;
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <Task_Servo+0x13c>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
			Servo_modLucruServo(2);
 8001280:	2002      	movs	r0, #2
 8001282:	f7ff f92b 	bl	80004dc <Servo_modLucruServo>
		}

		// TREAPTA 2

		if(treaptaCurentaServo == 2)	{
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <Task_Servo+0x138>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d105      	bne.n	800129a <Task_Servo+0xaa>
			isServoBusy = 1;
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <Task_Servo+0x13c>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
			Servo_modLucruServo(3);
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff f921 	bl	80004dc <Servo_modLucruServo>
		}

		// TREAPTA 3

		if (treaptaCurentaServo == 3) {
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <Task_Servo+0x138>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d105      	bne.n	80012ae <Task_Servo+0xbe>
			isServoBusy = 1;
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <Task_Servo+0x13c>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
			Servo_modLucruServo(4);
 80012a8:	2004      	movs	r0, #4
 80012aa:	f7ff f917 	bl	80004dc <Servo_modLucruServo>
		}

		// RESETARE - Apasare Buton

		if (adcValue[2] <= 1000){ // Buton apasat
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <Task_Servo+0x134>)
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	23fa      	movs	r3, #250	; 0xfa
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d809      	bhi.n	80012ce <Task_Servo+0xde>
			TIM3 -> CCR4 = 500; //Motor reset
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <Task_Servo+0x140>)
 80012bc:	22fa      	movs	r2, #250	; 0xfa
 80012be:	0052      	lsls	r2, r2, #1
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
			treaptaCurentaServo = 0;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <Task_Servo+0x138>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
			isServoBusy = 0;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <Task_Servo+0x13c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		}

		// STROPIRE PARBRIZ

		if (adcValue[1] <= 1000 && isServoBusy != 1) { //Joystick dreapta;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <Task_Servo+0x134>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	23fa      	movs	r3, #250	; 0xfa
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d80c      	bhi.n	80012f4 <Task_Servo+0x104>
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <Task_Servo+0x13c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d008      	beq.n	80012f4 <Task_Servo+0x104>
			isServoBusy = 1;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <Task_Servo+0x13c>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
			Servo_modLucruServo(5);
 80012e8:	2005      	movs	r0, #5
 80012ea:	f7ff f8f7 	bl	80004dc <Servo_modLucruServo>
			isServoBusy = 0;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <Task_Servo+0x13c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
		}

		// STROPIRE LUNETA

		if(adcValue[1] >= 4000 && isServoBusy != 1){ //Stanga !!!
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <Task_Servo+0x134>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	23fa      	movs	r3, #250	; 0xfa
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d380      	bcc.n	8001202 <Task_Servo+0x12>
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <Task_Servo+0x13c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d100      	bne.n	800130a <Task_Servo+0x11a>
 8001308:	e77b      	b.n	8001202 <Task_Servo+0x12>
			isServoBusy = 1;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <Task_Servo+0x13c>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
			Servo_modLucruServo(6);
 8001310:	2006      	movs	r0, #6
 8001312:	f7ff f8e3 	bl	80004dc <Servo_modLucruServo>
			isServoBusy = 0;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <Task_Servo+0x13c>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
		if(adcValue[0] <= 1000 && treaptaCurentaServo == 0){ // Joystick sus
 800131c:	e771      	b.n	8001202 <Task_Servo+0x12>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20001d88 	.word	0x20001d88
 8001324:	20001ea8 	.word	0x20001ea8
 8001328:	20001ea4 	.word	0x20001ea4
 800132c:	20001eb4 	.word	0x20001eb4
 8001330:	40000400 	.word	0x40000400

08001334 <Task_Joystick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Joystick */
void Task_Joystick(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Joystick */

	HAL_ADC_Start_DMA(&hadc, adcValue, 3);
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <Task_Joystick+0x1c>)
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <Task_Joystick+0x20>)
 8001340:	2203      	movs	r2, #3
 8001342:	0018      	movs	r0, r3
 8001344:	f000 fc66 	bl	8001c14 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f004 f853 	bl	80053f4 <osDelay>
 800134e:	e7fb      	b.n	8001348 <Task_Joystick+0x14>
 8001350:	20001ea8 	.word	0x20001ea8
 8001354:	20001ca0 	.word	0x20001ca0

08001358 <Task_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_LCD */
void Task_LCD(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_LCD */
  /* Infinite loop */
  for(;;)
  {
	  // initializare LCD
	  	st7565_init();
 8001360:	f7ff fa52 	bl	8000808 <st7565_init>
	  	st7565_backlight_enable();
 8001364:	f7ff fafe 	bl	8000964 <st7565_backlight_enable>

	  	/* Infinite loop */
	  	for(;;)	{

	  		if(isServoBusy == 0){
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <Task_LCD+0x88>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <Task_LCD+0x1e>
	  			Display_modLucruDisplay(0);
 8001370:	2000      	movs	r0, #0
 8001372:	f7fe ff55 	bl	8000220 <Display_modLucruDisplay>
	  		}

	  		if(adcValue[0] <= 1000 && treaptaCurentaServo == 0){
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <Task_LCD+0x8c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	23fa      	movs	r3, #250	; 0xfa
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	429a      	cmp	r2, r3
 8001380:	d806      	bhi.n	8001390 <Task_LCD+0x38>
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <Task_LCD+0x90>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <Task_LCD+0x38>
	  			Display_modLucruDisplay(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f7fe ff48 	bl	8000220 <Display_modLucruDisplay>
	  		}

	  		if(treaptaCurentaServo == 1){
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <Task_LCD+0x90>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <Task_LCD+0x46>
	  			Display_modLucruDisplay(2);
 8001398:	2002      	movs	r0, #2
 800139a:	f7fe ff41 	bl	8000220 <Display_modLucruDisplay>
	  		}

	  		if(treaptaCurentaServo == 2){
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <Task_LCD+0x90>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d102      	bne.n	80013ac <Task_LCD+0x54>
	  			Display_modLucruDisplay(3);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f7fe ff3a 	bl	8000220 <Display_modLucruDisplay>
	  		}

	  		if(treaptaCurentaServo == 3){
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <Task_LCD+0x90>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d102      	bne.n	80013ba <Task_LCD+0x62>
	  			Display_modLucruDisplay(4);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f7fe ff33 	bl	8000220 <Display_modLucruDisplay>
	  		}

	  		if(adcValue[1] <= 1000){
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <Task_LCD+0x8c>)
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	23fa      	movs	r3, #250	; 0xfa
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d802      	bhi.n	80013cc <Task_LCD+0x74>
	  			Display_modLucruDisplay(5);
 80013c6:	2005      	movs	r0, #5
 80013c8:	f7fe ff2a 	bl	8000220 <Display_modLucruDisplay>
	  		}

	  		if(adcValue[1] >= 4000){
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <Task_LCD+0x8c>)
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	23fa      	movs	r3, #250	; 0xfa
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3c7      	bcc.n	8001368 <Task_LCD+0x10>
	  			Display_modLucruDisplay(6);
 80013d8:	2006      	movs	r0, #6
 80013da:	f7fe ff21 	bl	8000220 <Display_modLucruDisplay>
	  		if(isServoBusy == 0){
 80013de:	e7c3      	b.n	8001368 <Task_LCD+0x10>
 80013e0:	20001eb4 	.word	0x20001eb4
 80013e4:	20001ea8 	.word	0x20001ea8
 80013e8:	20001ea4 	.word	0x20001ea4

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_MspInit+0x50>)
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_MspInit+0x50>)
 8001404:	2101      	movs	r1, #1
 8001406:	430a      	orrs	r2, r1
 8001408:	619a      	str	r2, [r3, #24]
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x50>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_MspInit+0x50>)
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_MspInit+0x50>)
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0549      	lsls	r1, r1, #21
 8001420:	430a      	orrs	r2, r1
 8001422:	61da      	str	r2, [r3, #28]
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_MspInit+0x50>)
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	055b      	lsls	r3, r3, #21
 800142c:	4013      	ands	r3, r2
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001432:	2302      	movs	r3, #2
 8001434:	425b      	negs	r3, r3
 8001436:	2200      	movs	r2, #0
 8001438:	2103      	movs	r1, #3
 800143a:	0018      	movs	r0, r3
 800143c:	f000 ff46 	bl	80022cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	2414      	movs	r4, #20
 8001456:	193b      	adds	r3, r7, r4
 8001458:	0018      	movs	r0, r3
 800145a:	2314      	movs	r3, #20
 800145c:	001a      	movs	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	f006 f93b 	bl	80076da <memset>
  if(hadc->Instance==ADC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a35      	ldr	r2, [pc, #212]	; (8001540 <HAL_ADC_MspInit+0xf4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d163      	bne.n	8001536 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_ADC_MspInit+0xf8>)
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_ADC_MspInit+0xf8>)
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	0089      	lsls	r1, r1, #2
 8001478:	430a      	orrs	r2, r1
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_ADC_MspInit+0xf8>)
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_ADC_MspInit+0xf8>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_ADC_MspInit+0xf8>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0309      	lsls	r1, r1, #12
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_ADC_MspInit+0xf8>)
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	031b      	lsls	r3, r3, #12
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	221c      	movs	r2, #28
 80014aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	2203      	movs	r2, #3
 80014b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_ADC_MspInit+0xfc>)
 80014bc:	0019      	movs	r1, r3
 80014be:	0010      	movs	r0, r2
 80014c0:	f001 f8ec 	bl	800269c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014c6:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_ADC_MspInit+0x104>)
 80014c8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014ee:	2220      	movs	r2, #32
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014f4:	22c0      	movs	r2, #192	; 0xc0
 80014f6:	0192      	lsls	r2, r2, #6
 80014f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_ADC_MspInit+0x100>)
 80014fc:	0018      	movs	r0, r3
 80014fe:	f000 ff17 	bl	8002330 <HAL_DMA_Init>
 8001502:	1e03      	subs	r3, r0, #0
 8001504:	d001      	beq.n	800150a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001506:	f7ff ff71 	bl	80013ec <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_ADC_MspInit+0x108>)
 800150c:	23a8      	movs	r3, #168	; 0xa8
 800150e:	58d3      	ldr	r3, [r2, r3]
 8001510:	4910      	ldr	r1, [pc, #64]	; (8001554 <HAL_ADC_MspInit+0x108>)
 8001512:	220f      	movs	r2, #15
 8001514:	4393      	bics	r3, r2
 8001516:	22a8      	movs	r2, #168	; 0xa8
 8001518:	508b      	str	r3, [r1, r2]
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_ADC_MspInit+0x108>)
 800151c:	23a8      	movs	r3, #168	; 0xa8
 800151e:	58d3      	ldr	r3, [r2, r3]
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <HAL_ADC_MspInit+0x108>)
 8001522:	2201      	movs	r2, #1
 8001524:	4313      	orrs	r3, r2
 8001526:	22a8      	movs	r2, #168	; 0xa8
 8001528:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_ADC_MspInit+0x100>)
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_ADC_MspInit+0x100>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b00b      	add	sp, #44	; 0x2c
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40012400 	.word	0x40012400
 8001544:	40021000 	.word	0x40021000
 8001548:	48000800 	.word	0x48000800
 800154c:	20001ce0 	.word	0x20001ce0
 8001550:	40020008 	.word	0x40020008
 8001554:	40020000 	.word	0x40020000

08001558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	2414      	movs	r4, #20
 8001562:	193b      	adds	r3, r7, r4
 8001564:	0018      	movs	r0, r3
 8001566:	2314      	movs	r3, #20
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f006 f8b5 	bl	80076da <memset>
  if(hspi->Instance==SPI1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_SPI_MspInit+0x90>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d132      	bne.n	80015e0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_SPI_MspInit+0x94>)
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_SPI_MspInit+0x94>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0149      	lsls	r1, r1, #5
 8001584:	430a      	orrs	r2, r1
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_SPI_MspInit+0x94>)
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	015b      	lsls	r3, r3, #5
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_SPI_MspInit+0x94>)
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_SPI_MspInit+0x94>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0289      	lsls	r1, r1, #10
 80015a0:	430a      	orrs	r2, r1
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_SPI_MspInit+0x94>)
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015b2:	0021      	movs	r1, r4
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	22a0      	movs	r2, #160	; 0xa0
 80015b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2202      	movs	r2, #2
 80015be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2203      	movs	r2, #3
 80015ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	187a      	adds	r2, r7, r1
 80015d4:	2390      	movs	r3, #144	; 0x90
 80015d6:	05db      	lsls	r3, r3, #23
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 f85e 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b00b      	add	sp, #44	; 0x2c
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	40013000 	.word	0x40013000
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_TIM_Base_MspInit+0xac>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d147      	bne.n	8001692 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_TIM_Base_MspInit+0xb0>)
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_TIM_Base_MspInit+0xb0>)
 8001608:	2102      	movs	r1, #2
 800160a:	430a      	orrs	r2, r1
 800160c:	61da      	str	r2, [r3, #28]
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_TIM_Base_MspInit+0xb0>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 800161c:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_TIM_Base_MspInit+0xb8>)
 800161e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001622:	2210      	movs	r2, #16
 8001624:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	0052      	lsls	r2, r2, #1
 8001638:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	00d2      	lsls	r2, r2, #3
 8001640:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001650:	0018      	movs	r0, r3
 8001652:	f000 fe6d 	bl	8002330 <HAL_DMA_Init>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d001      	beq.n	800165e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800165a:	f7ff fec7 	bl	80013ec <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DEFAULT);
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_TIM_Base_MspInit+0xbc>)
 8001660:	23a8      	movs	r3, #168	; 0xa8
 8001662:	58d3      	ldr	r3, [r2, r3]
 8001664:	4911      	ldr	r1, [pc, #68]	; (80016ac <HAL_TIM_Base_MspInit+0xbc>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001668:	4013      	ands	r3, r2
 800166a:	22a8      	movs	r2, #168	; 0xa8
 800166c:	508b      	str	r3, [r1, r2]
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_TIM_Base_MspInit+0xbc>)
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_TIM_Base_MspInit+0xbc>)
 8001672:	23a8      	movs	r3, #168	; 0xa8
 8001674:	58d3      	ldr	r3, [r2, r3]
 8001676:	22a8      	movs	r2, #168	; 0xa8
 8001678:	508b      	str	r3, [r1, r2]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 800168a:	621a      	str	r2, [r3, #32]
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_TIM_Base_MspInit+0xb4>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b004      	add	sp, #16
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40000400 	.word	0x40000400
 80016a0:	40021000 	.word	0x40021000
 80016a4:	20001dd0 	.word	0x20001dd0
 80016a8:	40020030 	.word	0x40020030
 80016ac:	40020000 	.word	0x40020000
 80016b0:	fffff0ff 	.word	0xfffff0ff

080016b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	240c      	movs	r4, #12
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	0018      	movs	r0, r3
 80016c2:	2314      	movs	r3, #20
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f006 f807 	bl	80076da <memset>
  if(htim->Instance==TIM3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_TIM_MspPostInit+0x74>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d123      	bne.n	800171e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_TIM_MspPostInit+0x78>)
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_TIM_MspPostInit+0x78>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	02c9      	lsls	r1, r1, #11
 80016e0:	430a      	orrs	r2, r1
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_TIM_MspPostInit+0x78>)
 80016e6:	695a      	ldr	r2, [r3, #20]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	02db      	lsls	r3, r3, #11
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016f2:	0021      	movs	r1, r4
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2202      	movs	r2, #2
 80016f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2202      	movs	r2, #2
 80016fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2201      	movs	r2, #1
 8001710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	187b      	adds	r3, r7, r1
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_TIM_MspPostInit+0x7c>)
 8001716:	0019      	movs	r1, r3
 8001718:	0010      	movs	r0, r2
 800171a:	f000 ffbf 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b009      	add	sp, #36	; 0x24
 8001724:	bd90      	pop	{r4, r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	40000400 	.word	0x40000400
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b08b      	sub	sp, #44	; 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	2414      	movs	r4, #20
 800173e:	193b      	adds	r3, r7, r4
 8001740:	0018      	movs	r0, r3
 8001742:	2314      	movs	r3, #20
 8001744:	001a      	movs	r2, r3
 8001746:	2100      	movs	r1, #0
 8001748:	f005 ffc7 	bl	80076da <memset>
  if(huart->Instance==USART2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_UART_MspInit+0x90>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d132      	bne.n	80017bc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_MspInit+0x94>)
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_UART_MspInit+0x94>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0289      	lsls	r1, r1, #10
 8001760:	430a      	orrs	r2, r1
 8001762:	61da      	str	r2, [r3, #28]
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_UART_MspInit+0x94>)
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	029b      	lsls	r3, r3, #10
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x94>)
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0x94>)
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0289      	lsls	r1, r1, #10
 800177c:	430a      	orrs	r2, r1
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0x94>)
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800178e:	0021      	movs	r1, r4
 8001790:	187b      	adds	r3, r7, r1
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2202      	movs	r2, #2
 800179a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2201      	movs	r2, #1
 80017ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	187a      	adds	r2, r7, r1
 80017b0:	2390      	movs	r3, #144	; 0x90
 80017b2:	05db      	lsls	r3, r3, #23
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 ff70 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b00b      	add	sp, #44	; 0x2c
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40021000 	.word	0x40021000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f89a 	bl	8001914 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017e0:	f005 f8da 	bl	8006998 <xTaskGetSchedulerState>
 80017e4:	0003      	movs	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d001      	beq.n	80017ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017ea:	f005 fd65 	bl	80072b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <DMA1_Ch1_IRQHandler+0x14>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 fe46 	bl	800248c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	20001ce0 	.word	0x20001ce0

0800180c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fe3a 	bl	800248c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	20001dd0 	.word	0x20001dd0

08001824 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001832:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 8001836:	490e      	ldr	r1, [pc, #56]	; (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 800184c:	4c0b      	ldr	r4, [pc, #44]	; (800187c <LoopForever+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800185a:	f7ff ffe3 	bl	8001824 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800185e:	f005 ff0d 	bl	800767c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001862:	f7ff f9f7 	bl	8000c54 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   r0, =_estack
 8001868:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	20001c7c 	.word	0x20001c7c
  ldr r2, =_sidata
 8001874:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 8001878:	20001c7c 	.word	0x20001c7c
  ldr r4, =_ebss
 800187c:	200038c4 	.word	0x200038c4

08001880 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_COMP_IRQHandler>
	...

08001884 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_Init+0x24>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_Init+0x24>)
 800188e:	2110      	movs	r1, #16
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f809 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189a:	f7ff fdad 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40022000 	.word	0x40022000

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_InitTick+0x5c>)
 80018b6:	681c      	ldr	r4, [r3, #0]
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_InitTick+0x60>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	0019      	movs	r1, r3
 80018be:	23fa      	movs	r3, #250	; 0xfa
 80018c0:	0098      	lsls	r0, r3, #2
 80018c2:	f7fe fc21 	bl	8000108 <__udivsi3>
 80018c6:	0003      	movs	r3, r0
 80018c8:	0019      	movs	r1, r3
 80018ca:	0020      	movs	r0, r4
 80018cc:	f7fe fc1c 	bl	8000108 <__udivsi3>
 80018d0:	0003      	movs	r3, r0
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fd1f 	bl	8002316 <HAL_SYSTICK_Config>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e00f      	b.n	8001900 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d80b      	bhi.n	80018fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	2301      	movs	r3, #1
 80018ea:	425b      	negs	r3, r3
 80018ec:	2200      	movs	r2, #0
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 fcec 	bl	80022cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_InitTick+0x64>)
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b003      	add	sp, #12
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	20001c08 	.word	0x20001c08
 800190c:	20001c10 	.word	0x20001c10
 8001910:	20001c0c 	.word	0x20001c0c

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x1c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	001a      	movs	r2, r3
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_IncTick+0x20>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	18d2      	adds	r2, r2, r3
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_IncTick+0x20>)
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	20001c10 	.word	0x20001c10
 8001934:	20001eb8 	.word	0x20001eb8

08001938 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <HAL_GetTick+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	20001eb8 	.word	0x20001eb8

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fff0 	bl	8001938 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	001a      	movs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	189b      	adds	r3, r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	f7ff ffe0 	bl	8001938 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b004      	add	sp, #16
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	20001c10 	.word	0x20001c10

08001994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199c:	230f      	movs	r3, #15
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e125      	b.n	8001bfe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2234      	movs	r2, #52	; 0x34
 80019c4:	2100      	movs	r1, #0
 80019c6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff fd3e 	bl	800144c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	2210      	movs	r2, #16
 80019d6:	4013      	ands	r3, r2
 80019d8:	d000      	beq.n	80019dc <HAL_ADC_Init+0x48>
 80019da:	e103      	b.n	8001be4 <HAL_ADC_Init+0x250>
 80019dc:	230f      	movs	r3, #15
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d000      	beq.n	80019e8 <HAL_ADC_Init+0x54>
 80019e6:	e0fd      	b.n	8001be4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2204      	movs	r2, #4
 80019f0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80019f2:	d000      	beq.n	80019f6 <HAL_ADC_Init+0x62>
 80019f4:	e0f6      	b.n	8001be4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	4a83      	ldr	r2, [pc, #524]	; (8001c08 <HAL_ADC_Init+0x274>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	2202      	movs	r2, #2
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d112      	bne.n	8001a3a <HAL_ADC_Init+0xa6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d009      	beq.n	8001a36 <HAL_ADC_Init+0xa2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Init+0xa6>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_ADC_Init+0xa8>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d116      	bne.n	8001a6e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2218      	movs	r2, #24
 8001a48:	4393      	bics	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	0899      	lsrs	r1, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4964      	ldr	r1, [pc, #400]	; (8001c0c <HAL_ADC_Init+0x278>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7e1b      	ldrb	r3, [r3, #24]
 8001a82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7e5b      	ldrb	r3, [r3, #25]
 8001a88:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e9b      	ldrb	r3, [r3, #26]
 8001a90:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a92:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d002      	beq.n	8001aa2 <HAL_ADC_Init+0x10e>
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	015b      	lsls	r3, r3, #5
 8001aa0:	e000      	b.n	8001aa4 <HAL_ADC_Init+0x110>
 8001aa2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001aa4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001aaa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_Init+0x124>
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	e000      	b.n	8001aba <HAL_ADC_Init+0x126>
 8001ab8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001aba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2124      	movs	r1, #36	; 0x24
 8001ac0:	5c5b      	ldrb	r3, [r3, r1]
 8001ac2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ac4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7edb      	ldrb	r3, [r3, #27]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d115      	bne.n	8001b00 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7e9b      	ldrb	r3, [r3, #26]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0252      	lsls	r2, r2, #9
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	e00b      	b.n	8001b00 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	2220      	movs	r2, #32
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2201      	movs	r2, #1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	23c2      	movs	r3, #194	; 0xc2
 8001b06:	33ff      	adds	r3, #255	; 0xff
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d007      	beq.n	8001b1c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b14:	4313      	orrs	r3, r2
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68d9      	ldr	r1, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	055b      	lsls	r3, r3, #21
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d01b      	beq.n	8001b70 <HAL_ADC_Init+0x1dc>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d017      	beq.n	8001b70 <HAL_ADC_Init+0x1dc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d013      	beq.n	8001b70 <HAL_ADC_Init+0x1dc>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d00f      	beq.n	8001b70 <HAL_ADC_Init+0x1dc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d00b      	beq.n	8001b70 <HAL_ADC_Init+0x1dc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d007      	beq.n	8001b70 <HAL_ADC_Init+0x1dc>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d003      	beq.n	8001b70 <HAL_ADC_Init+0x1dc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	2b07      	cmp	r3, #7
 8001b6e:	d112      	bne.n	8001b96 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2107      	movs	r1, #7
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6959      	ldr	r1, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_ADC_Init+0x27c>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d10b      	bne.n	8001bbe <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bbc:	e01c      	b.n	8001bf8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	2212      	movs	r2, #18
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001bda:	230f      	movs	r3, #15
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001be2:	e009      	b.n	8001bf8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	2210      	movs	r2, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	fffffefd 	.word	0xfffffefd
 8001c0c:	fffe0219 	.word	0xfffe0219
 8001c10:	833fffe7 	.word	0x833fffe7

08001c14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4013      	ands	r3, r2
 8001c32:	d15e      	bne.n	8001cf2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2234      	movs	r2, #52	; 0x34
 8001c38:	5c9b      	ldrb	r3, [r3, r2]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Start_DMA+0x2e>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e05e      	b.n	8001d00 <HAL_ADC_Start_DMA+0xec>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2234      	movs	r2, #52	; 0x34
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	7e5b      	ldrb	r3, [r3, #25]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d007      	beq.n	8001c62 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001c52:	2317      	movs	r3, #23
 8001c54:	18fc      	adds	r4, r7, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f983 	bl	8001f64 <ADC_Enable>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c62:	2317      	movs	r3, #23
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d146      	bne.n	8001cfa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_ADC_Start_DMA+0xf4>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	0052      	lsls	r2, r2, #1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2234      	movs	r2, #52	; 0x34
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_ADC_Start_DMA+0xf8>)
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_ADC_Start_DMA+0xfc>)
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_ADC_Start_DMA+0x100>)
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	221c      	movs	r2, #28
 8001caa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3340      	adds	r3, #64	; 0x40
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f000 fb70 	bl	80023c0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2104      	movs	r1, #4
 8001cec:	430a      	orrs	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e003      	b.n	8001cfa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cf2:	2317      	movs	r3, #23
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001cfa:	2317      	movs	r3, #23
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b007      	add	sp, #28
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	fffff0fe 	.word	0xfffff0fe
 8001d0c:	0800206d 	.word	0x0800206d
 8001d10:	08002121 	.word	0x08002121
 8001d14:	0800213f 	.word	0x0800213f

08001d18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d52:	230f      	movs	r3, #15
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d011      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x46>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d00d      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x46>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d009      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x46>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d005      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x46>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d001      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x46>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2234      	movs	r2, #52	; 0x34
 8001d92:	5c9b      	ldrb	r3, [r3, r2]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x54>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0d0      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x1f6>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2234      	movs	r2, #52	; 0x34
 8001da0:	2101      	movs	r1, #1
 8001da2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2204      	movs	r2, #4
 8001dac:	4013      	ands	r3, r2
 8001dae:	d000      	beq.n	8001db2 <HAL_ADC_ConfigChannel+0x6a>
 8001db0:	e0b4      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a64      	ldr	r2, [pc, #400]	; (8001f48 <HAL_ADC_ConfigChannel+0x200>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d100      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x76>
 8001dbc:	e082      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	055b      	lsls	r3, r3, #21
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d037      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d033      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d02f      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d02b      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d027      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	d023      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	2b06      	cmp	r3, #6
 8001e0e:	d01f      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	d01b      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2107      	movs	r1, #7
 8001e24:	400b      	ands	r3, r1
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d012      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2107      	movs	r1, #7
 8001e36:	438a      	bics	r2, r1
 8001e38:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6959      	ldr	r1, [r3, #20]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2207      	movs	r2, #7
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d007      	beq.n	8001e68 <HAL_ADC_ConfigChannel+0x120>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b11      	cmp	r3, #17
 8001e5e:	d003      	beq.n	8001e68 <HAL_ADC_ConfigChannel+0x120>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b12      	cmp	r3, #18
 8001e66:	d163      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e68:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_ADC_ConfigChannel+0x204>)
 8001e6a:	6819      	ldr	r1, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d009      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0x140>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b11      	cmp	r3, #17
 8001e7a:	d102      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x13a>
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	03db      	lsls	r3, r3, #15
 8001e80:	e004      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x144>
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	045b      	lsls	r3, r3, #17
 8001e86:	e001      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x144>
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	041b      	lsls	r3, r3, #16
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <HAL_ADC_ConfigChannel+0x204>)
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d14a      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_ADC_ConfigChannel+0x208>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	492d      	ldr	r1, [pc, #180]	; (8001f54 <HAL_ADC_ConfigChannel+0x20c>)
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7fe f931 	bl	8000108 <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f9      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x16e>
 8001ec2:	e035      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4099      	lsls	r1, r3
 8001ed2:	000b      	movs	r3, r1
 8001ed4:	43d9      	mvns	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	400a      	ands	r2, r1
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d007      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x1ae>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b11      	cmp	r3, #17
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x1ae>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d11c      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_ADC_ConfigChannel+0x204>)
 8001ef8:	6819      	ldr	r1, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d007      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0x1ca>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b11      	cmp	r3, #17
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x1c6>
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_ADC_ConfigChannel+0x210>)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_ADC_ConfigChannel+0x214>)
 8001f10:	e000      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_ADC_ConfigChannel+0x218>)
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <HAL_ADC_ConfigChannel+0x204>)
 8001f16:	400b      	ands	r3, r1
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e009      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	2220      	movs	r2, #32
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2234      	movs	r2, #52	; 0x34
 8001f34:	2100      	movs	r1, #0
 8001f36:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f38:	230f      	movs	r3, #15
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	00001001 	.word	0x00001001
 8001f4c:	40012708 	.word	0x40012708
 8001f50:	20001c08 	.word	0x20001c08
 8001f54:	000f4240 	.word	0x000f4240
 8001f58:	ffbfffff 	.word	0xffbfffff
 8001f5c:	feffffff 	.word	0xfeffffff
 8001f60:	ff7fffff 	.word	0xff7fffff

08001f64 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d112      	bne.n	8001fa8 <ADC_Enable+0x44>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d009      	beq.n	8001fa4 <ADC_Enable+0x40>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d101      	bne.n	8001fa8 <ADC_Enable+0x44>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <ADC_Enable+0x46>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d152      	bne.n	8002054 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	; (8002060 <ADC_Enable+0xfc>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	2201      	movs	r2, #1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e03f      	b.n	8002056 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <ADC_Enable+0x100>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	491f      	ldr	r1, [pc, #124]	; (8002068 <ADC_Enable+0x104>)
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7fe f88b 	bl	8000108 <__udivsi3>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ff6:	e002      	b.n	8001ffe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002004:	f7ff fc98 	bl	8001938 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800200c:	e01b      	b.n	8002046 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200e:	f7ff fc93 	bl	8001938 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d914      	bls.n	8002046 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	2b01      	cmp	r3, #1
 8002028:	d00d      	beq.n	8002046 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	2210      	movs	r2, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	2201      	movs	r2, #1
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e007      	b.n	8002056 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	2b01      	cmp	r3, #1
 8002052:	d1dc      	bne.n	800200e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	80000017 	.word	0x80000017
 8002064:	20001c08 	.word	0x20001c08
 8002068:	000f4240 	.word	0x000f4240

0800206c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	2250      	movs	r2, #80	; 0x50
 8002080:	4013      	ands	r3, r2
 8002082:	d140      	bne.n	8002106 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	2280      	movs	r2, #128	; 0x80
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	23c0      	movs	r3, #192	; 0xc0
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d12d      	bne.n	80020fc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d129      	bne.n	80020fc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2208      	movs	r2, #8
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d122      	bne.n	80020fc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d110      	bne.n	80020e4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	210c      	movs	r1, #12
 80020ce:	438a      	bics	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	4a11      	ldr	r2, [pc, #68]	; (800211c <ADC_DMAConvCplt+0xb0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	2201      	movs	r2, #1
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
 80020e2:	e00b      	b.n	80020fc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	2220      	movs	r2, #32
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	2201      	movs	r2, #1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff fe0a 	bl	8001d18 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002104:	e005      	b.n	8002112 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	0010      	movs	r0, r2
 8002110:	4798      	blx	r3
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	fffffefe 	.word	0xfffffefe

08002120 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff fdf9 	bl	8001d28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b004      	add	sp, #16
 800213c:	bd80      	pop	{r7, pc}

0800213e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	431a      	orrs	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215c:	2204      	movs	r2, #4
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff fde6 	bl	8001d38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	0002      	movs	r2, r0
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b7f      	cmp	r3, #127	; 0x7f
 8002186:	d809      	bhi.n	800219c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	001a      	movs	r2, r3
 800218e:	231f      	movs	r3, #31
 8002190:	401a      	ands	r2, r3
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_EnableIRQ+0x30>)
 8002194:	2101      	movs	r1, #1
 8002196:	4091      	lsls	r1, r2
 8002198:	000a      	movs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
  }
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	0002      	movs	r2, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	1dfb      	adds	r3, r7, #7
 80021b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b7f      	cmp	r3, #127	; 0x7f
 80021bc:	d828      	bhi.n	8002210 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021be:	4a2f      	ldr	r2, [pc, #188]	; (800227c <__NVIC_SetPriority+0xd4>)
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	33c0      	adds	r3, #192	; 0xc0
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	589b      	ldr	r3, [r3, r2]
 80021ce:	1dfa      	adds	r2, r7, #7
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	0011      	movs	r1, r2
 80021d4:	2203      	movs	r2, #3
 80021d6:	400a      	ands	r2, r1
 80021d8:	00d2      	lsls	r2, r2, #3
 80021da:	21ff      	movs	r1, #255	; 0xff
 80021dc:	4091      	lsls	r1, r2
 80021de:	000a      	movs	r2, r1
 80021e0:	43d2      	mvns	r2, r2
 80021e2:	401a      	ands	r2, r3
 80021e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	401a      	ands	r2, r3
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	2303      	movs	r3, #3
 80021f6:	4003      	ands	r3, r0
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021fc:	481f      	ldr	r0, [pc, #124]	; (800227c <__NVIC_SetPriority+0xd4>)
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b25b      	sxtb	r3, r3
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	430a      	orrs	r2, r1
 8002208:	33c0      	adds	r3, #192	; 0xc0
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800220e:	e031      	b.n	8002274 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002210:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <__NVIC_SetPriority+0xd8>)
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	0019      	movs	r1, r3
 8002218:	230f      	movs	r3, #15
 800221a:	400b      	ands	r3, r1
 800221c:	3b08      	subs	r3, #8
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3306      	adds	r3, #6
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	3304      	adds	r3, #4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1dfa      	adds	r2, r7, #7
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	0011      	movs	r1, r2
 8002230:	2203      	movs	r2, #3
 8002232:	400a      	ands	r2, r1
 8002234:	00d2      	lsls	r2, r2, #3
 8002236:	21ff      	movs	r1, #255	; 0xff
 8002238:	4091      	lsls	r1, r2
 800223a:	000a      	movs	r2, r1
 800223c:	43d2      	mvns	r2, r2
 800223e:	401a      	ands	r2, r3
 8002240:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	401a      	ands	r2, r3
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	0018      	movs	r0, r3
 8002250:	2303      	movs	r3, #3
 8002252:	4003      	ands	r3, r0
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002258:	4809      	ldr	r0, [pc, #36]	; (8002280 <__NVIC_SetPriority+0xd8>)
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	001c      	movs	r4, r3
 8002260:	230f      	movs	r3, #15
 8002262:	4023      	ands	r3, r4
 8002264:	3b08      	subs	r3, #8
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	430a      	orrs	r2, r1
 800226a:	3306      	adds	r3, #6
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	18c3      	adds	r3, r0, r3
 8002270:	3304      	adds	r3, #4
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b003      	add	sp, #12
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	e000e100 	.word	0xe000e100
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	045b      	lsls	r3, r3, #17
 8002294:	429a      	cmp	r2, r3
 8002296:	d301      	bcc.n	800229c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002298:	2301      	movs	r3, #1
 800229a:	e010      	b.n	80022be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <SysTick_Config+0x44>)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	3a01      	subs	r2, #1
 80022a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a4:	2301      	movs	r3, #1
 80022a6:	425b      	negs	r3, r3
 80022a8:	2103      	movs	r1, #3
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff ff7c 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SysTick_Config+0x44>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SysTick_Config+0x44>)
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022bc:	2300      	movs	r3, #0
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	e000e010 	.word	0xe000e010

080022cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	210f      	movs	r1, #15
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	1c02      	adds	r2, r0, #0
 80022dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b25b      	sxtb	r3, r3
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	0002      	movs	r2, r0
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	b25b      	sxtb	r3, r3
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff ff33 	bl	8002174 <__NVIC_EnableIRQ>
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff ffaf 	bl	8002284 <SysTick_Config>
 8002326:	0003      	movs	r3, r0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e036      	b.n	80023b4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2221      	movs	r2, #33	; 0x21
 800234a:	2102      	movs	r1, #2
 800234c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_DMA_Init+0x8c>)
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	0018      	movs	r0, r3
 8002398:	f000 f946 	bl	8002628 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2221      	movs	r2, #33	; 0x21
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}  
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	ffffc00f 	.word	0xffffc00f

080023c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2317      	movs	r3, #23
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	5c9b      	ldrb	r3, [r3, r2]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Start_IT+0x24>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e04f      	b.n	8002484 <HAL_DMA_Start_IT+0xc4>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2221      	movs	r2, #33	; 0x21
 80023f0:	5c9b      	ldrb	r3, [r3, r2]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d13a      	bne.n	800246e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2221      	movs	r2, #33	; 0x21
 80023fc:	2102      	movs	r1, #2
 80023fe:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	438a      	bics	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f8d7 	bl	80025d0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	210e      	movs	r1, #14
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e00f      	b.n	800245c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	210a      	movs	r1, #10
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2104      	movs	r1, #4
 8002458:	438a      	bics	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e007      	b.n	800247e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002476:	2317      	movs	r3, #23
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800247e:	2317      	movs	r3, #23
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	781b      	ldrb	r3, [r3, #0]
} 
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b006      	add	sp, #24
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2204      	movs	r2, #4
 80024aa:	409a      	lsls	r2, r3
 80024ac:	0013      	movs	r3, r2
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	d024      	beq.n	80024fe <HAL_DMA_IRQHandler+0x72>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2204      	movs	r2, #4
 80024b8:	4013      	ands	r3, r2
 80024ba:	d020      	beq.n	80024fe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2220      	movs	r2, #32
 80024c4:	4013      	ands	r3, r2
 80024c6:	d107      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2104      	movs	r1, #4
 80024d4:	438a      	bics	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2104      	movs	r1, #4
 80024e2:	4091      	lsls	r1, r2
 80024e4:	000a      	movs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d100      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x66>
 80024f0:	e06a      	b.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	0010      	movs	r0, r2
 80024fa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	e064      	b.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2202      	movs	r2, #2
 8002504:	409a      	lsls	r2, r3
 8002506:	0013      	movs	r3, r2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	d02b      	beq.n	8002566 <HAL_DMA_IRQHandler+0xda>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d027      	beq.n	8002566 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2220      	movs	r2, #32
 800251e:	4013      	ands	r3, r2
 8002520:	d10b      	bne.n	800253a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	210a      	movs	r1, #10
 800252e:	438a      	bics	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2221      	movs	r2, #33	; 0x21
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	2102      	movs	r1, #2
 8002544:	4091      	lsls	r1, r2
 8002546:	000a      	movs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	d036      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	0010      	movs	r0, r2
 8002562:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002564:	e030      	b.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2208      	movs	r2, #8
 800256c:	409a      	lsls	r2, r3
 800256e:	0013      	movs	r3, r2
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	d028      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2208      	movs	r2, #8
 800257a:	4013      	ands	r3, r2
 800257c:	d024      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	210e      	movs	r1, #14
 800258a:	438a      	bics	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2101      	movs	r1, #1
 8002598:	4091      	lsls	r1, r2
 800259a:	000a      	movs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2221      	movs	r2, #33	; 0x21
 80025a8:	2101      	movs	r1, #1
 80025aa:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	0010      	movs	r0, r2
 80025c4:	4798      	blx	r3
    }
   }
}  
 80025c6:	e7ff      	b.n	80025c8 <HAL_DMA_IRQHandler+0x13c>
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2101      	movs	r1, #1
 80025e8:	4091      	lsls	r1, r2
 80025ea:	000a      	movs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d108      	bne.n	8002610 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800260e:	e007      	b.n	8002620 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}

08002628 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	001a      	movs	r2, r3
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <DMA_CalcBaseAndBitshift+0x60>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d810      	bhi.n	800265e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <DMA_CalcBaseAndBitshift+0x64>)
 8002642:	4694      	mov	ip, r2
 8002644:	4463      	add	r3, ip
 8002646:	2114      	movs	r1, #20
 8002648:	0018      	movs	r0, r3
 800264a:	f7fd fd5d 	bl	8000108 <__udivsi3>
 800264e:	0003      	movs	r3, r0
 8002650:	009a      	lsls	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <DMA_CalcBaseAndBitshift+0x68>)
 800265a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800265c:	e00f      	b.n	800267e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <DMA_CalcBaseAndBitshift+0x6c>)
 8002664:	4694      	mov	ip, r2
 8002666:	4463      	add	r3, ip
 8002668:	2114      	movs	r1, #20
 800266a:	0018      	movs	r0, r3
 800266c:	f7fd fd4c 	bl	8000108 <__udivsi3>
 8002670:	0003      	movs	r3, r0
 8002672:	009a      	lsls	r2, r3, #2
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a07      	ldr	r2, [pc, #28]	; (8002698 <DMA_CalcBaseAndBitshift+0x70>)
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40020407 	.word	0x40020407
 800268c:	bffdfff8 	.word	0xbffdfff8
 8002690:	40020000 	.word	0x40020000
 8002694:	bffdfbf8 	.word	0xbffdfbf8
 8002698:	40020400 	.word	0x40020400

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	e155      	b.n	8002958 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4091      	lsls	r1, r2
 80026b6:	000a      	movs	r2, r1
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <HAL_GPIO_Init+0x28>
 80026c2:	e146      	b.n	8002952 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d005      	beq.n	80026dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2203      	movs	r2, #3
 80026d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d130      	bne.n	800273e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	409a      	lsls	r2, r3
 80026ea:	0013      	movs	r3, r2
 80026ec:	43da      	mvns	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	0013      	movs	r3, r2
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002712:	2201      	movs	r2, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
 8002718:	0013      	movs	r3, r2
 800271a:	43da      	mvns	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	2201      	movs	r2, #1
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2203      	movs	r2, #3
 8002744:	4013      	ands	r3, r2
 8002746:	2b03      	cmp	r3, #3
 8002748:	d017      	beq.n	800277a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	409a      	lsls	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d123      	bne.n	80027ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	58d3      	ldr	r3, [r2, r3]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2207      	movs	r2, #7
 8002798:	4013      	ands	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	409a      	lsls	r2, r3
 80027a0:	0013      	movs	r3, r2
 80027a2:	43da      	mvns	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2107      	movs	r1, #7
 80027b2:	400b      	ands	r3, r1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	409a      	lsls	r2, r3
 80027b8:	0013      	movs	r3, r2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	6939      	ldr	r1, [r7, #16]
 80027cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	409a      	lsls	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2203      	movs	r2, #3
 80027ec:	401a      	ands	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	23c0      	movs	r3, #192	; 0xc0
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	4013      	ands	r3, r2
 800280c:	d100      	bne.n	8002810 <HAL_GPIO_Init+0x174>
 800280e:	e0a0      	b.n	8002952 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002810:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x2d4>)
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	4b56      	ldr	r3, [pc, #344]	; (8002970 <HAL_GPIO_Init+0x2d4>)
 8002816:	2101      	movs	r1, #1
 8002818:	430a      	orrs	r2, r1
 800281a:	619a      	str	r2, [r3, #24]
 800281c:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_GPIO_Init+0x2d4>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_GPIO_Init+0x2d8>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	589b      	ldr	r3, [r3, r2]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2203      	movs	r2, #3
 800283a:	4013      	ands	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	409a      	lsls	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	43da      	mvns	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	2390      	movs	r3, #144	; 0x90
 8002850:	05db      	lsls	r3, r3, #23
 8002852:	429a      	cmp	r2, r3
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x1ee>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x1ea>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a46      	ldr	r2, [pc, #280]	; (800297c <HAL_GPIO_Init+0x2e0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x1e6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a45      	ldr	r2, [pc, #276]	; (8002980 <HAL_GPIO_Init+0x2e4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x1e2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a44      	ldr	r2, [pc, #272]	; (8002984 <HAL_GPIO_Init+0x2e8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x1de>
 8002876:	2304      	movs	r3, #4
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 800287a:	2305      	movs	r3, #5
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 800288a:	2300      	movs	r3, #0
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	2103      	movs	r1, #3
 8002890:	400a      	ands	r2, r1
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_GPIO_Init+0x2d8>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	4013      	ands	r3, r2
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028d4:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43da      	mvns	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	029b      	lsls	r3, r3, #10
 80028ec:	4013      	ands	r3, r2
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43da      	mvns	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	035b      	lsls	r3, r3, #13
 8002916:	4013      	ands	r3, r2
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43da      	mvns	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	039b      	lsls	r3, r3, #14
 8002940:	4013      	ands	r3, r2
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	40da      	lsrs	r2, r3
 8002960:	1e13      	subs	r3, r2, #0
 8002962:	d000      	beq.n	8002966 <HAL_GPIO_Init+0x2ca>
 8002964:	e6a2      	b.n	80026ac <HAL_GPIO_Init+0x10>
  } 
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00
 8002984:	48001000 	.word	0x48001000
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	0008      	movs	r0, r1
 8002996:	0011      	movs	r1, r2
 8002998:	1cbb      	adds	r3, r7, #2
 800299a:	1c02      	adds	r2, r0, #0
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	1c7b      	adds	r3, r7, #1
 80029a0:	1c0a      	adds	r2, r1, #0
 80029a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a4:	1c7b      	adds	r3, r7, #1
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ac:	1cbb      	adds	r3, r7, #2
 80029ae:	881a      	ldrh	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029b6:	1cbb      	adds	r3, r7, #2
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f000 fb76 	bl	80030c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	d100      	bne.n	80029e8 <HAL_RCC_OscConfig+0x20>
 80029e6:	e08e      	b.n	8002b06 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029e8:	4bc5      	ldr	r3, [pc, #788]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	220c      	movs	r2, #12
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00e      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f4:	4bc2      	ldr	r3, [pc, #776]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	220c      	movs	r2, #12
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d117      	bne.n	8002a30 <HAL_RCC_OscConfig+0x68>
 8002a00:	4bbf      	ldr	r3, [pc, #764]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	23c0      	movs	r3, #192	; 0xc0
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	401a      	ands	r2, r3
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	025b      	lsls	r3, r3, #9
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d10e      	bne.n	8002a30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a12:	4bbb      	ldr	r3, [pc, #748]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d100      	bne.n	8002a20 <HAL_RCC_OscConfig+0x58>
 8002a1e:	e071      	b.n	8002b04 <HAL_RCC_OscConfig+0x13c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d000      	beq.n	8002a2a <HAL_RCC_OscConfig+0x62>
 8002a28:	e06c      	b.n	8002b04 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f000 fb4c 	bl	80030c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x80>
 8002a38:	4bb1      	ldr	r3, [pc, #708]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4bb0      	ldr	r3, [pc, #704]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	0249      	lsls	r1, r1, #9
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e02f      	b.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10c      	bne.n	8002a6a <HAL_RCC_OscConfig+0xa2>
 8002a50:	4bab      	ldr	r3, [pc, #684]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4baa      	ldr	r3, [pc, #680]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a56:	49ab      	ldr	r1, [pc, #684]	; (8002d04 <HAL_RCC_OscConfig+0x33c>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	4ba8      	ldr	r3, [pc, #672]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4ba7      	ldr	r3, [pc, #668]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a62:	49a9      	ldr	r1, [pc, #676]	; (8002d08 <HAL_RCC_OscConfig+0x340>)
 8002a64:	400a      	ands	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e01e      	b.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d10e      	bne.n	8002a90 <HAL_RCC_OscConfig+0xc8>
 8002a72:	4ba3      	ldr	r3, [pc, #652]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4ba2      	ldr	r3, [pc, #648]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	02c9      	lsls	r1, r1, #11
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	4b9f      	ldr	r3, [pc, #636]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b9e      	ldr	r3, [pc, #632]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	0249      	lsls	r1, r1, #9
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
 8002a90:	4b9b      	ldr	r3, [pc, #620]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b9a      	ldr	r3, [pc, #616]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a96:	499b      	ldr	r1, [pc, #620]	; (8002d04 <HAL_RCC_OscConfig+0x33c>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	4b98      	ldr	r3, [pc, #608]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b97      	ldr	r3, [pc, #604]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002aa2:	4999      	ldr	r1, [pc, #612]	; (8002d08 <HAL_RCC_OscConfig+0x340>)
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d014      	beq.n	8002ada <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe ff42 	bl	8001938 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aba:	f7fe ff3d 	bl	8001938 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	; 0x64
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e2fd      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002acc:	4b8c      	ldr	r3, [pc, #560]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	029b      	lsls	r3, r3, #10
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0xf2>
 8002ad8:	e015      	b.n	8002b06 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe ff2d 	bl	8001938 <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe ff28 	bl	8001938 <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e2e8      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x11c>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x14a>
 8002b10:	e06c      	b.n	8002bec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b12:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	220c      	movs	r2, #12
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00e      	beq.n	8002b3a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b1c:	4b78      	ldr	r3, [pc, #480]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	220c      	movs	r2, #12
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d11f      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1a0>
 8002b28:	4b75      	ldr	r3, [pc, #468]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	23c0      	movs	r3, #192	; 0xc0
 8002b2e:	025b      	lsls	r3, r3, #9
 8002b30:	401a      	ands	r2, r3
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x188>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e2bb      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b6b      	ldr	r3, [pc, #428]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	22f8      	movs	r2, #248	; 0xf8
 8002b56:	4393      	bics	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00da      	lsls	r2, r3, #3
 8002b60:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e041      	b.n	8002bec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d024      	beq.n	8002bba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fedc 	bl	8001938 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b86:	f7fe fed7 	bl	8001938 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e297      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d0f1      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	22f8      	movs	r2, #248	; 0xf8
 8002ba8:	4393      	bics	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	00da      	lsls	r2, r3, #3
 8002bb2:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e018      	b.n	8002bec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe feb7 	bl	8001938 <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe feb2 	bl	8001938 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e272      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d1f1      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d036      	beq.n	8002c64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fe95 	bl	8001938 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fe90 	bl	8001938 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e250      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d0f1      	beq.n	8002c14 <HAL_RCC_OscConfig+0x24c>
 8002c30:	e018      	b.n	8002c64 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c32:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fe7b 	bl	8001938 <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fe76 	bl	8001938 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e236      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1f1      	bne.n	8002c48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2a8>
 8002c6e:	e0b5      	b.n	8002ddc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c70:	201f      	movs	r0, #31
 8002c72:	183b      	adds	r3, r7, r0
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	055b      	lsls	r3, r3, #21
 8002c80:	4013      	ands	r3, r2
 8002c82:	d110      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0549      	lsls	r1, r1, #21
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	61da      	str	r2, [r3, #28]
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	055b      	lsls	r3, r3, #21
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_OscConfig+0x344>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d11a      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_RCC_OscConfig+0x344>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_RCC_OscConfig+0x344>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	0049      	lsls	r1, r1, #1
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fe3a 	bl	8001938 <HAL_GetTick>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fe fe35 	bl	8001938 <HAL_GetTick>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b64      	cmp	r3, #100	; 0x64
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1f5      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x344>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10f      	bne.n	8002d10 <HAL_RCC_OscConfig+0x348>
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002cf2:	6a1a      	ldr	r2, [r3, #32]
 8002cf4:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <HAL_RCC_OscConfig+0x338>)
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	e036      	b.n	8002d6c <HAL_RCC_OscConfig+0x3a4>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	fffeffff 	.word	0xfffeffff
 8002d08:	fffbffff 	.word	0xfffbffff
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10c      	bne.n	8002d32 <HAL_RCC_OscConfig+0x36a>
 8002d18:	4bca      	ldr	r3, [pc, #808]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	4bc9      	ldr	r3, [pc, #804]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	438a      	bics	r2, r1
 8002d22:	621a      	str	r2, [r3, #32]
 8002d24:	4bc7      	ldr	r3, [pc, #796]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	4bc6      	ldr	r3, [pc, #792]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	621a      	str	r2, [r3, #32]
 8002d30:	e01c      	b.n	8002d6c <HAL_RCC_OscConfig+0x3a4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x38c>
 8002d3a:	4bc2      	ldr	r3, [pc, #776]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	4bc1      	ldr	r3, [pc, #772]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d40:	2104      	movs	r1, #4
 8002d42:	430a      	orrs	r2, r1
 8002d44:	621a      	str	r2, [r3, #32]
 8002d46:	4bbf      	ldr	r3, [pc, #764]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	4bbe      	ldr	r3, [pc, #760]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	621a      	str	r2, [r3, #32]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0x3a4>
 8002d54:	4bbb      	ldr	r3, [pc, #748]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	4bba      	ldr	r3, [pc, #744]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	621a      	str	r2, [r3, #32]
 8002d60:	4bb8      	ldr	r3, [pc, #736]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d62:	6a1a      	ldr	r2, [r3, #32]
 8002d64:	4bb7      	ldr	r3, [pc, #732]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d66:	2104      	movs	r1, #4
 8002d68:	438a      	bics	r2, r1
 8002d6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d014      	beq.n	8002d9e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d74:	f7fe fde0 	bl	8001938 <HAL_GetTick>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	e009      	b.n	8002d92 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe fddb 	bl	8001938 <HAL_GetTick>
 8002d82:	0002      	movs	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	4aaf      	ldr	r2, [pc, #700]	; (8003048 <HAL_RCC_OscConfig+0x680>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e19a      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	4bac      	ldr	r3, [pc, #688]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	2202      	movs	r2, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x3b6>
 8002d9c:	e013      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fdcb 	bl	8001938 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da6:	e009      	b.n	8002dbc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe fdc6 	bl	8001938 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	4aa5      	ldr	r2, [pc, #660]	; (8003048 <HAL_RCC_OscConfig+0x680>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e185      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	4ba1      	ldr	r3, [pc, #644]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc6:	231f      	movs	r3, #31
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd0:	4b9c      	ldr	r3, [pc, #624]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	4b9b      	ldr	r3, [pc, #620]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002dd6:	499d      	ldr	r1, [pc, #628]	; (800304c <HAL_RCC_OscConfig+0x684>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2210      	movs	r2, #16
 8002de2:	4013      	ands	r3, r2
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d12a      	bne.n	8002e44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002dee:	4b95      	ldr	r3, [pc, #596]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df2:	4b94      	ldr	r3, [pc, #592]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002df4:	2104      	movs	r1, #4
 8002df6:	430a      	orrs	r2, r1
 8002df8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002dfa:	4b92      	ldr	r3, [pc, #584]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfe:	4b91      	ldr	r3, [pc, #580]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	430a      	orrs	r2, r1
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fd97 	bl	8001938 <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e10:	f7fe fd92 	bl	8001938 <HAL_GetTick>
 8002e14:	0002      	movs	r2, r0
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e152      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d0f1      	beq.n	8002e10 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e2c:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	22f8      	movs	r2, #248	; 0xf8
 8002e32:	4393      	bics	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	00da      	lsls	r2, r3, #3
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
 8002e42:	e034      	b.n	8002eae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	3305      	adds	r3, #5
 8002e4a:	d111      	bne.n	8002e70 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e4c:	4b7d      	ldr	r3, [pc, #500]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e50:	4b7c      	ldr	r3, [pc, #496]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e52:	2104      	movs	r1, #4
 8002e54:	438a      	bics	r2, r1
 8002e56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e58:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	22f8      	movs	r2, #248	; 0xf8
 8002e5e:	4393      	bics	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	00da      	lsls	r2, r3, #3
 8002e68:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6e:	e01e      	b.n	8002eae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e70:	4b74      	ldr	r3, [pc, #464]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e74:	4b73      	ldr	r3, [pc, #460]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e76:	2104      	movs	r1, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e7c:	4b71      	ldr	r3, [pc, #452]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e80:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002e82:	2101      	movs	r1, #1
 8002e84:	438a      	bics	r2, r1
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e88:	f7fe fd56 	bl	8001938 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e92:	f7fe fd51 	bl	8001938 <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e111      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ea4:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d1f1      	bne.n	8002e92 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d05c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002eb8:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	220c      	movs	r2, #12
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	220c      	movs	r2, #12
 8002eca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d114      	bne.n	8002efa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ed0:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	23c0      	movs	r3, #192	; 0xc0
 8002ed6:	025b      	lsls	r3, r3, #9
 8002ed8:	401a      	ands	r2, r3
 8002eda:	23c0      	movs	r3, #192	; 0xc0
 8002edc:	025b      	lsls	r3, r3, #9
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10b      	bne.n	8002efa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ee2:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	025b      	lsls	r3, r3, #9
 8002eea:	4013      	ands	r3, r2
 8002eec:	d040      	beq.n	8002f70 <HAL_RCC_OscConfig+0x5a8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d03c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0e6      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01b      	beq.n	8002f3a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f02:	4b50      	ldr	r3, [pc, #320]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f06:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0249      	lsls	r1, r1, #9
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe fd12 	bl	8001938 <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f1a:	f7fe fd0d 	bl	8001938 <HAL_GetTick>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0cd      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f2c:	4b45      	ldr	r3, [pc, #276]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	025b      	lsls	r3, r3, #9
 8002f34:	4013      	ands	r3, r2
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x552>
 8002f38:	e01b      	b.n	8002f72 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f3a:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f40:	4943      	ldr	r1, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x688>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe fcf7 	bl	8001938 <HAL_GetTick>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f50:	f7fe fcf2 	bl	8001938 <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0b2      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f62:	4b38      	ldr	r3, [pc, #224]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	025b      	lsls	r3, r3, #9
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x588>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f70:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d100      	bne.n	8002f7c <HAL_RCC_OscConfig+0x5b4>
 8002f7a:	e0a4      	b.n	80030c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	220c      	movs	r2, #12
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d100      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5c2>
 8002f88:	e078      	b.n	800307c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d14c      	bne.n	800302c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002f98:	492e      	ldr	r1, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x68c>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fccb 	bl	8001938 <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fcc6 	bl	8001938 <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e086      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	049b      	lsls	r3, r3, #18
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	220f      	movs	r2, #15
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <HAL_RCC_OscConfig+0x690>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	431a      	orrs	r2, r3
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	0449      	lsls	r1, r1, #17
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fe fc99 	bl	8001938 <HAL_GetTick>
 8003006:	0003      	movs	r3, r0
 8003008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fc94 	bl	8001938 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e054      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	049b      	lsls	r3, r3, #18
 8003026:	4013      	ands	r3, r2
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x644>
 800302a:	e04c      	b.n	80030c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_OscConfig+0x67c>)
 8003032:	4908      	ldr	r1, [pc, #32]	; (8003054 <HAL_RCC_OscConfig+0x68c>)
 8003034:	400a      	ands	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fc7e 	bl	8001938 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003040:	e015      	b.n	800306e <HAL_RCC_OscConfig+0x6a6>
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	40021000 	.word	0x40021000
 8003048:	00001388 	.word	0x00001388
 800304c:	efffffff 	.word	0xefffffff
 8003050:	fffeffff 	.word	0xfffeffff
 8003054:	feffffff 	.word	0xfeffffff
 8003058:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fc6c 	bl	8001938 <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e02c      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_RCC_OscConfig+0x708>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	049b      	lsls	r3, r3, #18
 8003076:	4013      	ands	r3, r2
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x694>
 800307a:	e024      	b.n	80030c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e01f      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x708>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_RCC_OscConfig+0x708>)
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	23c0      	movs	r3, #192	; 0xc0
 8003098:	025b      	lsls	r3, r3, #9
 800309a:	401a      	ands	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d10e      	bne.n	80030c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	220f      	movs	r2, #15
 80030a8:	401a      	ands	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	23f0      	movs	r3, #240	; 0xf0
 80030b6:	039b      	lsls	r3, r3, #14
 80030b8:	401a      	ands	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b008      	add	sp, #32
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0bf      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b61      	ldr	r3, [pc, #388]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2201      	movs	r2, #1
 80030ee:	4013      	ands	r3, r2
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d911      	bls.n	800311a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b5e      	ldr	r3, [pc, #376]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	4393      	bics	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2201      	movs	r2, #1
 800310e:	4013      	ands	r3, r2
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d001      	beq.n	800311a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0a6      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2202      	movs	r2, #2
 8003120:	4013      	ands	r3, r2
 8003122:	d015      	beq.n	8003150 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2204      	movs	r2, #4
 800312a:	4013      	ands	r3, r2
 800312c:	d006      	beq.n	800313c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800312e:	4b51      	ldr	r3, [pc, #324]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 8003134:	21e0      	movs	r1, #224	; 0xe0
 8003136:	00c9      	lsls	r1, r1, #3
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b4d      	ldr	r3, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	22f0      	movs	r2, #240	; 0xf0
 8003142:	4393      	bics	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	d04c      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	4013      	ands	r3, r2
 800316c:	d120      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07a      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	049b      	lsls	r3, r3, #18
 8003182:	4013      	ands	r3, r2
 8003184:	d114      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06e      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003192:	4b38      	ldr	r3, [pc, #224]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 8003194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	4013      	ands	r3, r2
 800319c:	d108      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e062      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e05b      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4393      	bics	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7fe fbb8 	bl	8001938 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031cc:	e009      	b.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ce:	f7fe fbb3 	bl	8001938 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_RCC_ClockConfig+0x1a4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e042      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	220c      	movs	r2, #12
 80031e8:	401a      	ands	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1ec      	bne.n	80031ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d211      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	4393      	bics	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x19c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d001      	beq.n	8003226 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e020      	b.n	8003268 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2204      	movs	r2, #4
 800322c:	4013      	ands	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_RCC_ClockConfig+0x1a8>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003244:	f000 f820 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003248:	0001      	movs	r1, r0
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1a0>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	220f      	movs	r2, #15
 8003252:	4013      	ands	r3, r2
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1ac>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	000a      	movs	r2, r1
 800325a:	40da      	lsrs	r2, r3
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1b0>)
 800325e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003260:	2003      	movs	r0, #3
 8003262:	f7fe fb23 	bl	80018ac <HAL_InitTick>
  
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40022000 	.word	0x40022000
 8003274:	40021000 	.word	0x40021000
 8003278:	00001388 	.word	0x00001388
 800327c:	fffff8ff 	.word	0xfffff8ff
 8003280:	08007958 	.word	0x08007958
 8003284:	20001c08 	.word	0x20001c08

08003288 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b08f      	sub	sp, #60	; 0x3c
 800328c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800328e:	2314      	movs	r3, #20
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	4a38      	ldr	r2, [pc, #224]	; (8003374 <HAL_RCC_GetSysClockFreq+0xec>)
 8003294:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003296:	c313      	stmia	r3!, {r0, r1, r4}
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	4a36      	ldr	r2, [pc, #216]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf0>)
 80032a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032a2:	c313      	stmia	r3!, {r0, r1, r4}
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b0:	2300      	movs	r3, #0
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80032bc:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	220c      	movs	r2, #12
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d047      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0xd4>
 80032cc:	d849      	bhi.n	8003362 <HAL_RCC_GetSysClockFreq+0xda>
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x50>
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d003      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x56>
 80032d6:	e044      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d8:	4b29      	ldr	r3, [pc, #164]	; (8003380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032dc:	e044      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	0c9b      	lsrs	r3, r3, #18
 80032e2:	220f      	movs	r2, #15
 80032e4:	4013      	ands	r3, r2
 80032e6:	2214      	movs	r2, #20
 80032e8:	18ba      	adds	r2, r7, r2
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <HAL_RCC_GetSysClockFreq+0xf4>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	220f      	movs	r2, #15
 80032f4:	4013      	ands	r3, r2
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	23c0      	movs	r3, #192	; 0xc0
 8003300:	025b      	lsls	r3, r3, #9
 8003302:	401a      	ands	r2, r3
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	025b      	lsls	r3, r3, #9
 8003308:	429a      	cmp	r2, r3
 800330a:	d109      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800330c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800330e:	481c      	ldr	r0, [pc, #112]	; (8003380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003310:	f7fc fefa 	bl	8000108 <__udivsi3>
 8003314:	0003      	movs	r3, r0
 8003316:	001a      	movs	r2, r3
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	4353      	muls	r3, r2
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
 800331e:	e01a      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	025b      	lsls	r3, r3, #9
 8003326:	401a      	ands	r2, r3
 8003328:	23c0      	movs	r3, #192	; 0xc0
 800332a:	025b      	lsls	r3, r3, #9
 800332c:	429a      	cmp	r2, r3
 800332e:	d109      	bne.n	8003344 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003332:	4814      	ldr	r0, [pc, #80]	; (8003384 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003334:	f7fc fee8 	bl	8000108 <__udivsi3>
 8003338:	0003      	movs	r3, r0
 800333a:	001a      	movs	r2, r3
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	4353      	muls	r3, r2
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
 8003342:	e008      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003346:	480e      	ldr	r0, [pc, #56]	; (8003380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003348:	f7fc fede 	bl	8000108 <__udivsi3>
 800334c:	0003      	movs	r3, r0
 800334e:	001a      	movs	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	4353      	muls	r3, r2
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCC_GetSysClockFreq+0xfc>)
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003360:	e002      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003364:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003366:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b00f      	add	sp, #60	; 0x3c
 8003370:	bd90      	pop	{r4, r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	080078b4 	.word	0x080078b4
 8003378:	080078c4 	.word	0x080078c4
 800337c:	40021000 	.word	0x40021000
 8003380:	007a1200 	.word	0x007a1200
 8003384:	02dc6c00 	.word	0x02dc6c00

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <HAL_RCC_GetHCLKFreq+0x10>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	20001c08 	.word	0x20001c08

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80033a0:	f7ff fff2 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a4:	0001      	movs	r1, r0
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	2207      	movs	r2, #7
 80033ae:	4013      	ands	r3, r2
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	40d9      	lsrs	r1, r3
 80033b6:	000b      	movs	r3, r1
}    
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40021000 	.word	0x40021000
 80033c4:	08007968 	.word	0x08007968

080033c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	4013      	ands	r3, r2
 80033e2:	d100      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80033e4:	e08e      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2017      	movs	r0, #23
 80033e8:	183b      	adds	r3, r7, r0
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	055b      	lsls	r3, r3, #21
 80033f6:	4013      	ands	r3, r2
 80033f8:	d110      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	0549      	lsls	r1, r1, #21
 8003404:	430a      	orrs	r2, r1
 8003406:	61da      	str	r2, [r3, #28]
 8003408:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	055b      	lsls	r3, r3, #21
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003416:	183b      	adds	r3, r7, r0
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4013      	ands	r3, r2
 8003426:	d11a      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003428:	4b60      	ldr	r3, [pc, #384]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	0049      	lsls	r1, r1, #1
 8003432:	430a      	orrs	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fe fa7f 	bl	8001938 <HAL_GetTick>
 800343a:	0003      	movs	r3, r0
 800343c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	e008      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003440:	f7fe fa7a 	bl	8001938 <HAL_GetTick>
 8003444:	0002      	movs	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0a6      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4013      	ands	r3, r2
 800345c:	d0f0      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800345e:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003460:	6a1a      	ldr	r2, [r3, #32]
 8003462:	23c0      	movs	r3, #192	; 0xc0
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d034      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	23c0      	movs	r3, #192	; 0xc0
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4013      	ands	r3, r2
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	d02c      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003480:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a4a      	ldr	r2, [pc, #296]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003486:	4013      	ands	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	4b46      	ldr	r3, [pc, #280]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	0249      	lsls	r1, r1, #9
 8003494:	430a      	orrs	r2, r1
 8003496:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003498:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800349e:	4945      	ldr	r1, [pc, #276]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034a4:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe fa41 	bl	8001938 <HAL_GetTick>
 80034b6:	0003      	movs	r3, r0
 80034b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	e009      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe fa3c 	bl	8001938 <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	4a3c      	ldr	r2, [pc, #240]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e067      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	2202      	movs	r2, #2
 80034d6:	4013      	ands	r3, r2
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a34      	ldr	r2, [pc, #208]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034ea:	430a      	orrs	r2, r1
 80034ec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ee:	2317      	movs	r3, #23
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034fe:	492f      	ldr	r1, [pc, #188]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003500:	400a      	ands	r2, r1
 8003502:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800350e:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	2203      	movs	r2, #3
 8003514:	4393      	bics	r3, r2
 8003516:	0019      	movs	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800351e:	430a      	orrs	r2, r1
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2202      	movs	r2, #2
 8003528:	4013      	ands	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800353c:	430a      	orrs	r2, r1
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	02db      	lsls	r3, r3, #11
 8003548:	4013      	ands	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800355c:	430a      	orrs	r2, r1
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2220      	movs	r2, #32
 8003566:	4013      	ands	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	2210      	movs	r2, #16
 8003570:	4393      	bics	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800357a:	430a      	orrs	r2, r1
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4013      	ands	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	4393      	bics	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800359a:	430a      	orrs	r2, r1
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b006      	add	sp, #24
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
 80035b0:	fffffcff 	.word	0xfffffcff
 80035b4:	fffeffff 	.word	0xfffeffff
 80035b8:	00001388 	.word	0x00001388
 80035bc:	efffffff 	.word	0xefffffff
 80035c0:	fffcffff 	.word	0xfffcffff
 80035c4:	fff3ffff 	.word	0xfff3ffff

080035c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0a8      	b.n	800372c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	2382      	movs	r3, #130	; 0x82
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d009      	beq.n	8003602 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	61da      	str	r2, [r3, #28]
 80035f4:	e005      	b.n	8003602 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	225d      	movs	r2, #93	; 0x5d
 800360c:	5c9b      	ldrb	r3, [r3, r2]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	225c      	movs	r2, #92	; 0x5c
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	0018      	movs	r0, r3
 8003620:	f7fd ff9a 	bl	8001558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	225d      	movs	r2, #93	; 0x5d
 8003628:	2102      	movs	r1, #2
 800362a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2140      	movs	r1, #64	; 0x40
 8003638:	438a      	bics	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	23e0      	movs	r3, #224	; 0xe0
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	429a      	cmp	r2, r3
 8003646:	d902      	bls.n	800364e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e002      	b.n	8003654 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	23f0      	movs	r3, #240	; 0xf0
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	429a      	cmp	r2, r3
 800365e:	d008      	beq.n	8003672 <HAL_SPI_Init+0xaa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	23e0      	movs	r3, #224	; 0xe0
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	429a      	cmp	r2, r3
 800366a:	d002      	beq.n	8003672 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	2382      	movs	r3, #130	; 0x82
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	2384      	movs	r3, #132	; 0x84
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	400b      	ands	r3, r1
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2102      	movs	r1, #2
 800368e:	400b      	ands	r3, r1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	2101      	movs	r1, #1
 8003698:	400b      	ands	r3, r1
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6999      	ldr	r1, [r3, #24]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	400b      	ands	r3, r1
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2138      	movs	r1, #56	; 0x38
 80036ae:	400b      	ands	r3, r1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	400b      	ands	r3, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	0011      	movs	r1, r2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	019b      	lsls	r3, r3, #6
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	2204      	movs	r2, #4
 80036d8:	401a      	ands	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2110      	movs	r1, #16
 80036e0:	400b      	ands	r3, r1
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	2108      	movs	r1, #8
 80036ea:	400b      	ands	r3, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68d9      	ldr	r1, [r3, #12]
 80036f2:	23f0      	movs	r3, #240	; 0xf0
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	400b      	ands	r3, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	0011      	movs	r1, r2
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	015b      	lsls	r3, r3, #5
 8003702:	401a      	ands	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4907      	ldr	r1, [pc, #28]	; (8003734 <HAL_SPI_Init+0x16c>)
 8003718:	400a      	ands	r2, r1
 800371a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	225d      	movs	r2, #93	; 0x5d
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}
 8003734:	fffff7ff 	.word	0xfffff7ff

08003738 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003748:	231f      	movs	r3, #31
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	225c      	movs	r2, #92	; 0x5c
 8003754:	5c9b      	ldrb	r3, [r3, r2]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_SPI_Transmit+0x26>
 800375a:	2302      	movs	r3, #2
 800375c:	e140      	b.n	80039e0 <HAL_SPI_Transmit+0x2a8>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	225c      	movs	r2, #92	; 0x5c
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003766:	f7fe f8e7 	bl	8001938 <HAL_GetTick>
 800376a:	0003      	movs	r3, r0
 800376c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800376e:	2316      	movs	r3, #22
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	1dba      	adds	r2, r7, #6
 8003774:	8812      	ldrh	r2, [r2, #0]
 8003776:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	225d      	movs	r2, #93	; 0x5d
 800377c:	5c9b      	ldrb	r3, [r3, r2]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d004      	beq.n	800378e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003784:	231f      	movs	r3, #31
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]
    goto error;
 800378c:	e11d      	b.n	80039ca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_SPI_Transmit+0x64>
 8003794:	1dbb      	adds	r3, r7, #6
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800379c:	231f      	movs	r3, #31
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80037a4:	e111      	b.n	80039ca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	225d      	movs	r2, #93	; 0x5d
 80037aa:	2103      	movs	r1, #3
 80037ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1dba      	adds	r2, r7, #6
 80037be:	8812      	ldrh	r2, [r2, #0]
 80037c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1dba      	adds	r2, r7, #6
 80037c6:	8812      	ldrh	r2, [r2, #0]
 80037c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2244      	movs	r2, #68	; 0x44
 80037d4:	2100      	movs	r1, #0
 80037d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2246      	movs	r2, #70	; 0x46
 80037dc:	2100      	movs	r1, #0
 80037de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d110      	bne.n	800381a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	438a      	bics	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	01c9      	lsls	r1, r1, #7
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2240      	movs	r2, #64	; 0x40
 8003822:	4013      	ands	r3, r2
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d007      	beq.n	8003838 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	23e0      	movs	r3, #224	; 0xe0
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	429a      	cmp	r2, r3
 8003842:	d94e      	bls.n	80038e2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_SPI_Transmit+0x11e>
 800384c:	2316      	movs	r3, #22
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d13f      	bne.n	80038d6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	881a      	ldrh	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	1c9a      	adds	r2, r3, #2
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800387a:	e02c      	b.n	80038d6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2202      	movs	r2, #2
 8003884:	4013      	ands	r3, r2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d112      	bne.n	80038b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ae:	e012      	b.n	80038d6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b0:	f7fe f842 	bl	8001938 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d802      	bhi.n	80038c6 <HAL_SPI_Transmit+0x18e>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_SPI_Transmit+0x194>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80038cc:	231f      	movs	r3, #31
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2203      	movs	r2, #3
 80038d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80038d4:	e079      	b.n	80039ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1cd      	bne.n	800387c <HAL_SPI_Transmit+0x144>
 80038e0:	e04f      	b.n	8003982 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <HAL_SPI_Transmit+0x1bc>
 80038ea:	2316      	movs	r3, #22
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d141      	bne.n	8003978 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800391a:	e02d      	b.n	8003978 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2202      	movs	r2, #2
 8003924:	4013      	ands	r3, r2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d113      	bne.n	8003952 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003950:	e012      	b.n	8003978 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003952:	f7fd fff1 	bl	8001938 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d802      	bhi.n	8003968 <HAL_SPI_Transmit+0x230>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	d102      	bne.n	800396e <HAL_SPI_Transmit+0x236>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800396e:	231f      	movs	r3, #31
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2203      	movs	r2, #3
 8003974:	701a      	strb	r2, [r3, #0]
          goto error;
 8003976:	e028      	b.n	80039ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1cc      	bne.n	800391c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 f95d 	bl	8003c48 <SPI_EndRxTxTransaction>
 800398e:	1e03      	subs	r3, r0, #0
 8003990:	d002      	beq.n	8003998 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80039be:	231f      	movs	r3, #31
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e000      	b.n	80039ca <HAL_SPI_Transmit+0x292>
  }

error:
 80039c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	225d      	movs	r2, #93	; 0x5d
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	225c      	movs	r2, #92	; 0x5c
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80039da:	231f      	movs	r3, #31
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	781b      	ldrb	r3, [r3, #0]
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b008      	add	sp, #32
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f8:	f7fd ff9e 	bl	8001938 <HAL_GetTick>
 80039fc:	0002      	movs	r2, r0
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	18d3      	adds	r3, r2, r3
 8003a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a08:	f7fd ff96 	bl	8001938 <HAL_GetTick>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a10:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	015b      	lsls	r3, r3, #5
 8003a16:	0d1b      	lsrs	r3, r3, #20
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	4353      	muls	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1e:	e058      	b.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	d055      	beq.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a26:	f7fd ff87 	bl	8001938 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d902      	bls.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d142      	bne.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	21e0      	movs	r1, #224	; 0xe0
 8003a48:	438a      	bics	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	2382      	movs	r3, #130	; 0x82
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d113      	bne.n	8003a80 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d005      	beq.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d107      	bne.n	8003a80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2140      	movs	r1, #64	; 0x40
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	019b      	lsls	r3, r3, #6
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d110      	bne.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	491a      	ldr	r1, [pc, #104]	; (8003b00 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	0189      	lsls	r1, r1, #6
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	225d      	movs	r2, #93	; 0x5d
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	225c      	movs	r2, #92	; 0x5c
 8003aba:	2100      	movs	r1, #0
 8003abc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e017      	b.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	4013      	ands	r3, r2
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	425a      	negs	r2, r3
 8003ae2:	4153      	adcs	r3, r2
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d197      	bne.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b008      	add	sp, #32
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	20001c08 	.word	0x20001c08
 8003b00:	ffffdfff 	.word	0xffffdfff

08003b04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b12:	2317      	movs	r3, #23
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b1a:	f7fd ff0d 	bl	8001938 <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b2a:	f7fd ff05 	bl	8001938 <HAL_GetTick>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	0013      	movs	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	00da      	lsls	r2, r3, #3
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	0d1b      	lsrs	r3, r3, #20
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4c:	4353      	muls	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b50:	e068      	b.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	23c0      	movs	r3, #192	; 0xc0
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d10a      	bne.n	8003b72 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	2117      	movs	r1, #23
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	d055      	beq.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b78:	f7fd fede 	bl	8001938 <HAL_GetTick>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d902      	bls.n	8003b8e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d142      	bne.n	8003c14 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	21e0      	movs	r1, #224	; 0xe0
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	2382      	movs	r3, #130	; 0x82
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d113      	bne.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d005      	beq.n	8003bc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d107      	bne.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2140      	movs	r1, #64	; 0x40
 8003bce:	438a      	bics	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d110      	bne.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4916      	ldr	r1, [pc, #88]	; (8003c44 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003bea:	400a      	ands	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0189      	lsls	r1, r1, #6
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	225d      	movs	r2, #93	; 0x5d
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	225c      	movs	r2, #92	; 0x5c
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e010      	b.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d18e      	bne.n	8003b52 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b00a      	add	sp, #40	; 0x28
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20001c08 	.word	0x20001c08
 8003c44:	ffffdfff 	.word	0xffffdfff

08003c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	23c0      	movs	r3, #192	; 0xc0
 8003c58:	0159      	lsls	r1, r3, #5
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	0013      	movs	r3, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	f7ff ff4e 	bl	8003b04 <SPI_WaitFifoStateUntilTimeout>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d007      	beq.n	8003c7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	2220      	movs	r2, #32
 8003c72:	431a      	orrs	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e027      	b.n	8003ccc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	0013      	movs	r3, r2
 8003c86:	2200      	movs	r2, #0
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	f7ff fead 	bl	80039e8 <SPI_WaitFlagStateUntilTimeout>
 8003c8e:	1e03      	subs	r3, r0, #0
 8003c90:	d007      	beq.n	8003ca2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	2220      	movs	r2, #32
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e014      	b.n	8003ccc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	23c0      	movs	r3, #192	; 0xc0
 8003ca6:	00d9      	lsls	r1, r3, #3
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	0013      	movs	r3, r2
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f7ff ff27 	bl	8003b04 <SPI_WaitFifoStateUntilTimeout>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d007      	beq.n	8003cca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e000      	b.n	8003ccc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b004      	add	sp, #16
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e042      	b.n	8003d6c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223d      	movs	r2, #61	; 0x3d
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d107      	bne.n	8003d02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	223c      	movs	r2, #60	; 0x3c
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fd fc77 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	223d      	movs	r2, #61	; 0x3d
 8003d06:	2102      	movs	r1, #2
 8003d08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	0019      	movs	r1, r3
 8003d14:	0010      	movs	r0, r2
 8003d16:	f000 fad7 	bl	80042c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2246      	movs	r2, #70	; 0x46
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223e      	movs	r2, #62	; 0x3e
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	223f      	movs	r2, #63	; 0x3f
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2240      	movs	r2, #64	; 0x40
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2241      	movs	r2, #65	; 0x41
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2242      	movs	r2, #66	; 0x42
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2243      	movs	r2, #67	; 0x43
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2244      	movs	r2, #68	; 0x44
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2245      	movs	r2, #69	; 0x45
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	223d      	movs	r2, #61	; 0x3d
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e042      	b.n	8003e0c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	223d      	movs	r2, #61	; 0x3d
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	223c      	movs	r2, #60	; 0x3c
 8003d96:	2100      	movs	r1, #0
 8003d98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f000 f839 	bl	8003e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	223d      	movs	r2, #61	; 0x3d
 8003da6:	2102      	movs	r1, #2
 8003da8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	0019      	movs	r1, r3
 8003db4:	0010      	movs	r0, r2
 8003db6:	f000 fa87 	bl	80042c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2246      	movs	r2, #70	; 0x46
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	223e      	movs	r2, #62	; 0x3e
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2240      	movs	r2, #64	; 0x40
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2241      	movs	r2, #65	; 0x41
 8003dde:	2101      	movs	r1, #1
 8003de0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2242      	movs	r2, #66	; 0x42
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2243      	movs	r2, #67	; 0x43
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2244      	movs	r2, #68	; 0x44
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2245      	movs	r2, #69	; 0x45
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223d      	movs	r2, #61	; 0x3d
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d108      	bne.n	8003e46 <HAL_TIM_PWM_Start+0x22>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	223e      	movs	r2, #62	; 0x3e
 8003e38:	5c9b      	ldrb	r3, [r3, r2]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	1e5a      	subs	r2, r3, #1
 8003e40:	4193      	sbcs	r3, r2
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	e01f      	b.n	8003e86 <HAL_TIM_PWM_Start+0x62>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d108      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x3a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	223f      	movs	r2, #63	; 0x3f
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	4193      	sbcs	r3, r2
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e013      	b.n	8003e86 <HAL_TIM_PWM_Start+0x62>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d108      	bne.n	8003e76 <HAL_TIM_PWM_Start+0x52>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	5c9b      	ldrb	r3, [r3, r2]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	1e5a      	subs	r2, r3, #1
 8003e70:	4193      	sbcs	r3, r2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e007      	b.n	8003e86 <HAL_TIM_PWM_Start+0x62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2241      	movs	r2, #65	; 0x41
 8003e7a:	5c9b      	ldrb	r3, [r3, r2]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	1e5a      	subs	r2, r3, #1
 8003e82:	4193      	sbcs	r3, r2
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e074      	b.n	8003f78 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0x7a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223e      	movs	r2, #62	; 0x3e
 8003e98:	2102      	movs	r1, #2
 8003e9a:	5499      	strb	r1, [r3, r2]
 8003e9c:	e013      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xa2>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0x8a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	223f      	movs	r2, #63	; 0x3f
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	5499      	strb	r1, [r3, r2]
 8003eac:	e00b      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xa2>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0x9a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2240      	movs	r2, #64	; 0x40
 8003eb8:	2102      	movs	r1, #2
 8003eba:	5499      	strb	r1, [r3, r2]
 8003ebc:	e003      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xa2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2241      	movs	r2, #65	; 0x41
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 fd10 	bl	80048f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_TIM_PWM_Start+0x15c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_PWM_Start+0xd8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <HAL_TIM_PWM_Start+0x160>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_PWM_Start+0xd8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <HAL_TIM_PWM_Start+0x164>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_PWM_Start+0xd8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <HAL_TIM_PWM_Start+0x168>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_PWM_Start+0xdc>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_TIM_PWM_Start+0xde>
 8003f00:	2300      	movs	r3, #0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2180      	movs	r1, #128	; 0x80
 8003f12:	0209      	lsls	r1, r1, #8
 8003f14:	430a      	orrs	r2, r1
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_TIM_PWM_Start+0x15c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x11e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	05db      	lsls	r3, r3, #23
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x11e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_TIM_PWM_Start+0x16c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x11e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <HAL_TIM_PWM_Start+0x160>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d111      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2207      	movs	r2, #7
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d010      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	e007      	b.n	8003f76 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	0018      	movs	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b004      	add	sp, #16
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800
 8003f90:	40000400 	.word	0x40000400

08003f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa0:	2317      	movs	r3, #23
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	223c      	movs	r2, #60	; 0x3c
 8003fac:	5c9b      	ldrb	r3, [r3, r2]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e0ad      	b.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	223c      	movs	r2, #60	; 0x3c
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d100      	bne.n	8003fc6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003fc4:	e076      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	d900      	bls.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003fcc:	e095      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x166>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d04e      	beq.n	8004072 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d900      	bls.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x48>
 8003fda:	e08e      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x166>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x56>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d021      	beq.n	800402c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003fe8:	e087      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	0011      	movs	r1, r2
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 f9e8 	bl	80043c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2108      	movs	r1, #8
 8004004:	430a      	orrs	r2, r1
 8004006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2104      	movs	r1, #4
 8004014:	438a      	bics	r2, r1
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]
      break;
 800402a:	e06b      	b.n	8004104 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	0011      	movs	r1, r2
 8004034:	0018      	movs	r0, r3
 8004036:	f000 fa4f 	bl	80044d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	0109      	lsls	r1, r1, #4
 8004048:	430a      	orrs	r2, r1
 800404a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4931      	ldr	r1, [pc, #196]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004058:	400a      	ands	r2, r1
 800405a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	021a      	lsls	r2, r3, #8
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	619a      	str	r2, [r3, #24]
      break;
 8004070:	e048      	b.n	8004104 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f000 fab0 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2108      	movs	r1, #8
 800408c:	430a      	orrs	r2, r1
 800408e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2104      	movs	r1, #4
 800409c:	438a      	bics	r2, r1
 800409e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69d9      	ldr	r1, [r3, #28]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]
      break;
 80040b2:	e027      	b.n	8004104 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	0011      	movs	r1, r2
 80040bc:	0018      	movs	r0, r3
 80040be:	f000 fb15 	bl	80046ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2180      	movs	r1, #128	; 0x80
 80040ce:	0109      	lsls	r1, r1, #4
 80040d0:	430a      	orrs	r2, r1
 80040d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	490f      	ldr	r1, [pc, #60]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69d9      	ldr	r1, [r3, #28]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	021a      	lsls	r2, r3, #8
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
      break;
 80040f8:	e004      	b.n	8004104 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80040fa:	2317      	movs	r3, #23
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	223c      	movs	r2, #60	; 0x3c
 8004108:	2100      	movs	r1, #0
 800410a:	5499      	strb	r1, [r3, r2]

  return status;
 800410c:	2317      	movs	r3, #23
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	781b      	ldrb	r3, [r3, #0]
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b006      	add	sp, #24
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	fffffbff 	.word	0xfffffbff

08004120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	230f      	movs	r3, #15
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223c      	movs	r2, #60	; 0x3c
 8004136:	5c9b      	ldrb	r3, [r3, r2]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIM_ConfigClockSource+0x20>
 800413c:	2302      	movs	r3, #2
 800413e:	e0bc      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x19a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	223c      	movs	r2, #60	; 0x3c
 8004144:	2101      	movs	r1, #1
 8004146:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	223d      	movs	r2, #61	; 0x3d
 800414c:	2102      	movs	r1, #2
 800414e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2277      	movs	r2, #119	; 0x77
 800415c:	4393      	bics	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a58      	ldr	r2, [pc, #352]	; (80042c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	0192      	lsls	r2, r2, #6
 8004178:	4293      	cmp	r3, r2
 800417a:	d040      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0xde>
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	0192      	lsls	r2, r2, #6
 8004180:	4293      	cmp	r3, r2
 8004182:	d900      	bls.n	8004186 <HAL_TIM_ConfigClockSource+0x66>
 8004184:	e088      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	0152      	lsls	r2, r2, #5
 800418a:	4293      	cmp	r3, r2
 800418c:	d100      	bne.n	8004190 <HAL_TIM_ConfigClockSource+0x70>
 800418e:	e088      	b.n	80042a2 <HAL_TIM_ConfigClockSource+0x182>
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	0152      	lsls	r2, r2, #5
 8004194:	4293      	cmp	r3, r2
 8004196:	d900      	bls.n	800419a <HAL_TIM_ConfigClockSource+0x7a>
 8004198:	e07e      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 800419a:	2b70      	cmp	r3, #112	; 0x70
 800419c:	d018      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0xb0>
 800419e:	d900      	bls.n	80041a2 <HAL_TIM_ConfigClockSource+0x82>
 80041a0:	e07a      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041a2:	2b60      	cmp	r3, #96	; 0x60
 80041a4:	d04f      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x126>
 80041a6:	d900      	bls.n	80041aa <HAL_TIM_ConfigClockSource+0x8a>
 80041a8:	e076      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041aa:	2b50      	cmp	r3, #80	; 0x50
 80041ac:	d03b      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x106>
 80041ae:	d900      	bls.n	80041b2 <HAL_TIM_ConfigClockSource+0x92>
 80041b0:	e072      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d057      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x146>
 80041b6:	d900      	bls.n	80041ba <HAL_TIM_ConfigClockSource+0x9a>
 80041b8:	e06e      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041ba:	2b30      	cmp	r3, #48	; 0x30
 80041bc:	d063      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041be:	d86b      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d060      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041c4:	d868      	bhi.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d05d      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d05b      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x166>
 80041ce:	e063      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f000 fb68 	bl	80048b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2277      	movs	r2, #119	; 0x77
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]
      break;
 80041fc:	e052      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f000 fb51 	bl	80048b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	01c9      	lsls	r1, r1, #7
 8004220:	430a      	orrs	r2, r1
 8004222:	609a      	str	r2, [r3, #8]
      break;
 8004224:	e03e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	001a      	movs	r2, r3
 8004234:	f000 fac4 	bl	80047c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2150      	movs	r1, #80	; 0x50
 800423e:	0018      	movs	r0, r3
 8004240:	f000 fb1e 	bl	8004880 <TIM_ITRx_SetConfig>
      break;
 8004244:	e02e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	001a      	movs	r2, r3
 8004254:	f000 fae2 	bl	800481c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2160      	movs	r1, #96	; 0x60
 800425e:	0018      	movs	r0, r3
 8004260:	f000 fb0e 	bl	8004880 <TIM_ITRx_SetConfig>
      break;
 8004264:	e01e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	001a      	movs	r2, r3
 8004274:	f000 faa4 	bl	80047c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2140      	movs	r1, #64	; 0x40
 800427e:	0018      	movs	r0, r3
 8004280:	f000 fafe 	bl	8004880 <TIM_ITRx_SetConfig>
      break;
 8004284:	e00e      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0019      	movs	r1, r3
 8004290:	0010      	movs	r0, r2
 8004292:	f000 faf5 	bl	8004880 <TIM_ITRx_SetConfig>
      break;
 8004296:	e005      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004298:	230f      	movs	r3, #15
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
      break;
 80042a0:	e000      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80042a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223d      	movs	r2, #61	; 0x3d
 80042a8:	2101      	movs	r1, #1
 80042aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	; 0x3c
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

  return status;
 80042b4:	230f      	movs	r3, #15
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	ffff00ff 	.word	0xffff00ff

080042c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a34      	ldr	r2, [pc, #208]	; (80043ac <TIM_Base_SetConfig+0xe4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d008      	beq.n	80042f2 <TIM_Base_SetConfig+0x2a>
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d003      	beq.n	80042f2 <TIM_Base_SetConfig+0x2a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <TIM_Base_SetConfig+0xe8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d108      	bne.n	8004304 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2270      	movs	r2, #112	; 0x70
 80042f6:	4393      	bics	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a29      	ldr	r2, [pc, #164]	; (80043ac <TIM_Base_SetConfig+0xe4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <TIM_Base_SetConfig+0x76>
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	05db      	lsls	r3, r3, #23
 8004312:	429a      	cmp	r2, r3
 8004314:	d013      	beq.n	800433e <TIM_Base_SetConfig+0x76>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <TIM_Base_SetConfig+0xe8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00f      	beq.n	800433e <TIM_Base_SetConfig+0x76>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <TIM_Base_SetConfig+0xec>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_Base_SetConfig+0x76>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a23      	ldr	r2, [pc, #140]	; (80043b8 <TIM_Base_SetConfig+0xf0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_Base_SetConfig+0x76>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a22      	ldr	r2, [pc, #136]	; (80043bc <TIM_Base_SetConfig+0xf4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_Base_SetConfig+0x76>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <TIM_Base_SetConfig+0xf8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <TIM_Base_SetConfig+0xfc>)
 8004342:	4013      	ands	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	4393      	bics	r3, r2
 8004356:	001a      	movs	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <TIM_Base_SetConfig+0xe4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_Base_SetConfig+0xce>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a0d      	ldr	r2, [pc, #52]	; (80043b8 <TIM_Base_SetConfig+0xf0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_Base_SetConfig+0xce>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <TIM_Base_SetConfig+0xf4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_Base_SetConfig+0xce>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <TIM_Base_SetConfig+0xf8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d103      	bne.n	800439e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	615a      	str	r2, [r3, #20]
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b004      	add	sp, #16
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40002000 	.word	0x40002000
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40014400 	.word	0x40014400
 80043c0:	40014800 	.word	0x40014800
 80043c4:	fffffcff 	.word	0xfffffcff

080043c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	2201      	movs	r2, #1
 80043d8:	4393      	bics	r3, r2
 80043da:	001a      	movs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2270      	movs	r2, #112	; 0x70
 80043f6:	4393      	bics	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2203      	movs	r2, #3
 80043fe:	4393      	bics	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2202      	movs	r2, #2
 8004410:	4393      	bics	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <TIM_OC1_SetConfig+0xf8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_OC1_SetConfig+0x76>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <TIM_OC1_SetConfig+0xfc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_OC1_SetConfig+0x76>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <TIM_OC1_SetConfig+0x100>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_OC1_SetConfig+0x76>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a24      	ldr	r2, [pc, #144]	; (80044cc <TIM_OC1_SetConfig+0x104>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10c      	bne.n	8004458 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2208      	movs	r2, #8
 8004442:	4393      	bics	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2204      	movs	r2, #4
 8004454:	4393      	bics	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <TIM_OC1_SetConfig+0xf8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_OC1_SetConfig+0xb0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <TIM_OC1_SetConfig+0xfc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_OC1_SetConfig+0xb0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <TIM_OC1_SetConfig+0x100>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC1_SetConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <TIM_OC1_SetConfig+0x104>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d111      	bne.n	800449c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <TIM_OC1_SetConfig+0x108>)
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <TIM_OC1_SetConfig+0x10c>)
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b006      	add	sp, #24
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800
 80044d0:	fffffeff 	.word	0xfffffeff
 80044d4:	fffffdff 	.word	0xfffffdff

080044d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4393      	bics	r3, r2
 80044ea:	001a      	movs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a2e      	ldr	r2, [pc, #184]	; (80045c0 <TIM_OC2_SetConfig+0xe8>)
 8004506:	4013      	ands	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <TIM_OC2_SetConfig+0xec>)
 800450e:	4013      	ands	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2220      	movs	r2, #32
 8004522:	4393      	bics	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <TIM_OC2_SetConfig+0xf0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10d      	bne.n	8004556 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	4393      	bics	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2240      	movs	r2, #64	; 0x40
 8004552:	4393      	bics	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <TIM_OC2_SetConfig+0xf0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_OC2_SetConfig+0x9e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1a      	ldr	r2, [pc, #104]	; (80045cc <TIM_OC2_SetConfig+0xf4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_OC2_SetConfig+0x9e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <TIM_OC2_SetConfig+0xf8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_OC2_SetConfig+0x9e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <TIM_OC2_SetConfig+0xfc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d113      	bne.n	800459e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <TIM_OC2_SetConfig+0x100>)
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4a16      	ldr	r2, [pc, #88]	; (80045dc <TIM_OC2_SetConfig+0x104>)
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b006      	add	sp, #24
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	ffff8fff 	.word	0xffff8fff
 80045c4:	fffffcff 	.word	0xfffffcff
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800
 80045d8:	fffffbff 	.word	0xfffffbff
 80045dc:	fffff7ff 	.word	0xfffff7ff

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	4a35      	ldr	r2, [pc, #212]	; (80046c4 <TIM_OC3_SetConfig+0xe4>)
 80045f0:	401a      	ands	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2270      	movs	r2, #112	; 0x70
 800460c:	4393      	bics	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2203      	movs	r2, #3
 8004614:	4393      	bics	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4a28      	ldr	r2, [pc, #160]	; (80046c8 <TIM_OC3_SetConfig+0xe8>)
 8004626:	4013      	ands	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <TIM_OC3_SetConfig+0xec>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10d      	bne.n	800465a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <TIM_OC3_SetConfig+0xf0>)
 8004642:	4013      	ands	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <TIM_OC3_SetConfig+0xf4>)
 8004656:	4013      	ands	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <TIM_OC3_SetConfig+0xec>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00b      	beq.n	800467a <TIM_OC3_SetConfig+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <TIM_OC3_SetConfig+0xf8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <TIM_OC3_SetConfig+0x9a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <TIM_OC3_SetConfig+0xfc>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_OC3_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <TIM_OC3_SetConfig+0x100>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d113      	bne.n	80046a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <TIM_OC3_SetConfig+0x104>)
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <TIM_OC3_SetConfig+0x108>)
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b006      	add	sp, #24
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	fffffeff 	.word	0xfffffeff
 80046c8:	fffffdff 	.word	0xfffffdff
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	fffff7ff 	.word	0xfffff7ff
 80046d4:	fffffbff 	.word	0xfffffbff
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40014400 	.word	0x40014400
 80046e0:	40014800 	.word	0x40014800
 80046e4:	ffffefff 	.word	0xffffefff
 80046e8:	ffffdfff 	.word	0xffffdfff

080046ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4a28      	ldr	r2, [pc, #160]	; (800479c <TIM_OC4_SetConfig+0xb0>)
 80046fc:	401a      	ands	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <TIM_OC4_SetConfig+0xb4>)
 8004718:	4013      	ands	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <TIM_OC4_SetConfig+0xb8>)
 8004720:	4013      	ands	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_OC4_SetConfig+0xbc>)
 8004734:	4013      	ands	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	031b      	lsls	r3, r3, #12
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a19      	ldr	r2, [pc, #100]	; (80047ac <TIM_OC4_SetConfig+0xc0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_OC4_SetConfig+0x78>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <TIM_OC4_SetConfig+0xc4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_OC4_SetConfig+0x78>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC4_SetConfig+0xc8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC4_SetConfig+0x78>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC4_SetConfig+0xcc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d109      	bne.n	8004778 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4a15      	ldr	r2, [pc, #84]	; (80047bc <TIM_OC4_SetConfig+0xd0>)
 8004768:	4013      	ands	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	019b      	lsls	r3, r3, #6
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b006      	add	sp, #24
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	ffffefff 	.word	0xffffefff
 80047a0:	ffff8fff 	.word	0xffff8fff
 80047a4:	fffffcff 	.word	0xfffffcff
 80047a8:	ffffdfff 	.word	0xffffdfff
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	ffffbfff 	.word	0xffffbfff

080047c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	2201      	movs	r2, #1
 80047d8:	4393      	bics	r3, r2
 80047da:	001a      	movs	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	22f0      	movs	r2, #240	; 0xf0
 80047ea:	4393      	bics	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	220a      	movs	r2, #10
 80047fc:	4393      	bics	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	621a      	str	r2, [r3, #32]
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b006      	add	sp, #24
 800481a:	bd80      	pop	{r7, pc}

0800481c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	2210      	movs	r2, #16
 800482e:	4393      	bics	r3, r2
 8004830:	001a      	movs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4a0d      	ldr	r2, [pc, #52]	; (800487c <TIM_TI2_ConfigInputStage+0x60>)
 8004846:	4013      	ands	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	031b      	lsls	r3, r3, #12
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	22a0      	movs	r2, #160	; 0xa0
 8004858:	4393      	bics	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b006      	add	sp, #24
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	ffff0fff 	.word	0xffff0fff

08004880 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2270      	movs	r2, #112	; 0x70
 8004894:	4393      	bics	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	2207      	movs	r2, #7
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	609a      	str	r2, [r3, #8]
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b004      	add	sp, #16
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <TIM_ETR_SetConfig+0x3c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b006      	add	sp, #24
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	ffff00ff 	.word	0xffff00ff

080048f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	221f      	movs	r2, #31
 8004904:	4013      	ands	r3, r2
 8004906:	2201      	movs	r2, #1
 8004908:	409a      	lsls	r2, r3
 800490a:	0013      	movs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	43d2      	mvns	r2, r2
 8004916:	401a      	ands	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	211f      	movs	r1, #31
 8004924:	400b      	ands	r3, r1
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4099      	lsls	r1, r3
 800492a:	000b      	movs	r3, r1
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b006      	add	sp, #24
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	223c      	movs	r2, #60	; 0x3c
 800494a:	5c9b      	ldrb	r3, [r3, r2]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004950:	2302      	movs	r3, #2
 8004952:	e047      	b.n	80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	223c      	movs	r2, #60	; 0x3c
 8004958:	2101      	movs	r1, #1
 800495a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	223d      	movs	r2, #61	; 0x3d
 8004960:	2102      	movs	r1, #2
 8004962:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2270      	movs	r2, #112	; 0x70
 8004978:	4393      	bics	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00f      	beq.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	05db      	lsls	r3, r3, #23
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d009      	beq.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d10c      	bne.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2280      	movs	r2, #128	; 0x80
 80049bc:	4393      	bics	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	223d      	movs	r2, #61	; 0x3d
 80049d6:	2101      	movs	r1, #1
 80049d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	223c      	movs	r2, #60	; 0x3c
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	0018      	movs	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40014000 	.word	0x40014000

080049f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e044      	b.n	8004a94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2274      	movs	r2, #116	; 0x74
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fc fe89 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2224      	movs	r2, #36	; 0x24
 8004a26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2101      	movs	r1, #1
 8004a34:	438a      	bics	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 f830 	bl	8004aa0 <UART_SetConfig>
 8004a40:	0003      	movs	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e024      	b.n	8004a94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 fa0b 	bl	8004e70 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	490d      	ldr	r1, [pc, #52]	; (8004a9c <HAL_UART_Init+0xa4>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	212a      	movs	r1, #42	; 0x2a
 8004a76:	438a      	bics	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 faa3 	bl	8004fd8 <UART_CheckIdleState>
 8004a92:	0003      	movs	r3, r0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	ffffb7ff 	.word	0xffffb7ff

08004aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa8:	231e      	movs	r3, #30
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4abe      	ldr	r2, [pc, #760]	; (8004dc8 <UART_SetConfig+0x328>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4ab9      	ldr	r2, [pc, #740]	; (8004dcc <UART_SetConfig+0x32c>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	0019      	movs	r1, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4ab0      	ldr	r2, [pc, #704]	; (8004dd0 <UART_SetConfig+0x330>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4aac      	ldr	r2, [pc, #688]	; (8004dd4 <UART_SetConfig+0x334>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d127      	bne.n	8004b76 <UART_SetConfig+0xd6>
 8004b26:	4bac      	ldr	r3, [pc, #688]	; (8004dd8 <UART_SetConfig+0x338>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d00d      	beq.n	8004b4e <UART_SetConfig+0xae>
 8004b32:	d81b      	bhi.n	8004b6c <UART_SetConfig+0xcc>
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d014      	beq.n	8004b62 <UART_SetConfig+0xc2>
 8004b38:	d818      	bhi.n	8004b6c <UART_SetConfig+0xcc>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <UART_SetConfig+0xa4>
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d00a      	beq.n	8004b58 <UART_SetConfig+0xb8>
 8004b42:	e013      	b.n	8004b6c <UART_SetConfig+0xcc>
 8004b44:	231f      	movs	r3, #31
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e0bd      	b.n	8004cca <UART_SetConfig+0x22a>
 8004b4e:	231f      	movs	r3, #31
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	2202      	movs	r2, #2
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	e0b8      	b.n	8004cca <UART_SetConfig+0x22a>
 8004b58:	231f      	movs	r3, #31
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e0b3      	b.n	8004cca <UART_SetConfig+0x22a>
 8004b62:	231f      	movs	r3, #31
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2208      	movs	r2, #8
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e0ae      	b.n	8004cca <UART_SetConfig+0x22a>
 8004b6c:	231f      	movs	r3, #31
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2210      	movs	r2, #16
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e0a9      	b.n	8004cca <UART_SetConfig+0x22a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a98      	ldr	r2, [pc, #608]	; (8004ddc <UART_SetConfig+0x33c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d134      	bne.n	8004bea <UART_SetConfig+0x14a>
 8004b80:	4b95      	ldr	r3, [pc, #596]	; (8004dd8 <UART_SetConfig+0x338>)
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	23c0      	movs	r3, #192	; 0xc0
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	4013      	ands	r3, r2
 8004b8a:	22c0      	movs	r2, #192	; 0xc0
 8004b8c:	0292      	lsls	r2, r2, #10
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d017      	beq.n	8004bc2 <UART_SetConfig+0x122>
 8004b92:	22c0      	movs	r2, #192	; 0xc0
 8004b94:	0292      	lsls	r2, r2, #10
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d822      	bhi.n	8004be0 <UART_SetConfig+0x140>
 8004b9a:	2280      	movs	r2, #128	; 0x80
 8004b9c:	0292      	lsls	r2, r2, #10
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d019      	beq.n	8004bd6 <UART_SetConfig+0x136>
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	0292      	lsls	r2, r2, #10
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d81a      	bhi.n	8004be0 <UART_SetConfig+0x140>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <UART_SetConfig+0x118>
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	0252      	lsls	r2, r2, #9
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00a      	beq.n	8004bcc <UART_SetConfig+0x12c>
 8004bb6:	e013      	b.n	8004be0 <UART_SetConfig+0x140>
 8004bb8:	231f      	movs	r3, #31
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e083      	b.n	8004cca <UART_SetConfig+0x22a>
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e07e      	b.n	8004cca <UART_SetConfig+0x22a>
 8004bcc:	231f      	movs	r3, #31
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e079      	b.n	8004cca <UART_SetConfig+0x22a>
 8004bd6:	231f      	movs	r3, #31
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	2208      	movs	r2, #8
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e074      	b.n	8004cca <UART_SetConfig+0x22a>
 8004be0:	231f      	movs	r3, #31
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2210      	movs	r2, #16
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e06f      	b.n	8004cca <UART_SetConfig+0x22a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7c      	ldr	r2, [pc, #496]	; (8004de0 <UART_SetConfig+0x340>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d134      	bne.n	8004c5e <UART_SetConfig+0x1be>
 8004bf4:	4b78      	ldr	r3, [pc, #480]	; (8004dd8 <UART_SetConfig+0x338>)
 8004bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf8:	23c0      	movs	r3, #192	; 0xc0
 8004bfa:	031b      	lsls	r3, r3, #12
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	22c0      	movs	r2, #192	; 0xc0
 8004c00:	0312      	lsls	r2, r2, #12
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d017      	beq.n	8004c36 <UART_SetConfig+0x196>
 8004c06:	22c0      	movs	r2, #192	; 0xc0
 8004c08:	0312      	lsls	r2, r2, #12
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d822      	bhi.n	8004c54 <UART_SetConfig+0x1b4>
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	0312      	lsls	r2, r2, #12
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d019      	beq.n	8004c4a <UART_SetConfig+0x1aa>
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	0312      	lsls	r2, r2, #12
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d81a      	bhi.n	8004c54 <UART_SetConfig+0x1b4>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <UART_SetConfig+0x18c>
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	02d2      	lsls	r2, r2, #11
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00a      	beq.n	8004c40 <UART_SetConfig+0x1a0>
 8004c2a:	e013      	b.n	8004c54 <UART_SetConfig+0x1b4>
 8004c2c:	231f      	movs	r3, #31
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	e049      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c36:	231f      	movs	r3, #31
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e044      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c40:	231f      	movs	r3, #31
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	2204      	movs	r2, #4
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	e03f      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c4a:	231f      	movs	r3, #31
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2208      	movs	r2, #8
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e03a      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c54:	231f      	movs	r3, #31
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2210      	movs	r2, #16
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e035      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a60      	ldr	r2, [pc, #384]	; (8004de4 <UART_SetConfig+0x344>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d104      	bne.n	8004c72 <UART_SetConfig+0x1d2>
 8004c68:	231f      	movs	r3, #31
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e02b      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a5c      	ldr	r2, [pc, #368]	; (8004de8 <UART_SetConfig+0x348>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d104      	bne.n	8004c86 <UART_SetConfig+0x1e6>
 8004c7c:	231f      	movs	r3, #31
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e021      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a58      	ldr	r2, [pc, #352]	; (8004dec <UART_SetConfig+0x34c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d104      	bne.n	8004c9a <UART_SetConfig+0x1fa>
 8004c90:	231f      	movs	r3, #31
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e017      	b.n	8004cca <UART_SetConfig+0x22a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a54      	ldr	r2, [pc, #336]	; (8004df0 <UART_SetConfig+0x350>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d104      	bne.n	8004cae <UART_SetConfig+0x20e>
 8004ca4:	231f      	movs	r3, #31
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e00d      	b.n	8004cca <UART_SetConfig+0x22a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a50      	ldr	r2, [pc, #320]	; (8004df4 <UART_SetConfig+0x354>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d104      	bne.n	8004cc2 <UART_SetConfig+0x222>
 8004cb8:	231f      	movs	r3, #31
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e003      	b.n	8004cca <UART_SetConfig+0x22a>
 8004cc2:	231f      	movs	r3, #31
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d15d      	bne.n	8004d92 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8004cd6:	231f      	movs	r3, #31
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d015      	beq.n	8004d0c <UART_SetConfig+0x26c>
 8004ce0:	dc18      	bgt.n	8004d14 <UART_SetConfig+0x274>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d00d      	beq.n	8004d02 <UART_SetConfig+0x262>
 8004ce6:	dc15      	bgt.n	8004d14 <UART_SetConfig+0x274>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <UART_SetConfig+0x252>
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d005      	beq.n	8004cfc <UART_SetConfig+0x25c>
 8004cf0:	e010      	b.n	8004d14 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf2:	f7fe fb53 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	61bb      	str	r3, [r7, #24]
        break;
 8004cfa:	e012      	b.n	8004d22 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cfc:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <UART_SetConfig+0x358>)
 8004cfe:	61bb      	str	r3, [r7, #24]
        break;
 8004d00:	e00f      	b.n	8004d22 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d02:	f7fe fac1 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8004d06:	0003      	movs	r3, r0
 8004d08:	61bb      	str	r3, [r7, #24]
        break;
 8004d0a:	e00a      	b.n	8004d22 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	61bb      	str	r3, [r7, #24]
        break;
 8004d12:	e006      	b.n	8004d22 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d18:	231e      	movs	r3, #30
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
        break;
 8004d20:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d100      	bne.n	8004d2a <UART_SetConfig+0x28a>
 8004d28:	e095      	b.n	8004e56 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	005a      	lsls	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	18d2      	adds	r2, r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	0019      	movs	r1, r3
 8004d3c:	0010      	movs	r0, r2
 8004d3e:	f7fb f9e3 	bl	8000108 <__udivsi3>
 8004d42:	0003      	movs	r3, r0
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b0f      	cmp	r3, #15
 8004d4c:	d91c      	bls.n	8004d88 <UART_SetConfig+0x2e8>
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	025b      	lsls	r3, r3, #9
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d217      	bcs.n	8004d88 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	200e      	movs	r0, #14
 8004d5e:	183b      	adds	r3, r7, r0
 8004d60:	210f      	movs	r1, #15
 8004d62:	438a      	bics	r2, r1
 8004d64:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b299      	uxth	r1, r3
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	183a      	adds	r2, r7, r0
 8004d76:	8812      	ldrh	r2, [r2, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	183a      	adds	r2, r7, r0
 8004d82:	8812      	ldrh	r2, [r2, #0]
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e066      	b.n	8004e56 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004d88:	231e      	movs	r3, #30
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e061      	b.n	8004e56 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d92:	231f      	movs	r3, #31
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d02f      	beq.n	8004dfc <UART_SetConfig+0x35c>
 8004d9c:	dc32      	bgt.n	8004e04 <UART_SetConfig+0x364>
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d00d      	beq.n	8004dbe <UART_SetConfig+0x31e>
 8004da2:	dc2f      	bgt.n	8004e04 <UART_SetConfig+0x364>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <UART_SetConfig+0x30e>
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d005      	beq.n	8004db8 <UART_SetConfig+0x318>
 8004dac:	e02a      	b.n	8004e04 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dae:	f7fe faf5 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8004db2:	0003      	movs	r3, r0
 8004db4:	61bb      	str	r3, [r7, #24]
        break;
 8004db6:	e02c      	b.n	8004e12 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <UART_SetConfig+0x358>)
 8004dba:	61bb      	str	r3, [r7, #24]
        break;
 8004dbc:	e029      	b.n	8004e12 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fe fa63 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	61bb      	str	r3, [r7, #24]
        break;
 8004dc6:	e024      	b.n	8004e12 <UART_SetConfig+0x372>
 8004dc8:	efff69f3 	.word	0xefff69f3
 8004dcc:	ffffcfff 	.word	0xffffcfff
 8004dd0:	fffff4ff 	.word	0xfffff4ff
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40004400 	.word	0x40004400
 8004de0:	40004800 	.word	0x40004800
 8004de4:	40004c00 	.word	0x40004c00
 8004de8:	40005000 	.word	0x40005000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	40011800 	.word	0x40011800
 8004df4:	40011c00 	.word	0x40011c00
 8004df8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	61bb      	str	r3, [r7, #24]
        break;
 8004e02:	e006      	b.n	8004e12 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e08:	231e      	movs	r3, #30
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
        break;
 8004e10:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01e      	beq.n	8004e56 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	085a      	lsrs	r2, r3, #1
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	18d2      	adds	r2, r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	0019      	movs	r1, r3
 8004e28:	0010      	movs	r0, r2
 8004e2a:	f7fb f96d 	bl	8000108 <__udivsi3>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d909      	bls.n	8004e4e <UART_SetConfig+0x3ae>
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	025b      	lsls	r3, r3, #9
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d204      	bcs.n	8004e4e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	e003      	b.n	8004e56 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4e:	231e      	movs	r3, #30
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e62:	231e      	movs	r3, #30
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	781b      	ldrb	r3, [r3, #0]
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b008      	add	sp, #32
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <UART_AdvFeatureConfig+0x144>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a43      	ldr	r2, [pc, #268]	; (8004fb8 <UART_AdvFeatureConfig+0x148>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a3b      	ldr	r2, [pc, #236]	; (8004fbc <UART_AdvFeatureConfig+0x14c>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4a34      	ldr	r2, [pc, #208]	; (8004fc0 <UART_AdvFeatureConfig+0x150>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2210      	movs	r2, #16
 8004f06:	4013      	ands	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <UART_AdvFeatureConfig+0x154>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	2220      	movs	r2, #32
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <UART_AdvFeatureConfig+0x158>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	0019      	movs	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2240      	movs	r2, #64	; 0x40
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d01d      	beq.n	8004f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <UART_AdvFeatureConfig+0x15c>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	035b      	lsls	r3, r3, #13
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d10b      	bne.n	8004f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <UART_AdvFeatureConfig+0x160>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00b      	beq.n	8004fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <UART_AdvFeatureConfig+0x164>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	fffdffff 	.word	0xfffdffff
 8004fb8:	fffeffff 	.word	0xfffeffff
 8004fbc:	fffbffff 	.word	0xfffbffff
 8004fc0:	ffff7fff 	.word	0xffff7fff
 8004fc4:	ffffefff 	.word	0xffffefff
 8004fc8:	ffffdfff 	.word	0xffffdfff
 8004fcc:	ffefffff 	.word	0xffefffff
 8004fd0:	ff9fffff 	.word	0xff9fffff
 8004fd4:	fff7ffff 	.word	0xfff7ffff

08004fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fe8:	f7fc fca6 	bl	8001938 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d10c      	bne.n	8005018 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2280      	movs	r2, #128	; 0x80
 8005002:	0391      	lsls	r1, r2, #14
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4a17      	ldr	r2, [pc, #92]	; (8005064 <UART_CheckIdleState+0x8c>)
 8005008:	9200      	str	r2, [sp, #0]
 800500a:	2200      	movs	r2, #0
 800500c:	f000 f82c 	bl	8005068 <UART_WaitOnFlagUntilTimeout>
 8005010:	1e03      	subs	r3, r0, #0
 8005012:	d001      	beq.n	8005018 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e021      	b.n	800505c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2204      	movs	r2, #4
 8005020:	4013      	ands	r3, r2
 8005022:	2b04      	cmp	r3, #4
 8005024:	d10c      	bne.n	8005040 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2280      	movs	r2, #128	; 0x80
 800502a:	03d1      	lsls	r1, r2, #15
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <UART_CheckIdleState+0x8c>)
 8005030:	9200      	str	r2, [sp, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	f000 f818 	bl	8005068 <UART_WaitOnFlagUntilTimeout>
 8005038:	1e03      	subs	r3, r0, #0
 800503a:	d001      	beq.n	8005040 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e00d      	b.n	800505c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2274      	movs	r2, #116	; 0x74
 8005056:	2100      	movs	r1, #0
 8005058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	b004      	add	sp, #16
 8005062:	bd80      	pop	{r7, pc}
 8005064:	01ffffff 	.word	0x01ffffff

08005068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b094      	sub	sp, #80	; 0x50
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	1dfb      	adds	r3, r7, #7
 8005076:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005078:	e0a3      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800507c:	3301      	adds	r3, #1
 800507e:	d100      	bne.n	8005082 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005080:	e09f      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005082:	f7fc fc59 	bl	8001938 <HAL_GetTick>
 8005086:	0002      	movs	r2, r0
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800508e:	429a      	cmp	r2, r3
 8005090:	d302      	bcc.n	8005098 <UART_WaitOnFlagUntilTimeout+0x30>
 8005092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005094:	2b00      	cmp	r3, #0
 8005096:	d13d      	bne.n	8005114 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005098:	f3ef 8310 	mrs	r3, PRIMASK
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
 80050a2:	2301      	movs	r3, #1
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	f383 8810 	msr	PRIMASK, r3
}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	494c      	ldr	r1, [pc, #304]	; (80051ec <UART_WaitOnFlagUntilTimeout+0x184>)
 80050ba:	400a      	ands	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ca:	f3ef 8310 	mrs	r3, PRIMASK
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
 80050d4:	2301      	movs	r3, #1
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	f383 8810 	msr	PRIMASK, r3
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2101      	movs	r1, #1
 80050ec:	438a      	bics	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2274      	movs	r2, #116	; 0x74
 800510c:	2100      	movs	r1, #0
 800510e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e067      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2204      	movs	r2, #4
 800511c:	4013      	ands	r3, r2
 800511e:	d050      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69da      	ldr	r2, [r3, #28]
 8005126:	2380      	movs	r3, #128	; 0x80
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	401a      	ands	r2, r3
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	429a      	cmp	r2, r3
 8005132:	d146      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2280      	movs	r2, #128	; 0x80
 800513a:	0112      	lsls	r2, r2, #4
 800513c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513e:	f3ef 8310 	mrs	r3, PRIMASK
 8005142:	613b      	str	r3, [r7, #16]
  return(result);
 8005144:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f383 8810 	msr	PRIMASK, r3
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4923      	ldr	r1, [pc, #140]	; (80051ec <UART_WaitOnFlagUntilTimeout+0x184>)
 8005160:	400a      	ands	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005166:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005170:	f3ef 8310 	mrs	r3, PRIMASK
 8005174:	61fb      	str	r3, [r7, #28]
  return(result);
 8005176:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
 800517a:	2301      	movs	r3, #1
 800517c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	f383 8810 	msr	PRIMASK, r3
}
 8005184:	46c0      	nop			; (mov r8, r8)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2101      	movs	r1, #1
 8005192:	438a      	bics	r2, r1
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	f383 8810 	msr	PRIMASK, r3
}
 80051a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2280      	movs	r2, #128	; 0x80
 80051b2:	2120      	movs	r1, #32
 80051b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2274      	movs	r2, #116	; 0x74
 80051ba:	2100      	movs	r1, #0
 80051bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e010      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	425a      	negs	r2, r3
 80051d2:	4153      	adcs	r3, r2
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	001a      	movs	r2, r3
 80051d8:	1dfb      	adds	r3, r7, #7
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d100      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80051e0:	e74b      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b014      	add	sp, #80	; 0x50
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	fffffe5f 	.word	0xfffffe5f

080051f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f6:	f3ef 8305 	mrs	r3, IPSR
 80051fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80051fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005202:	f3ef 8310 	mrs	r3, PRIMASK
 8005206:	607b      	str	r3, [r7, #4]
  return(result);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <osKernelInitialize+0x2e>
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <osKernelInitialize+0x54>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d103      	bne.n	800521e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005216:	2306      	movs	r3, #6
 8005218:	425b      	negs	r3, r3
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e00c      	b.n	8005238 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <osKernelInitialize+0x54>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <osKernelInitialize+0x54>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e002      	b.n	8005238 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005232:	2301      	movs	r3, #1
 8005234:	425b      	negs	r3, r3
 8005236:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	0018      	movs	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	b004      	add	sp, #16
 8005240:	bd80      	pop	{r7, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	20001ebc 	.word	0x20001ebc

08005248 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800524e:	f3ef 8305 	mrs	r3, IPSR
 8005252:	60bb      	str	r3, [r7, #8]
  return(result);
 8005254:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525a:	f3ef 8310 	mrs	r3, PRIMASK
 800525e:	607b      	str	r3, [r7, #4]
  return(result);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <osKernelStart+0x2e>
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <osKernelStart+0x58>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d103      	bne.n	8005276 <osKernelStart+0x2e>
    stat = osErrorISR;
 800526e:	2306      	movs	r3, #6
 8005270:	425b      	negs	r3, r3
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e00e      	b.n	8005294 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <osKernelStart+0x58>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d107      	bne.n	800528e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <osKernelStart+0x58>)
 8005280:	2202      	movs	r2, #2
 8005282:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005284:	f000 ff94 	bl	80061b0 <vTaskStartScheduler>
      stat = osOK;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e002      	b.n	8005294 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800528e:	2301      	movs	r3, #1
 8005290:	425b      	negs	r3, r3
 8005292:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005294:	68fb      	ldr	r3, [r7, #12]
}
 8005296:	0018      	movs	r0, r3
 8005298:	46bd      	mov	sp, r7
 800529a:	b004      	add	sp, #16
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	20001ebc 	.word	0x20001ebc

080052a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052a4:	b5b0      	push	{r4, r5, r7, lr}
 80052a6:	b090      	sub	sp, #64	; 0x40
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052b4:	f3ef 8305 	mrs	r3, IPSR
 80052b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052ba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d000      	beq.n	80052c2 <osThreadNew+0x1e>
 80052c0:	e090      	b.n	80053e4 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c2:	f3ef 8310 	mrs	r3, PRIMASK
 80052c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <osThreadNew+0x34>
 80052ce:	4b48      	ldr	r3, [pc, #288]	; (80053f0 <osThreadNew+0x14c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d100      	bne.n	80052d8 <osThreadNew+0x34>
 80052d6:	e085      	b.n	80053e4 <osThreadNew+0x140>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d100      	bne.n	80052e0 <osThreadNew+0x3c>
 80052de:	e081      	b.n	80053e4 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80052e4:	2318      	movs	r3, #24
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80052e8:	2117      	movs	r1, #23
 80052ea:	187b      	adds	r3, r7, r1
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80052f0:	187b      	adds	r3, r7, r1
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80052f4:	2301      	movs	r3, #1
 80052f6:	425b      	negs	r3, r3
 80052f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d044      	beq.n	800538a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <osThreadNew+0x6a>
        name = attr->name;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <osThreadNew+0x8e>
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	2b38      	cmp	r3, #56	; 0x38
 8005326:	d804      	bhi.n	8005332 <osThreadNew+0x8e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	d001      	beq.n	8005336 <osThreadNew+0x92>
        return (NULL);
 8005332:	2300      	movs	r3, #0
 8005334:	e057      	b.n	80053e6 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	089b      	lsrs	r3, r3, #2
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00e      	beq.n	800536c <osThreadNew+0xc8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2bbb      	cmp	r3, #187	; 0xbb
 8005354:	d90a      	bls.n	800536c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <osThreadNew+0xc8>
        mem = 1;
 8005366:	2301      	movs	r3, #1
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	e010      	b.n	800538e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10c      	bne.n	800538e <osThreadNew+0xea>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d108      	bne.n	800538e <osThreadNew+0xea>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <osThreadNew+0xea>
          mem = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	e001      	b.n	800538e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d112      	bne.n	80053ba <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800539c:	68bd      	ldr	r5, [r7, #8]
 800539e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80053a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	9302      	str	r3, [sp, #8]
 80053a6:	9201      	str	r2, [sp, #4]
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	002b      	movs	r3, r5
 80053ae:	0022      	movs	r2, r4
 80053b0:	f000 fd49 	bl	8005e46 <xTaskCreateStatic>
 80053b4:	0003      	movs	r3, r0
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e014      	b.n	80053e4 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d111      	bne.n	80053e4 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68bc      	ldr	r4, [r7, #8]
 80053c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	2310      	movs	r3, #16
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	0023      	movs	r3, r4
 80053d6:	f000 fd79 	bl	8005ecc <xTaskCreate>
 80053da:	0003      	movs	r3, r0
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d001      	beq.n	80053e4 <osThreadNew+0x140>
          hTask = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053e4:	693b      	ldr	r3, [r7, #16]
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b00c      	add	sp, #48	; 0x30
 80053ec:	bdb0      	pop	{r4, r5, r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	20001ebc 	.word	0x20001ebc

080053f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053fc:	f3ef 8305 	mrs	r3, IPSR
 8005400:	613b      	str	r3, [r7, #16]
  return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005408:	f3ef 8310 	mrs	r3, PRIMASK
 800540c:	60fb      	str	r3, [r7, #12]
  return(result);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <osDelay+0x30>
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <osDelay+0x4c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d103      	bne.n	8005424 <osDelay+0x30>
    stat = osErrorISR;
 800541c:	2306      	movs	r3, #6
 800541e:	425b      	negs	r3, r3
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e008      	b.n	8005436 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <osDelay+0x42>
      vTaskDelay(ticks);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0018      	movs	r0, r3
 8005432:	f000 fe97 	bl	8006164 <vTaskDelay>
    }
  }

  return (stat);
 8005436:	697b      	ldr	r3, [r7, #20]
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	b006      	add	sp, #24
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20001ebc 	.word	0x20001ebc

08005444 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a06      	ldr	r2, [pc, #24]	; (800546c <vApplicationGetIdleTaskMemory+0x28>)
 8005454:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a05      	ldr	r2, [pc, #20]	; (8005470 <vApplicationGetIdleTaskMemory+0x2c>)
 800545a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2280      	movs	r2, #128	; 0x80
 8005460:	601a      	str	r2, [r3, #0]
}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	20001ec0 	.word	0x20001ec0
 8005470:	20001f7c 	.word	0x20001f7c

08005474 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a06      	ldr	r2, [pc, #24]	; (800549c <vApplicationGetTimerTaskMemory+0x28>)
 8005484:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800548a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	0052      	lsls	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
}
 8005494:	46c0      	nop			; (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	b004      	add	sp, #16
 800549a:	bd80      	pop	{r7, pc}
 800549c:	2000217c 	.word	0x2000217c
 80054a0:	20002238 	.word	0x20002238

080054a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3308      	adds	r3, #8
 80054b0:	001a      	movs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	4252      	negs	r2, r2
 80054bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3308      	adds	r3, #8
 80054c2:	001a      	movs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3308      	adds	r3, #8
 80054cc:	001a      	movs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b002      	add	sp, #8
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b004      	add	sp, #16
 8005538:	bd80      	pop	{r7, pc}

0800553a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3301      	adds	r3, #1
 800554e:	d103      	bne.n	8005558 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e00c      	b.n	8005572 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3308      	adds	r3, #8
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e002      	b.n	8005566 <vListInsert+0x2c>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d2f6      	bcs.n	8005560 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	601a      	str	r2, [r3, #0]
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b004      	add	sp, #16
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6852      	ldr	r2, [r2, #4]
 80055c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d103      	bne.n	80055da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	1e5a      	subs	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
}
 80055ee:	0018      	movs	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b004      	add	sp, #16
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <xQueueGenericReset+0x18>
 800560a:	b672      	cpsid	i
 800560c:	e7fe      	b.n	800560c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800560e:	f001 fdf7 	bl	8007200 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	434b      	muls	r3, r1
 8005620:	18d2      	adds	r2, r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	1e59      	subs	r1, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	434b      	muls	r3, r1
 8005644:	18d2      	adds	r2, r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2244      	movs	r2, #68	; 0x44
 800564e:	21ff      	movs	r1, #255	; 0xff
 8005650:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2245      	movs	r2, #69	; 0x45
 8005656:	21ff      	movs	r1, #255	; 0xff
 8005658:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3310      	adds	r3, #16
 800566c:	0018      	movs	r0, r3
 800566e:	f000 fff5 	bl	800665c <xTaskRemoveFromEventList>
 8005672:	1e03      	subs	r3, r0, #0
 8005674:	d00c      	beq.n	8005690 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005676:	f001 fdb3 	bl	80071e0 <vPortYield>
 800567a:	e009      	b.n	8005690 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3310      	adds	r3, #16
 8005680:	0018      	movs	r0, r3
 8005682:	f7ff ff0f 	bl	80054a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3324      	adds	r3, #36	; 0x24
 800568a:	0018      	movs	r0, r3
 800568c:	f7ff ff0a 	bl	80054a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005690:	f001 fdc8 	bl	8007224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005694:	2301      	movs	r3, #1
}
 8005696:	0018      	movs	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	b004      	add	sp, #16
 800569c:	bd80      	pop	{r7, pc}

0800569e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800569e:	b590      	push	{r4, r7, lr}
 80056a0:	b089      	sub	sp, #36	; 0x24
 80056a2:	af02      	add	r7, sp, #8
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericCreateStatic+0x18>
 80056b2:	b672      	cpsid	i
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericCreateStatic+0x22>
 80056bc:	b672      	cpsid	i
 80056be:	e7fe      	b.n	80056be <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <xQueueGenericCreateStatic+0x2e>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <xQueueGenericCreateStatic+0x32>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <xQueueGenericCreateStatic+0x34>
 80056d0:	2300      	movs	r3, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <xQueueGenericCreateStatic+0x3c>
 80056d6:	b672      	cpsid	i
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <xQueueGenericCreateStatic+0x48>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xQueueGenericCreateStatic+0x4c>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xQueueGenericCreateStatic+0x4e>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <xQueueGenericCreateStatic+0x56>
 80056f0:	b672      	cpsid	i
 80056f2:	e7fe      	b.n	80056f2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056f4:	2350      	movs	r3, #80	; 0x50
 80056f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b50      	cmp	r3, #80	; 0x50
 80056fc:	d001      	beq.n	8005702 <xQueueGenericCreateStatic+0x64>
 80056fe:	b672      	cpsid	i
 8005700:	e7fe      	b.n	8005700 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2246      	movs	r2, #70	; 0x46
 8005710:	2101      	movs	r1, #1
 8005712:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005714:	2328      	movs	r3, #40	; 0x28
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	781c      	ldrb	r4, [r3, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	0023      	movs	r3, r4
 8005726:	f000 f805 	bl	8005734 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800572a:	697b      	ldr	r3, [r7, #20]
	}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b007      	add	sp, #28
 8005732:	bd90      	pop	{r4, r7, pc}

08005734 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	001a      	movs	r2, r3
 8005742:	1cfb      	adds	r3, r7, #3
 8005744:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e002      	b.n	800575a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2101      	movs	r1, #1
 800576a:	0018      	movs	r0, r3
 800576c:	f7ff ff43 	bl	80055f6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	1cfa      	adds	r2, r7, #3
 8005774:	214c      	movs	r1, #76	; 0x4c
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	b004      	add	sp, #16
 8005780:	bd80      	pop	{r7, pc}

08005782 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b08a      	sub	sp, #40	; 0x28
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <xQueueGenericSend+0x20>
 800579e:	b672      	cpsid	i
 80057a0:	e7fe      	b.n	80057a0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <xQueueGenericSend+0x2e>
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <xQueueGenericSend+0x32>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <xQueueGenericSend+0x34>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <xQueueGenericSend+0x3c>
 80057ba:	b672      	cpsid	i
 80057bc:	e7fe      	b.n	80057bc <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d103      	bne.n	80057cc <xQueueGenericSend+0x4a>
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <xQueueGenericSend+0x4e>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <xQueueGenericSend+0x50>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <xQueueGenericSend+0x58>
 80057d6:	b672      	cpsid	i
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057da:	f001 f8dd 	bl	8006998 <xTaskGetSchedulerState>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d102      	bne.n	80057e8 <xQueueGenericSend+0x66>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <xQueueGenericSend+0x6a>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <xQueueGenericSend+0x6c>
 80057ec:	2300      	movs	r3, #0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <xQueueGenericSend+0x74>
 80057f2:	b672      	cpsid	i
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057f6:	f001 fd03 	bl	8007200 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xQueueGenericSend+0x8a>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d11e      	bne.n	800584a <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	0018      	movs	r0, r3
 8005814:	f000 f99f 	bl	8005b56 <prvCopyDataToQueue>
 8005818:	0003      	movs	r3, r0
 800581a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	3324      	adds	r3, #36	; 0x24
 8005828:	0018      	movs	r0, r3
 800582a:	f000 ff17 	bl	800665c <xTaskRemoveFromEventList>
 800582e:	1e03      	subs	r3, r0, #0
 8005830:	d007      	beq.n	8005842 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005832:	f001 fcd5 	bl	80071e0 <vPortYield>
 8005836:	e004      	b.n	8005842 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800583e:	f001 fccf 	bl	80071e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005842:	f001 fcef 	bl	8007224 <vPortExitCritical>
				return pdPASS;
 8005846:	2301      	movs	r3, #1
 8005848:	e05b      	b.n	8005902 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005850:	f001 fce8 	bl	8007224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005854:	2300      	movs	r3, #0
 8005856:	e054      	b.n	8005902 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800585e:	2314      	movs	r3, #20
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	0018      	movs	r0, r3
 8005864:	f000 ff56 	bl	8006714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800586c:	f001 fcda 	bl	8007224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005870:	f000 fcfc 	bl	800626c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005874:	f001 fcc4 	bl	8007200 <vPortEnterCritical>
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	2244      	movs	r2, #68	; 0x44
 800587c:	5c9b      	ldrb	r3, [r3, r2]
 800587e:	b25b      	sxtb	r3, r3
 8005880:	3301      	adds	r3, #1
 8005882:	d103      	bne.n	800588c <xQueueGenericSend+0x10a>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	2244      	movs	r2, #68	; 0x44
 8005888:	2100      	movs	r1, #0
 800588a:	5499      	strb	r1, [r3, r2]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2245      	movs	r2, #69	; 0x45
 8005890:	5c9b      	ldrb	r3, [r3, r2]
 8005892:	b25b      	sxtb	r3, r3
 8005894:	3301      	adds	r3, #1
 8005896:	d103      	bne.n	80058a0 <xQueueGenericSend+0x11e>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2245      	movs	r2, #69	; 0x45
 800589c:	2100      	movs	r1, #0
 800589e:	5499      	strb	r1, [r3, r2]
 80058a0:	f001 fcc0 	bl	8007224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058a4:	1d3a      	adds	r2, r7, #4
 80058a6:	2314      	movs	r3, #20
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 ff45 	bl	800673c <xTaskCheckForTimeOut>
 80058b2:	1e03      	subs	r3, r0, #0
 80058b4:	d11e      	bne.n	80058f4 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	0018      	movs	r0, r3
 80058ba:	f000 fa51 	bl	8005d60 <prvIsQueueFull>
 80058be:	1e03      	subs	r3, r0, #0
 80058c0:	d011      	beq.n	80058e6 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	3310      	adds	r3, #16
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	0011      	movs	r1, r2
 80058ca:	0018      	movs	r0, r3
 80058cc:	f000 fe82 	bl	80065d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 f9d0 	bl	8005c78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058d8:	f000 fcd4 	bl	8006284 <xTaskResumeAll>
 80058dc:	1e03      	subs	r3, r0, #0
 80058de:	d18a      	bne.n	80057f6 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80058e0:	f001 fc7e 	bl	80071e0 <vPortYield>
 80058e4:	e787      	b.n	80057f6 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f000 f9c5 	bl	8005c78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ee:	f000 fcc9 	bl	8006284 <xTaskResumeAll>
 80058f2:	e780      	b.n	80057f6 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	0018      	movs	r0, r3
 80058f8:	f000 f9be 	bl	8005c78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058fc:	f000 fcc2 	bl	8006284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005900:	2300      	movs	r3, #0
		}
	}
}
 8005902:	0018      	movs	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	b00a      	add	sp, #40	; 0x28
 8005908:	bd80      	pop	{r7, pc}

0800590a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800590a:	b590      	push	{r4, r7, lr}
 800590c:	b089      	sub	sp, #36	; 0x24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <xQueueGenericSendFromISR+0x1c>
 8005922:	b672      	cpsid	i
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <xQueueGenericSendFromISR+0x2a>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <xQueueGenericSendFromISR+0x2e>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <xQueueGenericSendFromISR+0x30>
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <xQueueGenericSendFromISR+0x38>
 800593e:	b672      	cpsid	i
 8005940:	e7fe      	b.n	8005940 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d103      	bne.n	8005950 <xQueueGenericSendFromISR+0x46>
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <xQueueGenericSendFromISR+0x4a>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueGenericSendFromISR+0x4c>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <xQueueGenericSendFromISR+0x54>
 800595a:	b672      	cpsid	i
 800595c:	e7fe      	b.n	800595c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800595e:	f001 fc79 	bl	8007254 <ulSetInterruptMaskFromISR>
 8005962:	0003      	movs	r3, r0
 8005964:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <xQueueGenericSendFromISR+0x6e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d12e      	bne.n	80059d6 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005978:	2413      	movs	r4, #19
 800597a:	193b      	adds	r3, r7, r4
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	2145      	movs	r1, #69	; 0x45
 8005980:	5c52      	ldrb	r2, [r2, r1]
 8005982:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	0018      	movs	r0, r3
 800598c:	f000 f8e3 	bl	8005b56 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005990:	193b      	adds	r3, r7, r4
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b25b      	sxtb	r3, r3
 8005996:	3301      	adds	r3, #1
 8005998:	d111      	bne.n	80059be <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	3324      	adds	r3, #36	; 0x24
 80059a6:	0018      	movs	r0, r3
 80059a8:	f000 fe58 	bl	800665c <xTaskRemoveFromEventList>
 80059ac:	1e03      	subs	r3, r0, #0
 80059ae:	d00f      	beq.n	80059d0 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e008      	b.n	80059d0 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059be:	2313      	movs	r3, #19
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	b259      	sxtb	r1, r3
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2245      	movs	r2, #69	; 0x45
 80059ce:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80059d0:	2301      	movs	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
		{
 80059d4:	e001      	b.n	80059da <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	0018      	movs	r0, r3
 80059de:	f001 fc3f 	bl	8007260 <vClearInterruptMaskFromISR>

	return xReturn;
 80059e2:	69fb      	ldr	r3, [r7, #28]
}
 80059e4:	0018      	movs	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b009      	add	sp, #36	; 0x24
 80059ea:	bd90      	pop	{r4, r7, pc}

080059ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <xQueueReceive+0x1e>
 8005a06:	b672      	cpsid	i
 8005a08:	e7fe      	b.n	8005a08 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <xQueueReceive+0x2c>
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <xQueueReceive+0x30>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <xQueueReceive+0x32>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x3a>
 8005a22:	b672      	cpsid	i
 8005a24:	e7fe      	b.n	8005a24 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a26:	f000 ffb7 	bl	8006998 <xTaskGetSchedulerState>
 8005a2a:	1e03      	subs	r3, r0, #0
 8005a2c:	d102      	bne.n	8005a34 <xQueueReceive+0x48>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <xQueueReceive+0x4c>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <xQueueReceive+0x4e>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <xQueueReceive+0x56>
 8005a3e:	b672      	cpsid	i
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a42:	f001 fbdd 	bl	8007200 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01a      	beq.n	8005a88 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	0011      	movs	r1, r2
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f000 f8e7 	bl	8005c2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	1e5a      	subs	r2, r3, #1
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	3310      	adds	r3, #16
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 fdf2 	bl	800665c <xTaskRemoveFromEventList>
 8005a78:	1e03      	subs	r3, r0, #0
 8005a7a:	d001      	beq.n	8005a80 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a7c:	f001 fbb0 	bl	80071e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a80:	f001 fbd0 	bl	8007224 <vPortExitCritical>
				return pdPASS;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e062      	b.n	8005b4e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a8e:	f001 fbc9 	bl	8007224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e05b      	b.n	8005b4e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a9c:	2314      	movs	r3, #20
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f000 fe37 	bl	8006714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aaa:	f001 fbbb 	bl	8007224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aae:	f000 fbdd 	bl	800626c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ab2:	f001 fba5 	bl	8007200 <vPortEnterCritical>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	2244      	movs	r2, #68	; 0x44
 8005aba:	5c9b      	ldrb	r3, [r3, r2]
 8005abc:	b25b      	sxtb	r3, r3
 8005abe:	3301      	adds	r3, #1
 8005ac0:	d103      	bne.n	8005aca <xQueueReceive+0xde>
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2244      	movs	r2, #68	; 0x44
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	5499      	strb	r1, [r3, r2]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	2245      	movs	r2, #69	; 0x45
 8005ace:	5c9b      	ldrb	r3, [r3, r2]
 8005ad0:	b25b      	sxtb	r3, r3
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	d103      	bne.n	8005ade <xQueueReceive+0xf2>
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	2245      	movs	r2, #69	; 0x45
 8005ada:	2100      	movs	r1, #0
 8005adc:	5499      	strb	r1, [r3, r2]
 8005ade:	f001 fba1 	bl	8007224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ae2:	1d3a      	adds	r2, r7, #4
 8005ae4:	2314      	movs	r3, #20
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	0011      	movs	r1, r2
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 fe26 	bl	800673c <xTaskCheckForTimeOut>
 8005af0:	1e03      	subs	r3, r0, #0
 8005af2:	d11e      	bne.n	8005b32 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 f91c 	bl	8005d34 <prvIsQueueEmpty>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d011      	beq.n	8005b24 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	0011      	movs	r1, r2
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 fd63 	bl	80065d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f8b1 	bl	8005c78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b16:	f000 fbb5 	bl	8006284 <xTaskResumeAll>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d191      	bne.n	8005a42 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005b1e:	f001 fb5f 	bl	80071e0 <vPortYield>
 8005b22:	e78e      	b.n	8005a42 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f000 f8a6 	bl	8005c78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b2c:	f000 fbaa 	bl	8006284 <xTaskResumeAll>
 8005b30:	e787      	b.n	8005a42 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f000 f89f 	bl	8005c78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b3a:	f000 fba3 	bl	8006284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 f8f7 	bl	8005d34 <prvIsQueueEmpty>
 8005b46:	1e03      	subs	r3, r0, #0
 8005b48:	d100      	bne.n	8005b4c <xQueueReceive+0x160>
 8005b4a:	e77a      	b.n	8005a42 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b00a      	add	sp, #40	; 0x28
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10e      	bne.n	8005b92 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d14e      	bne.n	8005c1a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 ff25 	bl	80069d0 <xTaskPriorityDisinherit>
 8005b86:	0003      	movs	r3, r0
 8005b88:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	e043      	b.n	8005c1a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d119      	bne.n	8005bcc <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6898      	ldr	r0, [r3, #8]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	f001 fd90 	bl	80076c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	18d2      	adds	r2, r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d32b      	bcc.n	8005c1a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	609a      	str	r2, [r3, #8]
 8005bca:	e026      	b.n	8005c1a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	68d8      	ldr	r0, [r3, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	f001 fd76 	bl	80076c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	425b      	negs	r3, r3
 8005be6:	18d2      	adds	r2, r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d207      	bcs.n	8005c08 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	425b      	negs	r3, r3
 8005c02:	18d2      	adds	r2, r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d105      	bne.n	8005c1a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c22:	697b      	ldr	r3, [r7, #20]
}
 8005c24:	0018      	movs	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b006      	add	sp, #24
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d018      	beq.n	8005c70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	18d2      	adds	r2, r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d303      	bcc.n	8005c60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68d9      	ldr	r1, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f001 fd2c 	bl	80076c8 <memcpy>
	}
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b002      	add	sp, #8
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c80:	f001 fabe 	bl	8007200 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c84:	230f      	movs	r3, #15
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	2145      	movs	r1, #69	; 0x45
 8005c8c:	5c52      	ldrb	r2, [r2, r1]
 8005c8e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c90:	e013      	b.n	8005cba <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d016      	beq.n	8005cc8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3324      	adds	r3, #36	; 0x24
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 fcdc 	bl	800665c <xTaskRemoveFromEventList>
 8005ca4:	1e03      	subs	r3, r0, #0
 8005ca6:	d001      	beq.n	8005cac <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ca8:	f000 fd98 	bl	80067dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cac:	210f      	movs	r1, #15
 8005cae:	187b      	adds	r3, r7, r1
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	187b      	adds	r3, r7, r1
 8005cb8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cba:	230f      	movs	r3, #15
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b25b      	sxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dce5      	bgt.n	8005c92 <prvUnlockQueue+0x1a>
 8005cc6:	e000      	b.n	8005cca <prvUnlockQueue+0x52>
					break;
 8005cc8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2245      	movs	r2, #69	; 0x45
 8005cce:	21ff      	movs	r1, #255	; 0xff
 8005cd0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005cd2:	f001 faa7 	bl	8007224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cd6:	f001 fa93 	bl	8007200 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cda:	230e      	movs	r3, #14
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	2144      	movs	r1, #68	; 0x44
 8005ce2:	5c52      	ldrb	r2, [r2, r1]
 8005ce4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ce6:	e013      	b.n	8005d10 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d016      	beq.n	8005d1e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3310      	adds	r3, #16
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 fcb1 	bl	800665c <xTaskRemoveFromEventList>
 8005cfa:	1e03      	subs	r3, r0, #0
 8005cfc:	d001      	beq.n	8005d02 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005cfe:	f000 fd6d 	bl	80067dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d02:	210e      	movs	r1, #14
 8005d04:	187b      	adds	r3, r7, r1
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d10:	230e      	movs	r3, #14
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dce5      	bgt.n	8005ce8 <prvUnlockQueue+0x70>
 8005d1c:	e000      	b.n	8005d20 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005d1e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2244      	movs	r2, #68	; 0x44
 8005d24:	21ff      	movs	r1, #255	; 0xff
 8005d26:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 fa7c 	bl	8007224 <vPortExitCritical>
}
 8005d2c:	46c0      	nop			; (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b004      	add	sp, #16
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d3c:	f001 fa60 	bl	8007200 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e001      	b.n	8005d52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d52:	f001 fa67 	bl	8007224 <vPortExitCritical>

	return xReturn;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	0018      	movs	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b004      	add	sp, #16
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d68:	f001 fa4a 	bl	8007200 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d102      	bne.n	8005d7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e001      	b.n	8005d82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 fa4f 	bl	8007224 <vPortExitCritical>

	return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b004      	add	sp, #16
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e015      	b.n	8005dcc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da0:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <vQueueAddToRegistry+0x4c>)
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	00d2      	lsls	r2, r2, #3
 8005da6:	58d3      	ldr	r3, [r2, r3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <vQueueAddToRegistry+0x4c>)
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	00d2      	lsls	r2, r2, #3
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <vQueueAddToRegistry+0x4c>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dc4:	e006      	b.n	8005dd4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b07      	cmp	r3, #7
 8005dd0:	d9e6      	bls.n	8005da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20002638 	.word	0x20002638

08005de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005df0:	f001 fa06 	bl	8007200 <vPortEnterCritical>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2244      	movs	r2, #68	; 0x44
 8005df8:	5c9b      	ldrb	r3, [r3, r2]
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	d103      	bne.n	8005e08 <vQueueWaitForMessageRestricted+0x28>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2244      	movs	r2, #68	; 0x44
 8005e04:	2100      	movs	r1, #0
 8005e06:	5499      	strb	r1, [r3, r2]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2245      	movs	r2, #69	; 0x45
 8005e0c:	5c9b      	ldrb	r3, [r3, r2]
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	3301      	adds	r3, #1
 8005e12:	d103      	bne.n	8005e1c <vQueueWaitForMessageRestricted+0x3c>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2245      	movs	r2, #69	; 0x45
 8005e18:	2100      	movs	r1, #0
 8005e1a:	5499      	strb	r1, [r3, r2]
 8005e1c:	f001 fa02 	bl	8007224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d106      	bne.n	8005e36 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 fbed 	bl	8006610 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7ff ff1d 	bl	8005c78 <prvUnlockQueue>
	}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b006      	add	sp, #24
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e46:	b590      	push	{r4, r7, lr}
 8005e48:	b08d      	sub	sp, #52	; 0x34
 8005e4a:	af04      	add	r7, sp, #16
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <xTaskCreateStatic+0x18>
 8005e5a:	b672      	cpsid	i
 8005e5c:	e7fe      	b.n	8005e5c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <xTaskCreateStatic+0x22>
 8005e64:	b672      	cpsid	i
 8005e66:	e7fe      	b.n	8005e66 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e68:	23bc      	movs	r3, #188	; 0xbc
 8005e6a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2bbc      	cmp	r3, #188	; 0xbc
 8005e70:	d001      	beq.n	8005e76 <xTaskCreateStatic+0x30>
 8005e72:	b672      	cpsid	i
 8005e74:	e7fe      	b.n	8005e74 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d020      	beq.n	8005ebe <xTaskCreateStatic+0x78>
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01d      	beq.n	8005ebe <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	22b9      	movs	r2, #185	; 0xb9
 8005e90:	2102      	movs	r1, #2
 8005e92:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e94:	683c      	ldr	r4, [r7, #0]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9303      	str	r3, [sp, #12]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	9302      	str	r3, [sp, #8]
 8005ea4:	2318      	movs	r3, #24
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	f000 f858 	bl	8005f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f000 f8ec 	bl	8006094 <prvAddNewTaskToReadyList>
 8005ebc:	e001      	b.n	8005ec2 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b009      	add	sp, #36	; 0x24
 8005eca:	bd90      	pop	{r4, r7, pc}

08005ecc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b08d      	sub	sp, #52	; 0x34
 8005ed0:	af04      	add	r7, sp, #16
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	1dbb      	adds	r3, r7, #6
 8005eda:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005edc:	1dbb      	adds	r3, r7, #6
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f001 fa24 	bl	8007330 <pvPortMalloc>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d010      	beq.n	8005f14 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ef2:	20bc      	movs	r0, #188	; 0xbc
 8005ef4:	f001 fa1c 	bl	8007330 <pvPortMalloc>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
 8005f08:	e006      	b.n	8005f18 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f001 fab5 	bl	800747c <vPortFree>
 8005f12:	e001      	b.n	8005f18 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01a      	beq.n	8005f54 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	22b9      	movs	r2, #185	; 0xb9
 8005f22:	2100      	movs	r1, #0
 8005f24:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f26:	1dbb      	adds	r3, r7, #6
 8005f28:	881a      	ldrh	r2, [r3, #0]
 8005f2a:	683c      	ldr	r4, [r7, #0]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	9302      	str	r3, [sp, #8]
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	0023      	movs	r3, r4
 8005f42:	f000 f80f 	bl	8005f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f8a3 	bl	8006094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	61bb      	str	r3, [r7, #24]
 8005f52:	e002      	b.n	8005f5a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f54:	2301      	movs	r3, #1
 8005f56:	425b      	negs	r3, r3
 8005f58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b009      	add	sp, #36	; 0x24
 8005f62:	bd90      	pop	{r4, r7, pc}

08005f64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	001a      	movs	r2, r3
 8005f7c:	21a5      	movs	r1, #165	; 0xa5
 8005f7e:	f001 fbac 	bl	80076da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	493e      	ldr	r1, [pc, #248]	; (8006084 <prvInitialiseNewTask+0x120>)
 8005f8a:	468c      	mov	ip, r1
 8005f8c:	4463      	add	r3, ip
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	18d3      	adds	r3, r2, r3
 8005f92:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2207      	movs	r2, #7
 8005f98:	4393      	bics	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2207      	movs	r2, #7
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d001      	beq.n	8005fa8 <prvInitialiseNewTask+0x44>
 8005fa4:	b672      	cpsid	i
 8005fa6:	e7fe      	b.n	8005fa6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e013      	b.n	8005fd6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	18d3      	adds	r3, r2, r3
 8005fb4:	7818      	ldrb	r0, [r3, #0]
 8005fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb8:	2134      	movs	r1, #52	; 0x34
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	18d3      	adds	r3, r2, r3
 8005fbe:	185b      	adds	r3, r3, r1
 8005fc0:	1c02      	adds	r2, r0, #0
 8005fc2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	18d3      	adds	r3, r2, r3
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b0f      	cmp	r3, #15
 8005fda:	d9e8      	bls.n	8005fae <prvInitialiseNewTask+0x4a>
 8005fdc:	e000      	b.n	8005fe0 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005fde:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	2243      	movs	r2, #67	; 0x43
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2b37      	cmp	r3, #55	; 0x37
 8005fec:	d901      	bls.n	8005ff2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fee:	2337      	movs	r3, #55	; 0x37
 8005ff0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	6a3a      	ldr	r2, [r7, #32]
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	6a3a      	ldr	r2, [r7, #32]
 8005ffc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	2200      	movs	r2, #0
 8006002:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	3304      	adds	r3, #4
 8006008:	0018      	movs	r0, r3
 800600a:	f7ff fa69 	bl	80054e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	3318      	adds	r3, #24
 8006012:	0018      	movs	r0, r3
 8006014:	f7ff fa64 	bl	80054e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800601c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	2238      	movs	r2, #56	; 0x38
 8006022:	1ad2      	subs	r2, r2, r3
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	22b4      	movs	r2, #180	; 0xb4
 8006032:	2100      	movs	r1, #0
 8006034:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	22b8      	movs	r2, #184	; 0xb8
 800603a:	2100      	movs	r1, #0
 800603c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	3354      	adds	r3, #84	; 0x54
 8006042:	2260      	movs	r2, #96	; 0x60
 8006044:	2100      	movs	r1, #0
 8006046:	0018      	movs	r0, r3
 8006048:	f001 fb47 	bl	80076da <memset>
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	4a0e      	ldr	r2, [pc, #56]	; (8006088 <prvInitialiseNewTask+0x124>)
 8006050:	659a      	str	r2, [r3, #88]	; 0x58
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	4a0d      	ldr	r2, [pc, #52]	; (800608c <prvInitialiseNewTask+0x128>)
 8006056:	65da      	str	r2, [r3, #92]	; 0x5c
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <prvInitialiseNewTask+0x12c>)
 800605c:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68f9      	ldr	r1, [r7, #12]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	0018      	movs	r0, r3
 8006066:	f001 f833 	bl	80070d0 <pxPortInitialiseStack>
 800606a:	0002      	movs	r2, r0
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800607c:	46c0      	nop			; (mov r8, r8)
 800607e:	46bd      	mov	sp, r7
 8006080:	b006      	add	sp, #24
 8006082:	bd80      	pop	{r7, pc}
 8006084:	3fffffff 	.word	0x3fffffff
 8006088:	080079b8 	.word	0x080079b8
 800608c:	080079d8 	.word	0x080079d8
 8006090:	08007998 	.word	0x08007998

08006094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800609c:	f001 f8b0 	bl	8007200 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a0:	4b2a      	ldr	r3, [pc, #168]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	4b29      	ldr	r3, [pc, #164]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060a8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80060aa:	4b29      	ldr	r3, [pc, #164]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060b2:	4b27      	ldr	r3, [pc, #156]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b8:	4b24      	ldr	r3, [pc, #144]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d110      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060c0:	f000 fba6 	bl	8006810 <prvInitialiseTaskLists>
 80060c4:	e00d      	b.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060c6:	4b23      	ldr	r3, [pc, #140]	; (8006154 <prvAddNewTaskToReadyList+0xc0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	429a      	cmp	r2, r3
 80060da:	d802      	bhi.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060dc:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060ea:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060ec:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f8:	4b18      	ldr	r3, [pc, #96]	; (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d903      	bls.n	8006108 <prvAddNewTaskToReadyList+0x74>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	4b15      	ldr	r3, [pc, #84]	; (800615c <prvAddNewTaskToReadyList+0xc8>)
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	0013      	movs	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	189b      	adds	r3, r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4a12      	ldr	r2, [pc, #72]	; (8006160 <prvAddNewTaskToReadyList+0xcc>)
 8006116:	189a      	adds	r2, r3, r2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	0019      	movs	r1, r3
 800611e:	0010      	movs	r0, r2
 8006120:	f7ff f9e9 	bl	80054f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006124:	f001 f87e 	bl	8007224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <prvAddNewTaskToReadyList+0xc0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	429a      	cmp	r2, r3
 800613c:	d201      	bcs.n	8006142 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800613e:	f001 f84f 	bl	80071e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	46bd      	mov	sp, r7
 8006146:	b002      	add	sp, #8
 8006148:	bd80      	pop	{r7, pc}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	20002b4c 	.word	0x20002b4c
 8006150:	20002678 	.word	0x20002678
 8006154:	20002b58 	.word	0x20002b58
 8006158:	20002b68 	.word	0x20002b68
 800615c:	20002b54 	.word	0x20002b54
 8006160:	2000267c 	.word	0x2000267c

08006164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d010      	beq.n	8006198 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006176:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <vTaskDelay+0x48>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <vTaskDelay+0x1e>
 800617e:	b672      	cpsid	i
 8006180:	e7fe      	b.n	8006180 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006182:	f000 f873 	bl	800626c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2100      	movs	r1, #0
 800618a:	0018      	movs	r0, r3
 800618c:	f000 fc7c 	bl	8006a88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006190:	f000 f878 	bl	8006284 <xTaskResumeAll>
 8006194:	0003      	movs	r3, r0
 8006196:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800619e:	f001 f81f 	bl	80071e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b004      	add	sp, #16
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	20002b74 	.word	0x20002b74

080061b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b089      	sub	sp, #36	; 0x24
 80061b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061be:	003a      	movs	r2, r7
 80061c0:	1d39      	adds	r1, r7, #4
 80061c2:	2308      	movs	r3, #8
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7ff f93c 	bl	8005444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061cc:	683c      	ldr	r4, [r7, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	491e      	ldr	r1, [pc, #120]	; (800624c <vTaskStartScheduler+0x9c>)
 80061d4:	481e      	ldr	r0, [pc, #120]	; (8006250 <vTaskStartScheduler+0xa0>)
 80061d6:	9202      	str	r2, [sp, #8]
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	2300      	movs	r3, #0
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2300      	movs	r3, #0
 80061e0:	0022      	movs	r2, r4
 80061e2:	f7ff fe30 	bl	8005e46 <xTaskCreateStatic>
 80061e6:	0002      	movs	r2, r0
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <vTaskStartScheduler+0xa4>)
 80061ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ec:	4b19      	ldr	r3, [pc, #100]	; (8006254 <vTaskStartScheduler+0xa4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e001      	b.n	80061fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d103      	bne.n	800620c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006204:	f000 fc94 	bl	8006b30 <xTimerCreateTimerTask>
 8006208:	0003      	movs	r3, r0
 800620a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d113      	bne.n	800623a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006212:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006214:	4b10      	ldr	r3, [pc, #64]	; (8006258 <vTaskStartScheduler+0xa8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3354      	adds	r3, #84	; 0x54
 800621a:	001a      	movs	r2, r3
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <vTaskStartScheduler+0xac>)
 800621e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <vTaskStartScheduler+0xb0>)
 8006222:	2201      	movs	r2, #1
 8006224:	4252      	negs	r2, r2
 8006226:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <vTaskStartScheduler+0xb4>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800622e:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <vTaskStartScheduler+0xb8>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006234:	f000 ffb0 	bl	8007198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006238:	e004      	b.n	8006244 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	d101      	bne.n	8006244 <vTaskStartScheduler+0x94>
 8006240:	b672      	cpsid	i
 8006242:	e7fe      	b.n	8006242 <vTaskStartScheduler+0x92>
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	46bd      	mov	sp, r7
 8006248:	b005      	add	sp, #20
 800624a:	bd90      	pop	{r4, r7, pc}
 800624c:	080078d4 	.word	0x080078d4
 8006250:	080067f1 	.word	0x080067f1
 8006254:	20002b70 	.word	0x20002b70
 8006258:	20002678 	.word	0x20002678
 800625c:	20001c18 	.word	0x20001c18
 8006260:	20002b6c 	.word	0x20002b6c
 8006264:	20002b58 	.word	0x20002b58
 8006268:	20002b50 	.word	0x20002b50

0800626c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006270:	4b03      	ldr	r3, [pc, #12]	; (8006280 <vTaskSuspendAll+0x14>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	4b02      	ldr	r3, [pc, #8]	; (8006280 <vTaskSuspendAll+0x14>)
 8006278:	601a      	str	r2, [r3, #0]
}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20002b74 	.word	0x20002b74

08006284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800628e:	2300      	movs	r3, #0
 8006290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006292:	4b3a      	ldr	r3, [pc, #232]	; (800637c <xTaskResumeAll+0xf8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <xTaskResumeAll+0x1a>
 800629a:	b672      	cpsid	i
 800629c:	e7fe      	b.n	800629c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800629e:	f000 ffaf 	bl	8007200 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <xTaskResumeAll+0xf8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	1e5a      	subs	r2, r3, #1
 80062a8:	4b34      	ldr	r3, [pc, #208]	; (800637c <xTaskResumeAll+0xf8>)
 80062aa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ac:	4b33      	ldr	r3, [pc, #204]	; (800637c <xTaskResumeAll+0xf8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d15b      	bne.n	800636c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062b4:	4b32      	ldr	r3, [pc, #200]	; (8006380 <xTaskResumeAll+0xfc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d057      	beq.n	800636c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062bc:	e02f      	b.n	800631e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062be:	4b31      	ldr	r3, [pc, #196]	; (8006384 <xTaskResumeAll+0x100>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3318      	adds	r3, #24
 80062ca:	0018      	movs	r0, r3
 80062cc:	f7ff f96b 	bl	80055a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3304      	adds	r3, #4
 80062d4:	0018      	movs	r0, r3
 80062d6:	f7ff f966 	bl	80055a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4b2a      	ldr	r3, [pc, #168]	; (8006388 <xTaskResumeAll+0x104>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d903      	bls.n	80062ee <xTaskResumeAll+0x6a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ea:	4b27      	ldr	r3, [pc, #156]	; (8006388 <xTaskResumeAll+0x104>)
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f2:	0013      	movs	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	189b      	adds	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a24      	ldr	r2, [pc, #144]	; (800638c <xTaskResumeAll+0x108>)
 80062fc:	189a      	adds	r2, r3, r2
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3304      	adds	r3, #4
 8006302:	0019      	movs	r1, r3
 8006304:	0010      	movs	r0, r2
 8006306:	f7ff f8f6 	bl	80054f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <xTaskResumeAll+0x10c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	429a      	cmp	r2, r3
 8006316:	d302      	bcc.n	800631e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <xTaskResumeAll+0x110>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631e:	4b19      	ldr	r3, [pc, #100]	; (8006384 <xTaskResumeAll+0x100>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1cb      	bne.n	80062be <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800632c:	f000 fb10 	bl	8006950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006330:	4b19      	ldr	r3, [pc, #100]	; (8006398 <xTaskResumeAll+0x114>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00f      	beq.n	800635c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800633c:	f000 f83c 	bl	80063b8 <xTaskIncrementTick>
 8006340:	1e03      	subs	r3, r0, #0
 8006342:	d002      	beq.n	800634a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <xTaskResumeAll+0x110>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3b01      	subs	r3, #1
 800634e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f2      	bne.n	800633c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006356:	4b10      	ldr	r3, [pc, #64]	; (8006398 <xTaskResumeAll+0x114>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <xTaskResumeAll+0x110>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006364:	2301      	movs	r3, #1
 8006366:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006368:	f000 ff3a 	bl	80071e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800636c:	f000 ff5a 	bl	8007224 <vPortExitCritical>

	return xAlreadyYielded;
 8006370:	68bb      	ldr	r3, [r7, #8]
}
 8006372:	0018      	movs	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	b004      	add	sp, #16
 8006378:	bd80      	pop	{r7, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	20002b74 	.word	0x20002b74
 8006380:	20002b4c 	.word	0x20002b4c
 8006384:	20002b0c 	.word	0x20002b0c
 8006388:	20002b54 	.word	0x20002b54
 800638c:	2000267c 	.word	0x2000267c
 8006390:	20002678 	.word	0x20002678
 8006394:	20002b60 	.word	0x20002b60
 8006398:	20002b5c 	.word	0x20002b5c

0800639c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063a2:	4b04      	ldr	r3, [pc, #16]	; (80063b4 <xTaskGetTickCount+0x18>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063a8:	687b      	ldr	r3, [r7, #4]
}
 80063aa:	0018      	movs	r0, r3
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b002      	add	sp, #8
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	20002b50 	.word	0x20002b50

080063b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c2:	4b4c      	ldr	r3, [pc, #304]	; (80064f4 <xTaskIncrementTick+0x13c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d000      	beq.n	80063cc <xTaskIncrementTick+0x14>
 80063ca:	e083      	b.n	80064d4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063cc:	4b4a      	ldr	r3, [pc, #296]	; (80064f8 <xTaskIncrementTick+0x140>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063d4:	4b48      	ldr	r3, [pc, #288]	; (80064f8 <xTaskIncrementTick+0x140>)
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d117      	bne.n	8006410 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80063e0:	4b46      	ldr	r3, [pc, #280]	; (80064fc <xTaskIncrementTick+0x144>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <xTaskIncrementTick+0x36>
 80063ea:	b672      	cpsid	i
 80063ec:	e7fe      	b.n	80063ec <xTaskIncrementTick+0x34>
 80063ee:	4b43      	ldr	r3, [pc, #268]	; (80064fc <xTaskIncrementTick+0x144>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	4b42      	ldr	r3, [pc, #264]	; (8006500 <xTaskIncrementTick+0x148>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b40      	ldr	r3, [pc, #256]	; (80064fc <xTaskIncrementTick+0x144>)
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	4b40      	ldr	r3, [pc, #256]	; (8006500 <xTaskIncrementTick+0x148>)
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	4b40      	ldr	r3, [pc, #256]	; (8006504 <xTaskIncrementTick+0x14c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	4b3e      	ldr	r3, [pc, #248]	; (8006504 <xTaskIncrementTick+0x14c>)
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f000 faa0 	bl	8006950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006410:	4b3d      	ldr	r3, [pc, #244]	; (8006508 <xTaskIncrementTick+0x150>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d34e      	bcc.n	80064b8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641a:	4b38      	ldr	r3, [pc, #224]	; (80064fc <xTaskIncrementTick+0x144>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <xTaskIncrementTick+0x70>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <xTaskIncrementTick+0x72>
 8006428:	2300      	movs	r3, #0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642e:	4b36      	ldr	r3, [pc, #216]	; (8006508 <xTaskIncrementTick+0x150>)
 8006430:	2201      	movs	r2, #1
 8006432:	4252      	negs	r2, r2
 8006434:	601a      	str	r2, [r3, #0]
					break;
 8006436:	e03f      	b.n	80064b8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006438:	4b30      	ldr	r3, [pc, #192]	; (80064fc <xTaskIncrementTick+0x144>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d203      	bcs.n	8006458 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006450:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <xTaskIncrementTick+0x150>)
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
						break;
 8006456:	e02f      	b.n	80064b8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	3304      	adds	r3, #4
 800645c:	0018      	movs	r0, r3
 800645e:	f7ff f8a2 	bl	80055a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	3318      	adds	r3, #24
 800646e:	0018      	movs	r0, r3
 8006470:	f7ff f899 	bl	80055a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b24      	ldr	r3, [pc, #144]	; (800650c <xTaskIncrementTick+0x154>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <xTaskIncrementTick+0xd0>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4b21      	ldr	r3, [pc, #132]	; (800650c <xTaskIncrementTick+0x154>)
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	0013      	movs	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	189b      	adds	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <xTaskIncrementTick+0x158>)
 8006496:	189a      	adds	r2, r3, r2
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3304      	adds	r3, #4
 800649c:	0019      	movs	r1, r3
 800649e:	0010      	movs	r0, r2
 80064a0:	f7ff f829 	bl	80054f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <xTaskIncrementTick+0x15c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3b3      	bcc.n	800641a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b6:	e7b0      	b.n	800641a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064b8:	4b16      	ldr	r3, [pc, #88]	; (8006514 <xTaskIncrementTick+0x15c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	4914      	ldr	r1, [pc, #80]	; (8006510 <xTaskIncrementTick+0x158>)
 80064c0:	0013      	movs	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	189b      	adds	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	585b      	ldr	r3, [r3, r1]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d907      	bls.n	80064de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80064ce:	2301      	movs	r3, #1
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e004      	b.n	80064de <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064d4:	4b10      	ldr	r3, [pc, #64]	; (8006518 <xTaskIncrementTick+0x160>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <xTaskIncrementTick+0x160>)
 80064dc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <xTaskIncrementTick+0x164>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80064e6:	2301      	movs	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064ea:	697b      	ldr	r3, [r7, #20]
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b006      	add	sp, #24
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20002b74 	.word	0x20002b74
 80064f8:	20002b50 	.word	0x20002b50
 80064fc:	20002b04 	.word	0x20002b04
 8006500:	20002b08 	.word	0x20002b08
 8006504:	20002b64 	.word	0x20002b64
 8006508:	20002b6c 	.word	0x20002b6c
 800650c:	20002b54 	.word	0x20002b54
 8006510:	2000267c 	.word	0x2000267c
 8006514:	20002678 	.word	0x20002678
 8006518:	20002b5c 	.word	0x20002b5c
 800651c:	20002b60 	.word	0x20002b60

08006520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006526:	4b25      	ldr	r3, [pc, #148]	; (80065bc <vTaskSwitchContext+0x9c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800652e:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <vTaskSwitchContext+0xa0>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006534:	e03d      	b.n	80065b2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8006536:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <vTaskSwitchContext+0xa0>)
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800653c:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <vTaskSwitchContext+0xa4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	e007      	b.n	8006554 <vTaskSwitchContext+0x34>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <vTaskSwitchContext+0x2e>
 800654a:	b672      	cpsid	i
 800654c:	e7fe      	b.n	800654c <vTaskSwitchContext+0x2c>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3b01      	subs	r3, #1
 8006552:	607b      	str	r3, [r7, #4]
 8006554:	491c      	ldr	r1, [pc, #112]	; (80065c8 <vTaskSwitchContext+0xa8>)
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	0013      	movs	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	189b      	adds	r3, r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	585b      	ldr	r3, [r3, r1]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0ee      	beq.n	8006544 <vTaskSwitchContext+0x24>
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	0013      	movs	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	189b      	adds	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <vTaskSwitchContext+0xa8>)
 8006572:	189b      	adds	r3, r3, r2
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	605a      	str	r2, [r3, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	429a      	cmp	r2, r3
 800658a:	d104      	bne.n	8006596 <vTaskSwitchContext+0x76>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <vTaskSwitchContext+0xac>)
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <vTaskSwitchContext+0xa4>)
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <vTaskSwitchContext+0xac>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3354      	adds	r3, #84	; 0x54
 80065ac:	001a      	movs	r2, r3
 80065ae:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <vTaskSwitchContext+0xb0>)
 80065b0:	601a      	str	r2, [r3, #0]
}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b002      	add	sp, #8
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	20002b74 	.word	0x20002b74
 80065c0:	20002b60 	.word	0x20002b60
 80065c4:	20002b54 	.word	0x20002b54
 80065c8:	2000267c 	.word	0x2000267c
 80065cc:	20002678 	.word	0x20002678
 80065d0:	20001c18 	.word	0x20001c18

080065d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <vTaskPlaceOnEventList+0x14>
 80065e4:	b672      	cpsid	i
 80065e6:	e7fe      	b.n	80065e6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065e8:	4b08      	ldr	r3, [pc, #32]	; (800660c <vTaskPlaceOnEventList+0x38>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3318      	adds	r3, #24
 80065ee:	001a      	movs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	0011      	movs	r1, r2
 80065f4:	0018      	movs	r0, r3
 80065f6:	f7fe ffa0 	bl	800553a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2101      	movs	r1, #1
 80065fe:	0018      	movs	r0, r3
 8006600:	f000 fa42 	bl	8006a88 <prvAddCurrentTaskToDelayedList>
}
 8006604:	46c0      	nop			; (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b002      	add	sp, #8
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20002678 	.word	0x20002678

08006610 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <vTaskPlaceOnEventListRestricted+0x16>
 8006622:	b672      	cpsid	i
 8006624:	e7fe      	b.n	8006624 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <vTaskPlaceOnEventListRestricted+0x48>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3318      	adds	r3, #24
 800662c:	001a      	movs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	0011      	movs	r1, r2
 8006632:	0018      	movs	r0, r3
 8006634:	f7fe ff5f 	bl	80054f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800663e:	2301      	movs	r3, #1
 8006640:	425b      	negs	r3, r3
 8006642:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	0011      	movs	r1, r2
 800664a:	0018      	movs	r0, r3
 800664c:	f000 fa1c 	bl	8006a88 <prvAddCurrentTaskToDelayedList>
	}
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	b004      	add	sp, #16
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20002678 	.word	0x20002678

0800665c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <xTaskRemoveFromEventList+0x1a>
 8006672:	b672      	cpsid	i
 8006674:	e7fe      	b.n	8006674 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3318      	adds	r3, #24
 800667a:	0018      	movs	r0, r3
 800667c:	f7fe ff93 	bl	80055a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006680:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <xTaskRemoveFromEventList+0xa0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11d      	bne.n	80066c4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3304      	adds	r3, #4
 800668c:	0018      	movs	r0, r3
 800668e:	f7fe ff8a 	bl	80055a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006696:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <xTaskRemoveFromEventList+0xa4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d903      	bls.n	80066a6 <xTaskRemoveFromEventList+0x4a>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4b17      	ldr	r3, [pc, #92]	; (8006700 <xTaskRemoveFromEventList+0xa4>)
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	0013      	movs	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4a14      	ldr	r2, [pc, #80]	; (8006704 <xTaskRemoveFromEventList+0xa8>)
 80066b4:	189a      	adds	r2, r3, r2
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	3304      	adds	r3, #4
 80066ba:	0019      	movs	r1, r3
 80066bc:	0010      	movs	r0, r2
 80066be:	f7fe ff1a 	bl	80054f6 <vListInsertEnd>
 80066c2:	e007      	b.n	80066d4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	3318      	adds	r3, #24
 80066c8:	001a      	movs	r2, r3
 80066ca:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <xTaskRemoveFromEventList+0xac>)
 80066cc:	0011      	movs	r1, r2
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7fe ff11 	bl	80054f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <xTaskRemoveFromEventList+0xb0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	429a      	cmp	r2, r3
 80066e0:	d905      	bls.n	80066ee <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066e2:	2301      	movs	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <xTaskRemoveFromEventList+0xb4>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e001      	b.n	80066f2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066f2:	68fb      	ldr	r3, [r7, #12]
}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b004      	add	sp, #16
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20002b74 	.word	0x20002b74
 8006700:	20002b54 	.word	0x20002b54
 8006704:	2000267c 	.word	0x2000267c
 8006708:	20002b0c 	.word	0x20002b0c
 800670c:	20002678 	.word	0x20002678
 8006710:	20002b60 	.word	0x20002b60

08006714 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800671c:	4b05      	ldr	r3, [pc, #20]	; (8006734 <vTaskInternalSetTimeOutState+0x20>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <vTaskInternalSetTimeOutState+0x24>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	605a      	str	r2, [r3, #4]
}
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20002b64 	.word	0x20002b64
 8006738:	20002b50 	.word	0x20002b50

0800673c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <xTaskCheckForTimeOut+0x14>
 800674c:	b672      	cpsid	i
 800674e:	e7fe      	b.n	800674e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <xTaskCheckForTimeOut+0x1e>
 8006756:	b672      	cpsid	i
 8006758:	e7fe      	b.n	8006758 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800675a:	f000 fd51 	bl	8007200 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800675e:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <xTaskCheckForTimeOut+0x98>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	d102      	bne.n	800677c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	e024      	b.n	80067c6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <xTaskCheckForTimeOut+0x9c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d007      	beq.n	8006798 <xTaskCheckForTimeOut+0x5c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006792:	2301      	movs	r3, #1
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	e016      	b.n	80067c6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d20c      	bcs.n	80067bc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1ad2      	subs	r2, r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7ff ffaf 	bl	8006714 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	e004      	b.n	80067c6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067c2:	2301      	movs	r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80067c6:	f000 fd2d 	bl	8007224 <vPortExitCritical>

	return xReturn;
 80067ca:	697b      	ldr	r3, [r7, #20]
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b006      	add	sp, #24
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20002b50 	.word	0x20002b50
 80067d8:	20002b64 	.word	0x20002b64

080067dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <vTaskMissedYield+0x10>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20002b60 	.word	0x20002b60

080067f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067f8:	f000 f84e 	bl	8006898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067fc:	4b03      	ldr	r3, [pc, #12]	; (800680c <prvIdleTask+0x1c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d9f9      	bls.n	80067f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006804:	f000 fcec 	bl	80071e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006808:	e7f6      	b.n	80067f8 <prvIdleTask+0x8>
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	2000267c 	.word	0x2000267c

08006810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006816:	2300      	movs	r3, #0
 8006818:	607b      	str	r3, [r7, #4]
 800681a:	e00c      	b.n	8006836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	0013      	movs	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	189b      	adds	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4a14      	ldr	r2, [pc, #80]	; (8006878 <prvInitialiseTaskLists+0x68>)
 8006828:	189b      	adds	r3, r3, r2
 800682a:	0018      	movs	r0, r3
 800682c:	f7fe fe3a 	bl	80054a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3301      	adds	r3, #1
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b37      	cmp	r3, #55	; 0x37
 800683a:	d9ef      	bls.n	800681c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800683c:	4b0f      	ldr	r3, [pc, #60]	; (800687c <prvInitialiseTaskLists+0x6c>)
 800683e:	0018      	movs	r0, r3
 8006840:	f7fe fe30 	bl	80054a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006844:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <prvInitialiseTaskLists+0x70>)
 8006846:	0018      	movs	r0, r3
 8006848:	f7fe fe2c 	bl	80054a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800684c:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <prvInitialiseTaskLists+0x74>)
 800684e:	0018      	movs	r0, r3
 8006850:	f7fe fe28 	bl	80054a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <prvInitialiseTaskLists+0x78>)
 8006856:	0018      	movs	r0, r3
 8006858:	f7fe fe24 	bl	80054a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <prvInitialiseTaskLists+0x7c>)
 800685e:	0018      	movs	r0, r3
 8006860:	f7fe fe20 	bl	80054a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <prvInitialiseTaskLists+0x80>)
 8006866:	4a05      	ldr	r2, [pc, #20]	; (800687c <prvInitialiseTaskLists+0x6c>)
 8006868:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800686a:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <prvInitialiseTaskLists+0x84>)
 800686c:	4a04      	ldr	r2, [pc, #16]	; (8006880 <prvInitialiseTaskLists+0x70>)
 800686e:	601a      	str	r2, [r3, #0]
}
 8006870:	46c0      	nop			; (mov r8, r8)
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}
 8006878:	2000267c 	.word	0x2000267c
 800687c:	20002adc 	.word	0x20002adc
 8006880:	20002af0 	.word	0x20002af0
 8006884:	20002b0c 	.word	0x20002b0c
 8006888:	20002b20 	.word	0x20002b20
 800688c:	20002b38 	.word	0x20002b38
 8006890:	20002b04 	.word	0x20002b04
 8006894:	20002b08 	.word	0x20002b08

08006898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800689e:	e01a      	b.n	80068d6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80068a0:	f000 fcae 	bl	8007200 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <prvCheckTasksWaitingTermination+0x50>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	0018      	movs	r0, r3
 80068b2:	f7fe fe78 	bl	80055a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <prvCheckTasksWaitingTermination+0x54>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	1e5a      	subs	r2, r3, #1
 80068bc:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <prvCheckTasksWaitingTermination+0x54>)
 80068be:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvCheckTasksWaitingTermination+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	1e5a      	subs	r2, r3, #1
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvCheckTasksWaitingTermination+0x58>)
 80068c8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80068ca:	f000 fcab 	bl	8007224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 f80f 	bl	80068f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <prvCheckTasksWaitingTermination+0x58>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e0      	bne.n	80068a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b002      	add	sp, #8
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20002b20 	.word	0x20002b20
 80068ec:	20002b4c 	.word	0x20002b4c
 80068f0:	20002b34 	.word	0x20002b34

080068f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3354      	adds	r3, #84	; 0x54
 8006900:	0018      	movs	r0, r3
 8006902:	f000 feff 	bl	8007704 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	22b9      	movs	r2, #185	; 0xb9
 800690a:	5c9b      	ldrb	r3, [r3, r2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d109      	bne.n	8006924 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	0018      	movs	r0, r3
 8006916:	f000 fdb1 	bl	800747c <vPortFree>
				vPortFree( pxTCB );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f000 fdad 	bl	800747c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006922:	e010      	b.n	8006946 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	22b9      	movs	r2, #185	; 0xb9
 8006928:	5c9b      	ldrb	r3, [r3, r2]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d104      	bne.n	8006938 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 fda3 	bl	800747c <vPortFree>
	}
 8006936:	e006      	b.n	8006946 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	22b9      	movs	r2, #185	; 0xb9
 800693c:	5c9b      	ldrb	r3, [r3, r2]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d001      	beq.n	8006946 <prvDeleteTCB+0x52>
 8006942:	b672      	cpsid	i
 8006944:	e7fe      	b.n	8006944 <prvDeleteTCB+0x50>
	}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	46bd      	mov	sp, r7
 800694a:	b002      	add	sp, #8
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <prvResetNextTaskUnblockTime+0x40>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <prvResetNextTaskUnblockTime+0x14>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <prvResetNextTaskUnblockTime+0x16>
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <prvResetNextTaskUnblockTime+0x44>)
 800696c:	2201      	movs	r2, #1
 800696e:	4252      	negs	r2, r2
 8006970:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006972:	e008      	b.n	8006986 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <prvResetNextTaskUnblockTime+0x40>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <prvResetNextTaskUnblockTime+0x44>)
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	46bd      	mov	sp, r7
 800698a:	b002      	add	sp, #8
 800698c:	bd80      	pop	{r7, pc}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	20002b04 	.word	0x20002b04
 8006994:	20002b6c 	.word	0x20002b6c

08006998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <xTaskGetSchedulerState+0x30>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069a6:	2301      	movs	r3, #1
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	e008      	b.n	80069be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ac:	4b07      	ldr	r3, [pc, #28]	; (80069cc <xTaskGetSchedulerState+0x34>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069b4:	2302      	movs	r3, #2
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	e001      	b.n	80069be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ba:	2300      	movs	r3, #0
 80069bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069be:	687b      	ldr	r3, [r7, #4]
	}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b002      	add	sp, #8
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20002b58 	.word	0x20002b58
 80069cc:	20002b74 	.word	0x20002b74

080069d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d044      	beq.n	8006a70 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069e6:	4b25      	ldr	r3, [pc, #148]	; (8006a7c <xTaskPriorityDisinherit+0xac>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <xTaskPriorityDisinherit+0x24>
 80069f0:	b672      	cpsid	i
 80069f2:	e7fe      	b.n	80069f2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <xTaskPriorityDisinherit+0x30>
 80069fc:	b672      	cpsid	i
 80069fe:	e7fe      	b.n	80069fe <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d02c      	beq.n	8006a70 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d128      	bne.n	8006a70 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3304      	adds	r3, #4
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7fe fdbf 	bl	80055a6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	2238      	movs	r2, #56	; 0x38
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <xTaskPriorityDisinherit+0xb0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d903      	bls.n	8006a50 <xTaskPriorityDisinherit+0x80>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <xTaskPriorityDisinherit+0xb0>)
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	0013      	movs	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	189b      	adds	r3, r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <xTaskPriorityDisinherit+0xb4>)
 8006a5e:	189a      	adds	r2, r3, r2
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	3304      	adds	r3, #4
 8006a64:	0019      	movs	r1, r3
 8006a66:	0010      	movs	r0, r2
 8006a68:	f7fe fd45 	bl	80054f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a70:	68fb      	ldr	r3, [r7, #12]
	}
 8006a72:	0018      	movs	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b004      	add	sp, #16
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	20002678 	.word	0x20002678
 8006a80:	20002b54 	.word	0x20002b54
 8006a84:	2000267c 	.word	0x2000267c

08006a88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a92:	4b21      	ldr	r3, [pc, #132]	; (8006b18 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a98:	4b20      	ldr	r3, [pc, #128]	; (8006b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f7fe fd81 	bl	80055a6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	d10b      	bne.n	8006ac2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1d1a      	adds	r2, r3, #4
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ab8:	0011      	movs	r1, r2
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7fe fd1b 	bl	80054f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ac0:	e026      	b.n	8006b10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	18d3      	adds	r3, r2, r3
 8006ac8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006aca:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d209      	bcs.n	8006aee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	0010      	movs	r0, r2
 8006ae8:	f7fe fd27 	bl	800553a <vListInsert>
}
 8006aec:	e010      	b.n	8006b10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aee:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3304      	adds	r3, #4
 8006af8:	0019      	movs	r1, r3
 8006afa:	0010      	movs	r0, r2
 8006afc:	f7fe fd1d 	bl	800553a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d202      	bcs.n	8006b10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b0a:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	601a      	str	r2, [r3, #0]
}
 8006b10:	46c0      	nop			; (mov r8, r8)
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b004      	add	sp, #16
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20002b50 	.word	0x20002b50
 8006b1c:	20002678 	.word	0x20002678
 8006b20:	20002b38 	.word	0x20002b38
 8006b24:	20002b08 	.word	0x20002b08
 8006b28:	20002b04 	.word	0x20002b04
 8006b2c:	20002b6c 	.word	0x20002b6c

08006b30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b3a:	f000 fa87 	bl	800704c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b3e:	4b17      	ldr	r3, [pc, #92]	; (8006b9c <xTimerCreateTimerTask+0x6c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d020      	beq.n	8006b88 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b4e:	003a      	movs	r2, r7
 8006b50:	1d39      	adds	r1, r7, #4
 8006b52:	2308      	movs	r3, #8
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	0018      	movs	r0, r3
 8006b58:	f7fe fc8c 	bl	8005474 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b5c:	683c      	ldr	r4, [r7, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	490f      	ldr	r1, [pc, #60]	; (8006ba0 <xTimerCreateTimerTask+0x70>)
 8006b64:	480f      	ldr	r0, [pc, #60]	; (8006ba4 <xTimerCreateTimerTask+0x74>)
 8006b66:	9202      	str	r2, [sp, #8]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	2306      	movs	r3, #6
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	0022      	movs	r2, r4
 8006b72:	f7ff f968 	bl	8005e46 <xTaskCreateStatic>
 8006b76:	0002      	movs	r2, r0
 8006b78:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <xTimerCreateTimerTask+0x78>)
 8006b7a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <xTimerCreateTimerTask+0x78>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006b84:	2301      	movs	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <xTimerCreateTimerTask+0x62>
 8006b8e:	b672      	cpsid	i
 8006b90:	e7fe      	b.n	8006b90 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	0018      	movs	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b005      	add	sp, #20
 8006b9a:	bd90      	pop	{r4, r7, pc}
 8006b9c:	20002ba8 	.word	0x20002ba8
 8006ba0:	080078dc 	.word	0x080078dc
 8006ba4:	08006cb1 	.word	0x08006cb1
 8006ba8:	20002bac 	.word	0x20002bac

08006bac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b08b      	sub	sp, #44	; 0x2c
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <xTimerGenericCommand+0x1c>
 8006bc4:	b672      	cpsid	i
 8006bc6:	e7fe      	b.n	8006bc6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bc8:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <xTimerGenericCommand+0x90>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d030      	beq.n	8006c32 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bd0:	2414      	movs	r4, #20
 8006bd2:	193b      	adds	r3, r7, r4
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bd8:	193b      	adds	r3, r7, r4
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006bde:	193b      	adds	r3, r7, r4
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	dc19      	bgt.n	8006c1e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bea:	f7ff fed5 	bl	8006998 <xTaskGetSchedulerState>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d109      	bne.n	8006c08 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bf4:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <xTimerGenericCommand+0x90>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bfa:	1939      	adds	r1, r7, r4
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f7fe fdc0 	bl	8005782 <xQueueGenericSend>
 8006c02:	0003      	movs	r3, r0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
 8006c06:	e014      	b.n	8006c32 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <xTimerGenericCommand+0x90>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	2314      	movs	r3, #20
 8006c0e:	18f9      	adds	r1, r7, r3
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	f7fe fdb5 	bl	8005782 <xQueueGenericSend>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	e009      	b.n	8006c32 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c1e:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <xTimerGenericCommand+0x90>)
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	2314      	movs	r3, #20
 8006c26:	18f9      	adds	r1, r7, r3
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f7fe fe6e 	bl	800590a <xQueueGenericSendFromISR>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c34:	0018      	movs	r0, r3
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b00b      	add	sp, #44	; 0x2c
 8006c3a:	bd90      	pop	{r4, r7, pc}
 8006c3c:	20002ba8 	.word	0x20002ba8

08006c40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c4a:	4b18      	ldr	r3, [pc, #96]	; (8006cac <prvProcessExpiredTimer+0x6c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3304      	adds	r3, #4
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7fe fca4 	bl	80055a6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d119      	bne.n	8006c9a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	18d1      	adds	r1, r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f8b6 	bl	8006de4 <prvInsertTimerInActiveList>
 8006c78:	1e03      	subs	r3, r0, #0
 8006c7a:	d00e      	beq.n	8006c9a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	2300      	movs	r3, #0
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	f7ff ff90 	bl	8006bac <xTimerGenericCommand>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <prvProcessExpiredTimer+0x5a>
 8006c96:	b672      	cpsid	i
 8006c98:	e7fe      	b.n	8006c98 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	0010      	movs	r0, r2
 8006ca2:	4798      	blx	r3
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b004      	add	sp, #16
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20002ba0 	.word	0x20002ba0

08006cb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cb8:	2308      	movs	r3, #8
 8006cba:	18fb      	adds	r3, r7, r3
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f000 f851 	bl	8006d64 <prvGetNextExpireTime>
 8006cc2:	0003      	movs	r3, r0
 8006cc4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	0011      	movs	r1, r2
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f000 f803 	bl	8006cd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cd2:	f000 f8c9 	bl	8006e68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cd6:	e7ef      	b.n	8006cb8 <prvTimerTask+0x8>

08006cd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ce2:	f7ff fac3 	bl	800626c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 f85a 	bl	8006da4 <prvSampleTimeNow>
 8006cf0:	0003      	movs	r3, r0
 8006cf2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d129      	bne.n	8006d4e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10c      	bne.n	8006d1a <prvProcessTimerOrBlockTask+0x42>
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d808      	bhi.n	8006d1a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006d08:	f7ff fabc 	bl	8006284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0011      	movs	r1, r2
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7ff ff94 	bl	8006c40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d18:	e01b      	b.n	8006d52 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d006      	beq.n	8006d2e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <prvProcessTimerOrBlockTask+0x84>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	425a      	negs	r2, r3
 8006d28:	4153      	adcs	r3, r2
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <prvProcessTimerOrBlockTask+0x88>)
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	0019      	movs	r1, r3
 8006d3c:	f7ff f850 	bl	8005de0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d40:	f7ff faa0 	bl	8006284 <xTaskResumeAll>
 8006d44:	1e03      	subs	r3, r0, #0
 8006d46:	d104      	bne.n	8006d52 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006d48:	f000 fa4a 	bl	80071e0 <vPortYield>
}
 8006d4c:	e001      	b.n	8006d52 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006d4e:	f7ff fa99 	bl	8006284 <xTaskResumeAll>
}
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b004      	add	sp, #16
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	20002ba4 	.word	0x20002ba4
 8006d60:	20002ba8 	.word	0x20002ba8

08006d64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <prvGetNextExpireTime+0x3c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	425a      	negs	r2, r3
 8006d74:	4153      	adcs	r3, r2
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	001a      	movs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d86:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <prvGetNextExpireTime+0x3c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e001      	b.n	8006d96 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d96:	68fb      	ldr	r3, [r7, #12]
}
 8006d98:	0018      	movs	r0, r3
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b004      	add	sp, #16
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20002ba0 	.word	0x20002ba0

08006da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dac:	f7ff faf6 	bl	800639c <xTaskGetTickCount>
 8006db0:	0003      	movs	r3, r0
 8006db2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <prvSampleTimeNow+0x3c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d205      	bcs.n	8006dca <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006dbe:	f000 f8eb 	bl	8006f98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	e002      	b.n	8006dd0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006dd0:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <prvSampleTimeNow+0x3c>)
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b004      	add	sp, #16
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20002bb0 	.word	0x20002bb0

08006de4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d812      	bhi.n	8006e30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d302      	bcc.n	8006e1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	e01b      	b.n	8006e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e1e:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <prvInsertTimerInActiveList+0x7c>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3304      	adds	r3, #4
 8006e26:	0019      	movs	r1, r3
 8006e28:	0010      	movs	r0, r2
 8006e2a:	f7fe fb86 	bl	800553a <vListInsert>
 8006e2e:	e012      	b.n	8006e56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d206      	bcs.n	8006e46 <prvInsertTimerInActiveList+0x62>
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d302      	bcc.n	8006e46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	e007      	b.n	8006e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <prvInsertTimerInActiveList+0x80>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	0019      	movs	r1, r3
 8006e50:	0010      	movs	r0, r2
 8006e52:	f7fe fb72 	bl	800553a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e56:	697b      	ldr	r3, [r7, #20]
}
 8006e58:	0018      	movs	r0, r3
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b006      	add	sp, #24
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20002ba4 	.word	0x20002ba4
 8006e64:	20002ba0 	.word	0x20002ba0

08006e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b08d      	sub	sp, #52	; 0x34
 8006e6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e6e:	e07f      	b.n	8006f70 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e70:	2208      	movs	r2, #8
 8006e72:	18bb      	adds	r3, r7, r2
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da0f      	bge.n	8006e9a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e7a:	18bb      	adds	r3, r7, r2
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <prvProcessReceivedCommands+0x22>
 8006e86:	b672      	cpsid	i
 8006e88:	e7fe      	b.n	8006e88 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	6858      	ldr	r0, [r3, #4]
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	0019      	movs	r1, r3
 8006e98:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	18bb      	adds	r3, r7, r2
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	db64      	blt.n	8006f6e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ea4:	18bb      	adds	r3, r7, r2
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f7fe fb75 	bl	80055a6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ebc:	1d3b      	adds	r3, r7, #4
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f7ff ff70 	bl	8006da4 <prvSampleTimeNow>
 8006ec4:	0003      	movs	r3, r0
 8006ec6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006ec8:	2308      	movs	r3, #8
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b09      	cmp	r3, #9
 8006ed0:	d84e      	bhi.n	8006f70 <prvProcessReceivedCommands+0x108>
 8006ed2:	009a      	lsls	r2, r3, #2
 8006ed4:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <prvProcessReceivedCommands+0x128>)
 8006ed6:	18d3      	adds	r3, r2, r3
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006edc:	2408      	movs	r4, #8
 8006ede:	193b      	adds	r3, r7, r4
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	18d1      	adds	r1, r2, r3
 8006ee8:	193b      	adds	r3, r7, r4
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	6a38      	ldr	r0, [r7, #32]
 8006ef0:	f7ff ff78 	bl	8006de4 <prvInsertTimerInActiveList>
 8006ef4:	1e03      	subs	r3, r0, #0
 8006ef6:	d03b      	beq.n	8006f70 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	6a3a      	ldr	r2, [r7, #32]
 8006efe:	0010      	movs	r0, r2
 8006f00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d132      	bne.n	8006f70 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f0a:	193b      	adds	r3, r7, r4
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	18d2      	adds	r2, r2, r3
 8006f14:	6a38      	ldr	r0, [r7, #32]
 8006f16:	2300      	movs	r3, #0
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	f7ff fe45 	bl	8006bac <xTimerGenericCommand>
 8006f22:	0003      	movs	r3, r0
 8006f24:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d121      	bne.n	8006f70 <prvProcessReceivedCommands+0x108>
 8006f2c:	b672      	cpsid	i
 8006f2e:	e7fe      	b.n	8006f2e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f30:	2308      	movs	r3, #8
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <prvProcessReceivedCommands+0xde>
 8006f42:	b672      	cpsid	i
 8006f44:	e7fe      	b.n	8006f44 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	18d1      	adds	r1, r2, r3
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	6a38      	ldr	r0, [r7, #32]
 8006f54:	f7ff ff46 	bl	8006de4 <prvInsertTimerInActiveList>
					break;
 8006f58:	e00a      	b.n	8006f70 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	222c      	movs	r2, #44	; 0x2c
 8006f5e:	5c9b      	ldrb	r3, [r3, r2]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f000 fa88 	bl	800747c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f6c:	e000      	b.n	8006f70 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f6e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f70:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <prvProcessReceivedCommands+0x12c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	18b9      	adds	r1, r7, r2
 8006f78:	2200      	movs	r2, #0
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f7fe fd36 	bl	80059ec <xQueueReceive>
 8006f80:	1e03      	subs	r3, r0, #0
 8006f82:	d000      	beq.n	8006f86 <prvProcessReceivedCommands+0x11e>
 8006f84:	e774      	b.n	8006e70 <prvProcessReceivedCommands+0x8>
	}
}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	46c0      	nop			; (mov r8, r8)
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b00b      	add	sp, #44	; 0x2c
 8006f8e:	bd90      	pop	{r4, r7, pc}
 8006f90:	08007970 	.word	0x08007970
 8006f94:	20002ba8 	.word	0x20002ba8

08006f98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f9e:	e03e      	b.n	800701e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fa0:	4b28      	ldr	r3, [pc, #160]	; (8007044 <prvSwitchTimerLists+0xac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006faa:	4b26      	ldr	r3, [pc, #152]	; (8007044 <prvSwitchTimerLists+0xac>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7fe faf4 	bl	80055a6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	0010      	movs	r0, r2
 8006fc6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d126      	bne.n	800701e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	18d3      	adds	r3, r2, r3
 8006fd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d90e      	bls.n	8007000 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <prvSwitchTimerLists+0xac>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	0010      	movs	r0, r2
 8006ffa:	f7fe fa9e 	bl	800553a <vListInsert>
 8006ffe:	e00e      	b.n	800701e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	2300      	movs	r3, #0
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	2300      	movs	r3, #0
 800700a:	2100      	movs	r1, #0
 800700c:	f7ff fdce 	bl	8006bac <xTimerGenericCommand>
 8007010:	0003      	movs	r3, r0
 8007012:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <prvSwitchTimerLists+0x86>
 800701a:	b672      	cpsid	i
 800701c:	e7fe      	b.n	800701c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <prvSwitchTimerLists+0xac>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1bb      	bne.n	8006fa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <prvSwitchTimerLists+0xac>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <prvSwitchTimerLists+0xb0>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b04      	ldr	r3, [pc, #16]	; (8007044 <prvSwitchTimerLists+0xac>)
 8007034:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007036:	4b04      	ldr	r3, [pc, #16]	; (8007048 <prvSwitchTimerLists+0xb0>)
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	601a      	str	r2, [r3, #0]
}
 800703c:	46c0      	nop			; (mov r8, r8)
 800703e:	46bd      	mov	sp, r7
 8007040:	b006      	add	sp, #24
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20002ba0 	.word	0x20002ba0
 8007048:	20002ba4 	.word	0x20002ba4

0800704c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007052:	f000 f8d5 	bl	8007200 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007056:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <prvCheckForValidListAndQueue+0x64>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d123      	bne.n	80070a6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800705e:	4b15      	ldr	r3, [pc, #84]	; (80070b4 <prvCheckForValidListAndQueue+0x68>)
 8007060:	0018      	movs	r0, r3
 8007062:	f7fe fa1f 	bl	80054a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007066:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <prvCheckForValidListAndQueue+0x6c>)
 8007068:	0018      	movs	r0, r3
 800706a:	f7fe fa1b 	bl	80054a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800706e:	4b13      	ldr	r3, [pc, #76]	; (80070bc <prvCheckForValidListAndQueue+0x70>)
 8007070:	4a10      	ldr	r2, [pc, #64]	; (80070b4 <prvCheckForValidListAndQueue+0x68>)
 8007072:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007074:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <prvCheckForValidListAndQueue+0x74>)
 8007076:	4a10      	ldr	r2, [pc, #64]	; (80070b8 <prvCheckForValidListAndQueue+0x6c>)
 8007078:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800707a:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <prvCheckForValidListAndQueue+0x78>)
 800707c:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <prvCheckForValidListAndQueue+0x7c>)
 800707e:	2100      	movs	r1, #0
 8007080:	9100      	str	r1, [sp, #0]
 8007082:	2110      	movs	r1, #16
 8007084:	200a      	movs	r0, #10
 8007086:	f7fe fb0a 	bl	800569e <xQueueGenericCreateStatic>
 800708a:	0002      	movs	r2, r0
 800708c:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <prvCheckForValidListAndQueue+0x64>)
 800708e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007090:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <prvCheckForValidListAndQueue+0x64>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d006      	beq.n	80070a6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007098:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <prvCheckForValidListAndQueue+0x64>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a0b      	ldr	r2, [pc, #44]	; (80070cc <prvCheckForValidListAndQueue+0x80>)
 800709e:	0011      	movs	r1, r2
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7fe fe75 	bl	8005d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070a6:	f000 f8bd 	bl	8007224 <vPortExitCritical>
}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20002ba8 	.word	0x20002ba8
 80070b4:	20002b78 	.word	0x20002b78
 80070b8:	20002b8c 	.word	0x20002b8c
 80070bc:	20002ba0 	.word	0x20002ba0
 80070c0:	20002ba4 	.word	0x20002ba4
 80070c4:	20002c54 	.word	0x20002c54
 80070c8:	20002bb4 	.word	0x20002bb4
 80070cc:	080078e4 	.word	0x080078e4

080070d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3b04      	subs	r3, #4
 80070e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2280      	movs	r2, #128	; 0x80
 80070e6:	0452      	lsls	r2, r2, #17
 80070e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3b04      	subs	r3, #4
 80070ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3b04      	subs	r3, #4
 80070fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070fc:	4a08      	ldr	r2, [pc, #32]	; (8007120 <pxPortInitialiseStack+0x50>)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3b14      	subs	r3, #20
 8007106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3b20      	subs	r3, #32
 8007112:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007114:	68fb      	ldr	r3, [r7, #12]
}
 8007116:	0018      	movs	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	b004      	add	sp, #16
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	08007125 	.word	0x08007125

08007124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800712a:	2300      	movs	r3, #0
 800712c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800712e:	4b08      	ldr	r3, [pc, #32]	; (8007150 <prvTaskExitError+0x2c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	d001      	beq.n	800713a <prvTaskExitError+0x16>
 8007136:	b672      	cpsid	i
 8007138:	e7fe      	b.n	8007138 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800713a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800713c:	46c0      	nop			; (mov r8, r8)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0fc      	beq.n	800713e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	46bd      	mov	sp, r7
 800714a:	b002      	add	sp, #8
 800714c:	bd80      	pop	{r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	20001c14 	.word	0x20001c14

08007154 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007160:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <pxCurrentTCBConst2>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	3020      	adds	r0, #32
 8007168:	f380 8809 	msr	PSP, r0
 800716c:	2002      	movs	r0, #2
 800716e:	f380 8814 	msr	CONTROL, r0
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007178:	46ae      	mov	lr, r5
 800717a:	bc08      	pop	{r3}
 800717c:	bc04      	pop	{r2}
 800717e:	b662      	cpsie	i
 8007180:	4718      	bx	r3
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	46c0      	nop			; (mov r8, r8)
 800718e:	46c0      	nop			; (mov r8, r8)

08007190 <pxCurrentTCBConst2>:
 8007190:	20002678 	.word	0x20002678
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007194:	46c0      	nop			; (mov r8, r8)
 8007196:	46c0      	nop			; (mov r8, r8)

08007198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800719c:	4b0e      	ldr	r3, [pc, #56]	; (80071d8 <xPortStartScheduler+0x40>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <xPortStartScheduler+0x40>)
 80071a2:	21ff      	movs	r1, #255	; 0xff
 80071a4:	0409      	lsls	r1, r1, #16
 80071a6:	430a      	orrs	r2, r1
 80071a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <xPortStartScheduler+0x40>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <xPortStartScheduler+0x40>)
 80071b0:	21ff      	movs	r1, #255	; 0xff
 80071b2:	0609      	lsls	r1, r1, #24
 80071b4:	430a      	orrs	r2, r1
 80071b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80071b8:	f000 f898 	bl	80072ec <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071bc:	4b07      	ldr	r3, [pc, #28]	; (80071dc <xPortStartScheduler+0x44>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80071c2:	f7ff ffcd 	bl	8007160 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071c6:	f7ff f9ab 	bl	8006520 <vTaskSwitchContext>
	prvTaskExitError();
 80071ca:	f7ff ffab 	bl	8007124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	e000ed20 	.word	0xe000ed20
 80071dc:	20001c14 	.word	0x20001c14

080071e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <vPortYield+0x1c>)
 80071e6:	2280      	movs	r2, #128	; 0x80
 80071e8:	0552      	lsls	r2, r2, #21
 80071ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80071ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80071f0:	f3bf 8f6f 	isb	sy
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007204:	b672      	cpsid	i
    uxCriticalNesting++;
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <vPortEnterCritical+0x20>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <vPortEnterCritical+0x20>)
 800720e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007210:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007214:	f3bf 8f6f 	isb	sy
}
 8007218:	46c0      	nop			; (mov r8, r8)
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	20001c14 	.word	0x20001c14

08007224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <vPortExitCritical+0x2c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <vPortExitCritical+0x10>
 8007230:	b672      	cpsid	i
 8007232:	e7fe      	b.n	8007232 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007234:	4b06      	ldr	r3, [pc, #24]	; (8007250 <vPortExitCritical+0x2c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	1e5a      	subs	r2, r3, #1
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <vPortExitCritical+0x2c>)
 800723c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800723e:	4b04      	ldr	r3, [pc, #16]	; (8007250 <vPortExitCritical+0x2c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d100      	bne.n	8007248 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007246:	b662      	cpsie	i
    }
}
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	20001c14 	.word	0x20001c14

08007254 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007254:	f3ef 8010 	mrs	r0, PRIMASK
 8007258:	b672      	cpsid	i
 800725a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800725c:	46c0      	nop			; (mov r8, r8)
 800725e:	0018      	movs	r0, r3

08007260 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007260:	f380 8810 	msr	PRIMASK, r0
 8007264:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007266:	46c0      	nop			; (mov r8, r8)
	...

08007270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007270:	f3ef 8009 	mrs	r0, PSP
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <pxCurrentTCBConst>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	3820      	subs	r0, #32
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800727e:	4644      	mov	r4, r8
 8007280:	464d      	mov	r5, r9
 8007282:	4656      	mov	r6, sl
 8007284:	465f      	mov	r7, fp
 8007286:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007288:	b508      	push	{r3, lr}
 800728a:	b672      	cpsid	i
 800728c:	f7ff f948 	bl	8006520 <vTaskSwitchContext>
 8007290:	b662      	cpsie	i
 8007292:	bc0c      	pop	{r2, r3}
 8007294:	6811      	ldr	r1, [r2, #0]
 8007296:	6808      	ldr	r0, [r1, #0]
 8007298:	3010      	adds	r0, #16
 800729a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800729c:	46a0      	mov	r8, r4
 800729e:	46a9      	mov	r9, r5
 80072a0:	46b2      	mov	sl, r6
 80072a2:	46bb      	mov	fp, r7
 80072a4:	f380 8809 	msr	PSP, r0
 80072a8:	3820      	subs	r0, #32
 80072aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80072ac:	4718      	bx	r3
 80072ae:	46c0      	nop			; (mov r8, r8)

080072b0 <pxCurrentTCBConst>:
 80072b0:	20002678 	.word	0x20002678
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	46c0      	nop			; (mov r8, r8)

080072b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80072be:	f7ff ffc9 	bl	8007254 <ulSetInterruptMaskFromISR>
 80072c2:	0003      	movs	r3, r0
 80072c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072c6:	f7ff f877 	bl	80063b8 <xTaskIncrementTick>
 80072ca:	1e03      	subs	r3, r0, #0
 80072cc:	d003      	beq.n	80072d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <xPortSysTickHandler+0x30>)
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	0552      	lsls	r2, r2, #21
 80072d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	0018      	movs	r0, r3
 80072da:	f7ff ffc1 	bl	8007260 <vClearInterruptMaskFromISR>
}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b002      	add	sp, #8
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <prvSetupTimerInterrupt+0x34>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <prvSetupTimerInterrupt+0x38>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <prvSetupTimerInterrupt+0x3c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	22fa      	movs	r2, #250	; 0xfa
 8007302:	0091      	lsls	r1, r2, #2
 8007304:	0018      	movs	r0, r3
 8007306:	f7f8 feff 	bl	8000108 <__udivsi3>
 800730a:	0003      	movs	r3, r0
 800730c:	001a      	movs	r2, r3
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <prvSetupTimerInterrupt+0x40>)
 8007310:	3a01      	subs	r2, #1
 8007312:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <prvSetupTimerInterrupt+0x34>)
 8007316:	2207      	movs	r2, #7
 8007318:	601a      	str	r2, [r3, #0]
}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	e000e010 	.word	0xe000e010
 8007324:	e000e018 	.word	0xe000e018
 8007328:	20001c08 	.word	0x20001c08
 800732c:	e000e014 	.word	0xe000e014

08007330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800733c:	f7fe ff96 	bl	800626c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007340:	4b49      	ldr	r3, [pc, #292]	; (8007468 <pvPortMalloc+0x138>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007348:	f000 f8e0 	bl	800750c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800734c:	4b47      	ldr	r3, [pc, #284]	; (800746c <pvPortMalloc+0x13c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	4013      	ands	r3, r2
 8007354:	d000      	beq.n	8007358 <pvPortMalloc+0x28>
 8007356:	e079      	b.n	800744c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d012      	beq.n	8007384 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800735e:	2208      	movs	r2, #8
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	189b      	adds	r3, r3, r2
 8007364:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2207      	movs	r2, #7
 800736a:	4013      	ands	r3, r2
 800736c:	d00a      	beq.n	8007384 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2207      	movs	r2, #7
 8007372:	4393      	bics	r3, r2
 8007374:	3308      	adds	r3, #8
 8007376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2207      	movs	r2, #7
 800737c:	4013      	ands	r3, r2
 800737e:	d001      	beq.n	8007384 <pvPortMalloc+0x54>
 8007380:	b672      	cpsid	i
 8007382:	e7fe      	b.n	8007382 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d060      	beq.n	800744c <pvPortMalloc+0x11c>
 800738a:	4b39      	ldr	r3, [pc, #228]	; (8007470 <pvPortMalloc+0x140>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d85b      	bhi.n	800744c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007394:	4b37      	ldr	r3, [pc, #220]	; (8007474 <pvPortMalloc+0x144>)
 8007396:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007398:	4b36      	ldr	r3, [pc, #216]	; (8007474 <pvPortMalloc+0x144>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800739e:	e004      	b.n	80073aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <pvPortMalloc+0x8c>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f1      	bne.n	80073a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073bc:	4b2a      	ldr	r3, [pc, #168]	; (8007468 <pvPortMalloc+0x138>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d042      	beq.n	800744c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2208      	movs	r2, #8
 80073cc:	189b      	adds	r3, r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	2308      	movs	r3, #8
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d916      	bls.n	8007416 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	18d3      	adds	r3, r2, r3
 80073ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2207      	movs	r2, #7
 80073f4:	4013      	ands	r3, r2
 80073f6:	d001      	beq.n	80073fc <pvPortMalloc+0xcc>
 80073f8:	b672      	cpsid	i
 80073fa:	e7fe      	b.n	80073fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	1ad2      	subs	r2, r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	0018      	movs	r0, r3
 8007412:	f000 f8db 	bl	80075cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007416:	4b16      	ldr	r3, [pc, #88]	; (8007470 <pvPortMalloc+0x140>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	4b13      	ldr	r3, [pc, #76]	; (8007470 <pvPortMalloc+0x140>)
 8007422:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007424:	4b12      	ldr	r3, [pc, #72]	; (8007470 <pvPortMalloc+0x140>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b13      	ldr	r3, [pc, #76]	; (8007478 <pvPortMalloc+0x148>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d203      	bcs.n	8007438 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <pvPortMalloc+0x140>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	4b10      	ldr	r3, [pc, #64]	; (8007478 <pvPortMalloc+0x148>)
 8007436:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <pvPortMalloc+0x13c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	431a      	orrs	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800744c:	f7fe ff1a 	bl	8006284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2207      	movs	r2, #7
 8007454:	4013      	ands	r3, r2
 8007456:	d001      	beq.n	800745c <pvPortMalloc+0x12c>
 8007458:	b672      	cpsid	i
 800745a:	e7fe      	b.n	800745a <pvPortMalloc+0x12a>
	return pvReturn;
 800745c:	68fb      	ldr	r3, [r7, #12]
}
 800745e:	0018      	movs	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	b006      	add	sp, #24
 8007464:	bd80      	pop	{r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	200038ac 	.word	0x200038ac
 800746c:	200038b8 	.word	0x200038b8
 8007470:	200038b0 	.word	0x200038b0
 8007474:	200038a4 	.word	0x200038a4
 8007478:	200038b4 	.word	0x200038b4

0800747c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d035      	beq.n	80074fa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800748e:	2308      	movs	r3, #8
 8007490:	425b      	negs	r3, r3
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	18d3      	adds	r3, r2, r3
 8007496:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	4b18      	ldr	r3, [pc, #96]	; (8007504 <vPortFree+0x88>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4013      	ands	r3, r2
 80074a6:	d101      	bne.n	80074ac <vPortFree+0x30>
 80074a8:	b672      	cpsid	i
 80074aa:	e7fe      	b.n	80074aa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <vPortFree+0x3c>
 80074b4:	b672      	cpsid	i
 80074b6:	e7fe      	b.n	80074b6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4b11      	ldr	r3, [pc, #68]	; (8007504 <vPortFree+0x88>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4013      	ands	r3, r2
 80074c2:	d01a      	beq.n	80074fa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d116      	bne.n	80074fa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <vPortFree+0x88>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	43db      	mvns	r3, r3
 80074d6:	401a      	ands	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074dc:	f7fe fec6 	bl	800626c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	4b08      	ldr	r3, [pc, #32]	; (8007508 <vPortFree+0x8c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	18d2      	adds	r2, r2, r3
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <vPortFree+0x8c>)
 80074ec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	0018      	movs	r0, r3
 80074f2:	f000 f86b 	bl	80075cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074f6:	f7fe fec5 	bl	8006284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b004      	add	sp, #16
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	200038b8 	.word	0x200038b8
 8007508:	200038b0 	.word	0x200038b0

0800750c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007512:	23c0      	movs	r3, #192	; 0xc0
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007518:	4b26      	ldr	r3, [pc, #152]	; (80075b4 <prvHeapInit+0xa8>)
 800751a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2207      	movs	r2, #7
 8007520:	4013      	ands	r3, r2
 8007522:	d00c      	beq.n	800753e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3307      	adds	r3, #7
 8007528:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2207      	movs	r2, #7
 800752e:	4393      	bics	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	1ad2      	subs	r2, r2, r3
 8007538:	4b1e      	ldr	r3, [pc, #120]	; (80075b4 <prvHeapInit+0xa8>)
 800753a:	18d3      	adds	r3, r2, r3
 800753c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007542:	4b1d      	ldr	r3, [pc, #116]	; (80075b8 <prvHeapInit+0xac>)
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007548:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <prvHeapInit+0xac>)
 800754a:	2200      	movs	r2, #0
 800754c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	18d3      	adds	r3, r2, r3
 8007554:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007556:	2208      	movs	r2, #8
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2207      	movs	r2, #7
 8007562:	4393      	bics	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4b14      	ldr	r3, [pc, #80]	; (80075bc <prvHeapInit+0xb0>)
 800756a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800756c:	4b13      	ldr	r3, [pc, #76]	; (80075bc <prvHeapInit+0xb0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007574:	4b11      	ldr	r3, [pc, #68]	; (80075bc <prvHeapInit+0xb0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	1ad2      	subs	r2, r2, r3
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800758a:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <prvHeapInit+0xb0>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <prvHeapInit+0xb4>)
 8007598:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <prvHeapInit+0xb8>)
 80075a0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <prvHeapInit+0xbc>)
 80075a4:	2280      	movs	r2, #128	; 0x80
 80075a6:	0612      	lsls	r2, r2, #24
 80075a8:	601a      	str	r2, [r3, #0]
}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b004      	add	sp, #16
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	20002ca4 	.word	0x20002ca4
 80075b8:	200038a4 	.word	0x200038a4
 80075bc:	200038ac 	.word	0x200038ac
 80075c0:	200038b4 	.word	0x200038b4
 80075c4:	200038b0 	.word	0x200038b0
 80075c8:	200038b8 	.word	0x200038b8

080075cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075d4:	4b27      	ldr	r3, [pc, #156]	; (8007674 <prvInsertBlockIntoFreeList+0xa8>)
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e002      	b.n	80075e0 <prvInsertBlockIntoFreeList+0x14>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d8f7      	bhi.n	80075da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	18d3      	adds	r3, r2, r3
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d108      	bne.n	800760e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	18d2      	adds	r2, r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	18d2      	adds	r2, r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d118      	bne.n	8007654 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <prvInsertBlockIntoFreeList+0xac>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d00d      	beq.n	800764a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	18d2      	adds	r2, r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	e008      	b.n	800765c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800764a:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <prvInsertBlockIntoFreeList+0xac>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e003      	b.n	800765c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d002      	beq.n	800766a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	46bd      	mov	sp, r7
 800766e:	b004      	add	sp, #16
 8007670:	bd80      	pop	{r7, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	200038a4 	.word	0x200038a4
 8007678:	200038ac 	.word	0x200038ac

0800767c <__libc_init_array>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	2600      	movs	r6, #0
 8007680:	4d0c      	ldr	r5, [pc, #48]	; (80076b4 <__libc_init_array+0x38>)
 8007682:	4c0d      	ldr	r4, [pc, #52]	; (80076b8 <__libc_init_array+0x3c>)
 8007684:	1b64      	subs	r4, r4, r5
 8007686:	10a4      	asrs	r4, r4, #2
 8007688:	42a6      	cmp	r6, r4
 800768a:	d109      	bne.n	80076a0 <__libc_init_array+0x24>
 800768c:	2600      	movs	r6, #0
 800768e:	f000 f8f9 	bl	8007884 <_init>
 8007692:	4d0a      	ldr	r5, [pc, #40]	; (80076bc <__libc_init_array+0x40>)
 8007694:	4c0a      	ldr	r4, [pc, #40]	; (80076c0 <__libc_init_array+0x44>)
 8007696:	1b64      	subs	r4, r4, r5
 8007698:	10a4      	asrs	r4, r4, #2
 800769a:	42a6      	cmp	r6, r4
 800769c:	d105      	bne.n	80076aa <__libc_init_array+0x2e>
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	00b3      	lsls	r3, r6, #2
 80076a2:	58eb      	ldr	r3, [r5, r3]
 80076a4:	4798      	blx	r3
 80076a6:	3601      	adds	r6, #1
 80076a8:	e7ee      	b.n	8007688 <__libc_init_array+0xc>
 80076aa:	00b3      	lsls	r3, r6, #2
 80076ac:	58eb      	ldr	r3, [r5, r3]
 80076ae:	4798      	blx	r3
 80076b0:	3601      	adds	r6, #1
 80076b2:	e7f2      	b.n	800769a <__libc_init_array+0x1e>
 80076b4:	080079f8 	.word	0x080079f8
 80076b8:	080079f8 	.word	0x080079f8
 80076bc:	080079f8 	.word	0x080079f8
 80076c0:	080079fc 	.word	0x080079fc

080076c4 <__retarget_lock_acquire_recursive>:
 80076c4:	4770      	bx	lr

080076c6 <__retarget_lock_release_recursive>:
 80076c6:	4770      	bx	lr

080076c8 <memcpy>:
 80076c8:	2300      	movs	r3, #0
 80076ca:	b510      	push	{r4, lr}
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d100      	bne.n	80076d2 <memcpy+0xa>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	5ccc      	ldrb	r4, [r1, r3]
 80076d4:	54c4      	strb	r4, [r0, r3]
 80076d6:	3301      	adds	r3, #1
 80076d8:	e7f8      	b.n	80076cc <memcpy+0x4>

080076da <memset>:
 80076da:	0003      	movs	r3, r0
 80076dc:	1882      	adds	r2, r0, r2
 80076de:	4293      	cmp	r3, r2
 80076e0:	d100      	bne.n	80076e4 <memset+0xa>
 80076e2:	4770      	bx	lr
 80076e4:	7019      	strb	r1, [r3, #0]
 80076e6:	3301      	adds	r3, #1
 80076e8:	e7f9      	b.n	80076de <memset+0x4>

080076ea <cleanup_glue>:
 80076ea:	b570      	push	{r4, r5, r6, lr}
 80076ec:	000d      	movs	r5, r1
 80076ee:	6809      	ldr	r1, [r1, #0]
 80076f0:	0004      	movs	r4, r0
 80076f2:	2900      	cmp	r1, #0
 80076f4:	d001      	beq.n	80076fa <cleanup_glue+0x10>
 80076f6:	f7ff fff8 	bl	80076ea <cleanup_glue>
 80076fa:	0029      	movs	r1, r5
 80076fc:	0020      	movs	r0, r4
 80076fe:	f000 f877 	bl	80077f0 <_free_r>
 8007702:	bd70      	pop	{r4, r5, r6, pc}

08007704 <_reclaim_reent>:
 8007704:	4b31      	ldr	r3, [pc, #196]	; (80077cc <_reclaim_reent+0xc8>)
 8007706:	b570      	push	{r4, r5, r6, lr}
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	0004      	movs	r4, r0
 800770c:	4283      	cmp	r3, r0
 800770e:	d049      	beq.n	80077a4 <_reclaim_reent+0xa0>
 8007710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <_reclaim_reent+0x28>
 8007716:	2500      	movs	r5, #0
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	42ab      	cmp	r3, r5
 800771c:	d147      	bne.n	80077ae <_reclaim_reent+0xaa>
 800771e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	2900      	cmp	r1, #0
 8007724:	d002      	beq.n	800772c <_reclaim_reent+0x28>
 8007726:	0020      	movs	r0, r4
 8007728:	f000 f862 	bl	80077f0 <_free_r>
 800772c:	6961      	ldr	r1, [r4, #20]
 800772e:	2900      	cmp	r1, #0
 8007730:	d002      	beq.n	8007738 <_reclaim_reent+0x34>
 8007732:	0020      	movs	r0, r4
 8007734:	f000 f85c 	bl	80077f0 <_free_r>
 8007738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800773a:	2900      	cmp	r1, #0
 800773c:	d002      	beq.n	8007744 <_reclaim_reent+0x40>
 800773e:	0020      	movs	r0, r4
 8007740:	f000 f856 	bl	80077f0 <_free_r>
 8007744:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007746:	2900      	cmp	r1, #0
 8007748:	d002      	beq.n	8007750 <_reclaim_reent+0x4c>
 800774a:	0020      	movs	r0, r4
 800774c:	f000 f850 	bl	80077f0 <_free_r>
 8007750:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007752:	2900      	cmp	r1, #0
 8007754:	d002      	beq.n	800775c <_reclaim_reent+0x58>
 8007756:	0020      	movs	r0, r4
 8007758:	f000 f84a 	bl	80077f0 <_free_r>
 800775c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800775e:	2900      	cmp	r1, #0
 8007760:	d002      	beq.n	8007768 <_reclaim_reent+0x64>
 8007762:	0020      	movs	r0, r4
 8007764:	f000 f844 	bl	80077f0 <_free_r>
 8007768:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800776a:	2900      	cmp	r1, #0
 800776c:	d002      	beq.n	8007774 <_reclaim_reent+0x70>
 800776e:	0020      	movs	r0, r4
 8007770:	f000 f83e 	bl	80077f0 <_free_r>
 8007774:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007776:	2900      	cmp	r1, #0
 8007778:	d002      	beq.n	8007780 <_reclaim_reent+0x7c>
 800777a:	0020      	movs	r0, r4
 800777c:	f000 f838 	bl	80077f0 <_free_r>
 8007780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007782:	2900      	cmp	r1, #0
 8007784:	d002      	beq.n	800778c <_reclaim_reent+0x88>
 8007786:	0020      	movs	r0, r4
 8007788:	f000 f832 	bl	80077f0 <_free_r>
 800778c:	69a3      	ldr	r3, [r4, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d008      	beq.n	80077a4 <_reclaim_reent+0xa0>
 8007792:	0020      	movs	r0, r4
 8007794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007796:	4798      	blx	r3
 8007798:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800779a:	2900      	cmp	r1, #0
 800779c:	d002      	beq.n	80077a4 <_reclaim_reent+0xa0>
 800779e:	0020      	movs	r0, r4
 80077a0:	f7ff ffa3 	bl	80076ea <cleanup_glue>
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
 80077a6:	5949      	ldr	r1, [r1, r5]
 80077a8:	2900      	cmp	r1, #0
 80077aa:	d108      	bne.n	80077be <_reclaim_reent+0xba>
 80077ac:	3504      	adds	r5, #4
 80077ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b0:	68d9      	ldr	r1, [r3, #12]
 80077b2:	2d80      	cmp	r5, #128	; 0x80
 80077b4:	d1f7      	bne.n	80077a6 <_reclaim_reent+0xa2>
 80077b6:	0020      	movs	r0, r4
 80077b8:	f000 f81a 	bl	80077f0 <_free_r>
 80077bc:	e7af      	b.n	800771e <_reclaim_reent+0x1a>
 80077be:	680e      	ldr	r6, [r1, #0]
 80077c0:	0020      	movs	r0, r4
 80077c2:	f000 f815 	bl	80077f0 <_free_r>
 80077c6:	0031      	movs	r1, r6
 80077c8:	e7ee      	b.n	80077a8 <_reclaim_reent+0xa4>
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	20001c18 	.word	0x20001c18

080077d0 <__malloc_lock>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4802      	ldr	r0, [pc, #8]	; (80077dc <__malloc_lock+0xc>)
 80077d4:	f7ff ff76 	bl	80076c4 <__retarget_lock_acquire_recursive>
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	200038bc 	.word	0x200038bc

080077e0 <__malloc_unlock>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	4802      	ldr	r0, [pc, #8]	; (80077ec <__malloc_unlock+0xc>)
 80077e4:	f7ff ff6f 	bl	80076c6 <__retarget_lock_release_recursive>
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	200038bc 	.word	0x200038bc

080077f0 <_free_r>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	0005      	movs	r5, r0
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d010      	beq.n	800781a <_free_r+0x2a>
 80077f8:	1f0c      	subs	r4, r1, #4
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da00      	bge.n	8007802 <_free_r+0x12>
 8007800:	18e4      	adds	r4, r4, r3
 8007802:	0028      	movs	r0, r5
 8007804:	f7ff ffe4 	bl	80077d0 <__malloc_lock>
 8007808:	4a1d      	ldr	r2, [pc, #116]	; (8007880 <_free_r+0x90>)
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d105      	bne.n	800781c <_free_r+0x2c>
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	6014      	str	r4, [r2, #0]
 8007814:	0028      	movs	r0, r5
 8007816:	f7ff ffe3 	bl	80077e0 <__malloc_unlock>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	42a3      	cmp	r3, r4
 800781e:	d908      	bls.n	8007832 <_free_r+0x42>
 8007820:	6821      	ldr	r1, [r4, #0]
 8007822:	1860      	adds	r0, r4, r1
 8007824:	4283      	cmp	r3, r0
 8007826:	d1f3      	bne.n	8007810 <_free_r+0x20>
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	1841      	adds	r1, r0, r1
 800782e:	6021      	str	r1, [r4, #0]
 8007830:	e7ee      	b.n	8007810 <_free_r+0x20>
 8007832:	001a      	movs	r2, r3
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <_free_r+0x4e>
 800783a:	42a3      	cmp	r3, r4
 800783c:	d9f9      	bls.n	8007832 <_free_r+0x42>
 800783e:	6811      	ldr	r1, [r2, #0]
 8007840:	1850      	adds	r0, r2, r1
 8007842:	42a0      	cmp	r0, r4
 8007844:	d10b      	bne.n	800785e <_free_r+0x6e>
 8007846:	6820      	ldr	r0, [r4, #0]
 8007848:	1809      	adds	r1, r1, r0
 800784a:	1850      	adds	r0, r2, r1
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	4283      	cmp	r3, r0
 8007850:	d1e0      	bne.n	8007814 <_free_r+0x24>
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	1841      	adds	r1, r0, r1
 8007858:	6011      	str	r1, [r2, #0]
 800785a:	6053      	str	r3, [r2, #4]
 800785c:	e7da      	b.n	8007814 <_free_r+0x24>
 800785e:	42a0      	cmp	r0, r4
 8007860:	d902      	bls.n	8007868 <_free_r+0x78>
 8007862:	230c      	movs	r3, #12
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	e7d5      	b.n	8007814 <_free_r+0x24>
 8007868:	6821      	ldr	r1, [r4, #0]
 800786a:	1860      	adds	r0, r4, r1
 800786c:	4283      	cmp	r3, r0
 800786e:	d103      	bne.n	8007878 <_free_r+0x88>
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	1841      	adds	r1, r0, r1
 8007876:	6021      	str	r1, [r4, #0]
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	6054      	str	r4, [r2, #4]
 800787c:	e7ca      	b.n	8007814 <_free_r+0x24>
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	200038c0 	.word	0x200038c0

08007884 <_init>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr

08007890 <_fini>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr
