
OsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008198  08008198  00022884  2**0
                  CONTENTS
  4 .ARM          00000000  08008198  08008198  00022884  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008198  08008198  00022884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002884  20000000  080081a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20002884  0800aa24  00022884  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044f4  0800aa24  000244f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00022884  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b742  00000000  00000000  000228ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003994  00000000  00000000  0003dfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00041988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  000431d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045f3  00000000  00000000  000448a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcb6  00000000  00000000  00048e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b72ee  00000000  00000000  00064b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011be37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  0011be88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20002884 	.word	0x20002884
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f94 	.word	0x08007f94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20002888 	.word	0x20002888
 8000104:	08007f94 	.word	0x08007f94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <Display_master_function>:

int was_screen_cleared = 0; // Verifica daca ecranul a fost curatat. Se foloseste pentru treptele de viteza (functioneaza cu logica negativa)
int is_display_busy = 0;	// Verifica daca pe display este incarcat deja o matrice a evita suprapunerile de imagini

void Display_master_function(int mod_lucru_display) // Functia Master care primeste modul de lucru al display-ului si apeleaza functia corespunzatoare
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	switch (mod_lucru_display)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b06      	cmp	r3, #6
 8000400:	d820      	bhi.n	8000444 <Display_master_function+0x50>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	009a      	lsls	r2, r3, #2
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <Display_master_function+0x70>)
 8000408:	18d3      	adds	r3, r2, r3
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	469f      	mov	pc, r3
	{
	case 0:
		Icons_clear_screen(); // Apeleaza functia de curatare a ecranului
 800040e:	f000 fa09 	bl	8000824 <Icons_clear_screen>
		was_screen_cleared = 0;
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <Display_master_function+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
		is_display_busy = 0;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <Display_master_function+0x78>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
		break;
 800041e:	e011      	b.n	8000444 <Display_master_function+0x50>
	case 1:
		Display_stergere_x1();
 8000420:	f000 f83c 	bl	800049c <Display_stergere_x1>
		break;
 8000424:	e00e      	b.n	8000444 <Display_master_function+0x50>
	case 2:
		Display_treapta_1();
 8000426:	f000 f849 	bl	80004bc <Display_treapta_1>
		break;
 800042a:	e00b      	b.n	8000444 <Display_master_function+0x50>
	case 3:
		Display_treapta_2();
 800042c:	f000 f85e 	bl	80004ec <Display_treapta_2>
		break;
 8000430:	e008      	b.n	8000444 <Display_master_function+0x50>
	case 4:
		Display_treapta_3();
 8000432:	f000 f873 	bl	800051c <Display_treapta_3>
		break;
 8000436:	e005      	b.n	8000444 <Display_master_function+0x50>
	case 5:
		Display_spalare_parbriz();
 8000438:	f000 f888 	bl	800054c <Display_spalare_parbriz>
		break;
 800043c:	e002      	b.n	8000444 <Display_master_function+0x50>
	case 6:
		Display_spalare_luneta();
 800043e:	f000 f895 	bl	800056c <Display_spalare_luneta>
		break;
 8000442:	46c0      	nop			; (mov r8, r8)
	}

	if (is_display_busy == 0) // Daca display-ul nu este incarcat atunci curata ecranul si reseteaza ambele variabile de control
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <Display_master_function+0x78>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d107      	bne.n	800045c <Display_master_function+0x68>
	{
		Icons_clear_screen(); // Apeleaza functia de curatare a ecranului
 800044c:	f000 f9ea 	bl	8000824 <Icons_clear_screen>
		was_screen_cleared = 0;
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <Display_master_function+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
		is_display_busy = 0;
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <Display_master_function+0x78>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
	}
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	08008004 	.word	0x08008004
 8000468:	200028a0 	.word	0x200028a0
 800046c:	200028a4 	.word	0x200028a4

08000470 <Display_start_screen>:

int Display_start_screen(int* timer){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	is_display_busy = 1;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <Display_start_screen+0x28>)
 800047a:	2201      	movs	r2, #1
 800047c:	601a      	str	r2, [r3, #0]
	is_display_busy = Icons_start_screen(timer);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	0018      	movs	r0, r3
 8000482:	f000 f883 	bl	800058c <Icons_start_screen>
 8000486:	0002      	movs	r2, r0
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <Display_start_screen+0x28>)
 800048a:	601a      	str	r2, [r3, #0]

	return 1;
 800048c:	2301      	movs	r3, #1
}
 800048e:	0018      	movs	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	200028a4 	.word	0x200028a4

0800049c <Display_stergere_x1>:

// Functiile pentru afisat modul de lucru

void Display_stergere_x1()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	if (is_display_busy == 0)
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <Display_stergere_x1+0x1c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d104      	bne.n	80004b2 <Display_stergere_x1+0x16>
	{
		is_display_busy = 1;
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <Display_stergere_x1+0x1c>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	601a      	str	r2, [r3, #0]
		Icons_load_x1();
 80004ae:	f000 f91d 	bl	80006ec <Icons_load_x1>
	}
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200028a4 	.word	0x200028a4

080004bc <Display_treapta_1>:

void Display_treapta_1()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	is_display_busy = 1;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <Display_treapta_1+0x28>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]

	if (was_screen_cleared != 0)
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <Display_treapta_1+0x2c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d004      	beq.n	80004d8 <Display_treapta_1+0x1c>
	{						 // Verifica daca este nevoie sa curete ecranul pt afisaj
		Icons_clear_screen(); // (trecere de la o treapta la alta)
 80004ce:	f000 f9a9 	bl	8000824 <Icons_clear_screen>
		was_screen_cleared = 0;
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <Display_treapta_1+0x2c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	}

	Icons_load_treapta_1();
 80004d8:	f000 f922 	bl	8000720 <Icons_load_treapta_1>
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	200028a4 	.word	0x200028a4
 80004e8:	200028a0 	.word	0x200028a0

080004ec <Display_treapta_2>:

void Display_treapta_2()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	is_display_busy = 1;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <Display_treapta_2+0x28>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]

	if (was_screen_cleared != 1)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <Display_treapta_2+0x2c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d004      	beq.n	8000508 <Display_treapta_2+0x1c>
	{						 // Verifica daca este nevoie sa curete ecranul pt afisaj
		Icons_clear_screen(); // (trecere de la o treapta la alta)
 80004fe:	f000 f991 	bl	8000824 <Icons_clear_screen>
		was_screen_cleared = 1;
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <Display_treapta_2+0x2c>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
	}

	Icons_load_treapta_2();
 8000508:	f000 f924 	bl	8000754 <Icons_load_treapta_2>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	200028a4 	.word	0x200028a4
 8000518:	200028a0 	.word	0x200028a0

0800051c <Display_treapta_3>:

void Display_treapta_3()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	is_display_busy = 1;
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <Display_treapta_3+0x28>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]

	if (was_screen_cleared != 2)
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <Display_treapta_3+0x2c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d004      	beq.n	8000538 <Display_treapta_3+0x1c>
	{						 // Verifica daca este nevoie sa curete ecranul pt afisaj
		Icons_clear_screen(); // (trecere de la o treapta la alta)
 800052e:	f000 f979 	bl	8000824 <Icons_clear_screen>
		was_screen_cleared = 2;
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <Display_treapta_3+0x2c>)
 8000534:	2202      	movs	r2, #2
 8000536:	601a      	str	r2, [r3, #0]
	}

	Icons_load_treapta_3();
 8000538:	f000 f926 	bl	8000788 <Icons_load_treapta_3>
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	200028a4 	.word	0x200028a4
 8000548:	200028a0 	.word	0x200028a0

0800054c <Display_spalare_parbriz>:

void Display_spalare_parbriz()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	if (is_display_busy == 0)
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <Display_spalare_parbriz+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d104      	bne.n	8000562 <Display_spalare_parbriz+0x16>
	{
		is_display_busy = 1;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <Display_spalare_parbriz+0x1c>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
		Icons_load_spalare_parbriz();
 800055e:	f000 f92d 	bl	80007bc <Icons_load_spalare_parbriz>
	}
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200028a4 	.word	0x200028a4

0800056c <Display_spalare_luneta>:

void Display_spalare_luneta()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	if (is_display_busy == 0)
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <Display_spalare_luneta+0x1c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d104      	bne.n	8000582 <Display_spalare_luneta+0x16>
	{
		is_display_busy = 1;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <Display_spalare_luneta+0x1c>)
 800057a:	2201      	movs	r2, #1
 800057c:	601a      	str	r2, [r3, #0]
		Icons_load_spalare_luneta();
 800057e:	f000 f937 	bl	80007f0 <Icons_load_spalare_luneta>
	}
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200028a4 	.word	0x200028a4

0800058c <Icons_start_screen>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////   Functiile de incarcat in buffer   ////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Icons_start_screen(int *timer) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af04      	add	r7, sp, #16
 8000592:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e096      	b.n	80006c8 <Icons_start_screen+0x13c>

		if (i == 0) {
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d11c      	bne.n	80005da <Icons_start_screen+0x4e>
			*timer = 0;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
			st7565_drawbitmap(buffer, 0, 0, starter_1, 128, 64, 1);
 80005a6:	4b4d      	ldr	r3, [pc, #308]	; (80006dc <Icons_start_screen+0x150>)
 80005a8:	484d      	ldr	r0, [pc, #308]	; (80006e0 <Icons_start_screen+0x154>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	9202      	str	r2, [sp, #8]
 80005ae:	2240      	movs	r2, #64	; 0x40
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	f000 fc85 	bl	8000ec8 <st7565_drawbitmap>
			st7565_write_buffer(buffer);
 80005be:	4b48      	ldr	r3, [pc, #288]	; (80006e0 <Icons_start_screen+0x154>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fa41 	bl	8000a48 <st7565_write_buffer>
			while (*timer < 500)
 80005c6:	e000      	b.n	80005ca <Icons_start_screen+0x3e>
				continue;
 80005c8:	46c0      	nop			; (mov r8, r8)
			while (*timer < 500)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	23fa      	movs	r3, #250	; 0xfa
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	429a      	cmp	r2, r3
 80005d4:	dbf8      	blt.n	80005c8 <Icons_start_screen+0x3c>
			Icons_clear_screen();
 80005d6:	f000 f925 	bl	8000824 <Icons_clear_screen>

		}

		*timer = 0;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
		st7565_drawbitmap(buffer, 0, 0, starter_2, 128, 64, 1);
 80005e0:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <Icons_start_screen+0x158>)
 80005e2:	483f      	ldr	r0, [pc, #252]	; (80006e0 <Icons_start_screen+0x154>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	9202      	str	r2, [sp, #8]
 80005e8:	2240      	movs	r2, #64	; 0x40
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	f000 fc68 	bl	8000ec8 <st7565_drawbitmap>
		st7565_write_buffer(buffer);
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <Icons_start_screen+0x154>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fa24 	bl	8000a48 <st7565_write_buffer>
		while (*timer < 500)
 8000600:	e000      	b.n	8000604 <Icons_start_screen+0x78>
			continue;
 8000602:	46c0      	nop			; (mov r8, r8)
		while (*timer < 500)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	23fa      	movs	r3, #250	; 0xfa
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf8      	blt.n	8000602 <Icons_start_screen+0x76>
		Icons_clear_screen();
 8000610:	f000 f908 	bl	8000824 <Icons_clear_screen>

		*timer = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
		st7565_drawbitmap(buffer, 0, 0, starter_3, 128, 64, 1);
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <Icons_start_screen+0x15c>)
 800061c:	4830      	ldr	r0, [pc, #192]	; (80006e0 <Icons_start_screen+0x154>)
 800061e:	2201      	movs	r2, #1
 8000620:	9202      	str	r2, [sp, #8]
 8000622:	2240      	movs	r2, #64	; 0x40
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f000 fc4b 	bl	8000ec8 <st7565_drawbitmap>
		st7565_write_buffer(buffer);
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <Icons_start_screen+0x154>)
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fa07 	bl	8000a48 <st7565_write_buffer>
		while (*timer < 500)
 800063a:	e000      	b.n	800063e <Icons_start_screen+0xb2>
			continue;
 800063c:	46c0      	nop			; (mov r8, r8)
		while (*timer < 500)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	23fa      	movs	r3, #250	; 0xfa
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	429a      	cmp	r2, r3
 8000648:	dbf8      	blt.n	800063c <Icons_start_screen+0xb0>
		Icons_clear_screen();
 800064a:	f000 f8eb 	bl	8000824 <Icons_clear_screen>

		*timer = 0;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
		st7565_drawbitmap(buffer, 0, 0, starter_2, 128, 64, 1);
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <Icons_start_screen+0x158>)
 8000656:	4822      	ldr	r0, [pc, #136]	; (80006e0 <Icons_start_screen+0x154>)
 8000658:	2201      	movs	r2, #1
 800065a:	9202      	str	r2, [sp, #8]
 800065c:	2240      	movs	r2, #64	; 0x40
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	f000 fc2e 	bl	8000ec8 <st7565_drawbitmap>
		st7565_write_buffer(buffer);
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <Icons_start_screen+0x154>)
 800066e:	0018      	movs	r0, r3
 8000670:	f000 f9ea 	bl	8000a48 <st7565_write_buffer>
		while (*timer < 500)
 8000674:	e000      	b.n	8000678 <Icons_start_screen+0xec>
			continue;
 8000676:	46c0      	nop			; (mov r8, r8)
		while (*timer < 500)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	23fa      	movs	r3, #250	; 0xfa
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	429a      	cmp	r2, r3
 8000682:	dbf8      	blt.n	8000676 <Icons_start_screen+0xea>
		Icons_clear_screen();
 8000684:	f000 f8ce 	bl	8000824 <Icons_clear_screen>

		*timer = 0;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		st7565_drawbitmap(buffer, 0, 0, starter_1, 128, 64, 1);
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <Icons_start_screen+0x150>)
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <Icons_start_screen+0x154>)
 8000692:	2201      	movs	r2, #1
 8000694:	9202      	str	r2, [sp, #8]
 8000696:	2240      	movs	r2, #64	; 0x40
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	9200      	str	r2, [sp, #0]
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	f000 fc11 	bl	8000ec8 <st7565_drawbitmap>
		st7565_write_buffer(buffer);
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <Icons_start_screen+0x154>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 f9cd 	bl	8000a48 <st7565_write_buffer>
		while (*timer < 500)
 80006ae:	e000      	b.n	80006b2 <Icons_start_screen+0x126>
			continue;
 80006b0:	46c0      	nop			; (mov r8, r8)
		while (*timer < 500)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	23fa      	movs	r3, #250	; 0xfa
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	429a      	cmp	r2, r3
 80006bc:	dbf8      	blt.n	80006b0 <Icons_start_screen+0x124>
		Icons_clear_screen();
 80006be:	f000 f8b1 	bl	8000824 <Icons_clear_screen>
	for (int i = 0; i < 3; i++) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	dc00      	bgt.n	80006d0 <Icons_start_screen+0x144>
 80006ce:	e764      	b.n	800059a <Icons_start_screen+0xe>
	}
	return 0;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	0018      	movs	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b004      	add	sp, #16
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20002400 	.word	0x20002400
 80006e4:	20000400 	.word	0x20000400
 80006e8:	20000800 	.word	0x20000800

080006ec <Icons_load_x1>:

void Icons_load_x1() // Functia de incarcare a matricei pentru Wipe x1
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_x1, 128, 64, 1); // Muta matricea in buffer
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <Icons_load_x1+0x2c>)
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <Icons_load_x1+0x30>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	9202      	str	r2, [sp, #8]
 80006fa:	2240      	movs	r2, #64	; 0x40
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	9200      	str	r2, [sp, #0]
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	f000 fbdf 	bl	8000ec8 <st7565_drawbitmap>
	st7565_write_buffer(buffer);						 // Afiseaza pe ecran
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <Icons_load_x1+0x30>)
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f99b 	bl	8000a48 <st7565_write_buffer>
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000c00 	.word	0x20000c00
 800071c:	20002400 	.word	0x20002400

08000720 <Icons_load_treapta_1>:

void Icons_load_treapta_1() // Functia de incarcare a matricei pentru Treapta 1 de viteza
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_treapta_1, 128, 64, 1); // Muta matricea in buffer
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <Icons_load_treapta_1+0x2c>)
 8000728:	4809      	ldr	r0, [pc, #36]	; (8000750 <Icons_load_treapta_1+0x30>)
 800072a:	2201      	movs	r2, #1
 800072c:	9202      	str	r2, [sp, #8]
 800072e:	2240      	movs	r2, #64	; 0x40
 8000730:	9201      	str	r2, [sp, #4]
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	f000 fbc5 	bl	8000ec8 <st7565_drawbitmap>
	st7565_write_buffer(buffer);							// Afiseaza pe ecran
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <Icons_load_treapta_1+0x30>)
 8000740:	0018      	movs	r0, r3
 8000742:	f000 f981 	bl	8000a48 <st7565_write_buffer>
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20001000 	.word	0x20001000
 8000750:	20002400 	.word	0x20002400

08000754 <Icons_load_treapta_2>:

void Icons_load_treapta_2() // Functia de incarcare a matricei pentru Treapta 2 de viteza
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_treapta_2, 128, 64, 1); // Muta matricea in buffer
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <Icons_load_treapta_2+0x2c>)
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <Icons_load_treapta_2+0x30>)
 800075e:	2201      	movs	r2, #1
 8000760:	9202      	str	r2, [sp, #8]
 8000762:	2240      	movs	r2, #64	; 0x40
 8000764:	9201      	str	r2, [sp, #4]
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	f000 fbab 	bl	8000ec8 <st7565_drawbitmap>
	st7565_write_buffer(buffer);							// Afiseaza pe ecran
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <Icons_load_treapta_2+0x30>)
 8000774:	0018      	movs	r0, r3
 8000776:	f000 f967 	bl	8000a48 <st7565_write_buffer>
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20001400 	.word	0x20001400
 8000784:	20002400 	.word	0x20002400

08000788 <Icons_load_treapta_3>:

void Icons_load_treapta_3() // Functia de incarcare a matricei pentru Treapta 3 de viteza
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_treapta_3, 128, 64, 1); // Muta matricea in buffer
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <Icons_load_treapta_3+0x2c>)
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <Icons_load_treapta_3+0x30>)
 8000792:	2201      	movs	r2, #1
 8000794:	9202      	str	r2, [sp, #8]
 8000796:	2240      	movs	r2, #64	; 0x40
 8000798:	9201      	str	r2, [sp, #4]
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	f000 fb91 	bl	8000ec8 <st7565_drawbitmap>
	st7565_write_buffer(buffer);							// Afiseaza pe ecran
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <Icons_load_treapta_3+0x30>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f94d 	bl	8000a48 <st7565_write_buffer>
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20001800 	.word	0x20001800
 80007b8:	20002400 	.word	0x20002400

080007bc <Icons_load_spalare_parbriz>:

void Icons_load_spalare_parbriz() // Functia de incarcare a matricei pentru Spalare Parbriz
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_spalare_parbriz, 128, 64, 1); // Muta matricea in buffer
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <Icons_load_spalare_parbriz+0x2c>)
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <Icons_load_spalare_parbriz+0x30>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	9202      	str	r2, [sp, #8]
 80007ca:	2240      	movs	r2, #64	; 0x40
 80007cc:	9201      	str	r2, [sp, #4]
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	9200      	str	r2, [sp, #0]
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	f000 fb77 	bl	8000ec8 <st7565_drawbitmap>
	st7565_write_buffer(buffer);							// Afiseaza pe ecran
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <Icons_load_spalare_parbriz+0x30>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f933 	bl	8000a48 <st7565_write_buffer>
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20001c00 	.word	0x20001c00
 80007ec:	20002400 	.word	0x20002400

080007f0 <Icons_load_spalare_luneta>:

void Icons_load_spalare_luneta() // Functia de incarcare a matricei pentru Spalare Luneta
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_spalare_luneta, 128, 64, 1); // Muta matricea in buffer
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <Icons_load_spalare_luneta+0x2c>)
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <Icons_load_spalare_luneta+0x30>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	9202      	str	r2, [sp, #8]
 80007fe:	2240      	movs	r2, #64	; 0x40
 8000800:	9201      	str	r2, [sp, #4]
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	9200      	str	r2, [sp, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	f000 fb5d 	bl	8000ec8 <st7565_drawbitmap>
	st7565_write_buffer(buffer);							// Afiseaza pe ecran
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <Icons_load_spalare_luneta+0x30>)
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f919 	bl	8000a48 <st7565_write_buffer>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20002000 	.word	0x20002000
 8000820:	20002400 	.word	0x20002400

08000824 <Icons_clear_screen>:

void Icons_clear_screen() // Functia pentru curatat ecranul
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	st7565_clear_buffer(buffer); // Goleste buffer
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <Icons_clear_screen+0x1c>)
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fad2 	bl	8000dd4 <st7565_clear_buffer>
	st7565_write_buffer(buffer); // Afiseaza pe ecran buffer-ul gol (clear screen)
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <Icons_clear_screen+0x1c>)
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f908 	bl	8000a48 <st7565_write_buffer>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20002400 	.word	0x20002400

08000844 <Servo_master_function>:
#include "main.h"

#define ARRAY_SIZE 48

// Master function
int Servo_master_function(int mod_servo, int *timer, int *abort, int *is_first_swipe) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	603b      	str	r3, [r7, #0]
	int mod_lucru_sistem = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
	switch (mod_servo) {
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b05      	cmp	r3, #5
 800085a:	d861      	bhi.n	8000920 <Servo_master_function+0xdc>
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	009a      	lsls	r2, r3, #2
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <Servo_master_function+0xe8>)
 8000862:	18d3      	adds	r3, r2, r3
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	469f      	mov	pc, r3
	case 0:
		TIM3->CCR4 = 500; // 0%
 8000868:	4b31      	ldr	r3, [pc, #196]	; (8000930 <Servo_master_function+0xec>)
 800086a:	22fa      	movs	r2, #250	; 0xfa
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	641a      	str	r2, [r3, #64]	; 0x40
		mod_lucru_sistem = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
		break;
 8000874:	e054      	b.n	8000920 <Servo_master_function+0xdc>
	case 1: // swipe x1
		Servo_up_movement(timer, 0, 300, abort, is_first_swipe);
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	2396      	movs	r3, #150	; 0x96
 800087a:	005a      	lsls	r2, r3, #1
 800087c:	68b8      	ldr	r0, [r7, #8]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	000b      	movs	r3, r1
 8000884:	2100      	movs	r1, #0
 8000886:	f000 f855 	bl	8000934 <Servo_up_movement>
		mod_lucru_sistem = Servo_down_movement(timer, 0, 300, abort);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2296      	movs	r2, #150	; 0x96
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	68b8      	ldr	r0, [r7, #8]
 8000892:	2100      	movs	r1, #0
 8000894:	f000 f87e 	bl	8000994 <Servo_down_movement>
 8000898:	0003      	movs	r3, r0
 800089a:	617b      	str	r3, [r7, #20]
		break;
 800089c:	e040      	b.n	8000920 <Servo_master_function+0xdc>
	case 2: // treapta 1
		Servo_up_movement(timer, 1000, 125, abort, is_first_swipe);
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	23fa      	movs	r3, #250	; 0xfa
 80008a2:	0099      	lsls	r1, r3, #2
 80008a4:	68b8      	ldr	r0, [r7, #8]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	0013      	movs	r3, r2
 80008ac:	227d      	movs	r2, #125	; 0x7d
 80008ae:	f000 f841 	bl	8000934 <Servo_up_movement>
		Servo_down_movement(timer, 100, 100, abort);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68b8      	ldr	r0, [r7, #8]
 80008b6:	2264      	movs	r2, #100	; 0x64
 80008b8:	2164      	movs	r1, #100	; 0x64
 80008ba:	f000 f86b 	bl	8000994 <Servo_down_movement>
		mod_lucru_sistem = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
		break;
 80008c2:	e02d      	b.n	8000920 <Servo_master_function+0xdc>
	case 3: // treapta 2
		Servo_up_movement(timer, 500, 175, abort, is_first_swipe);
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	23fa      	movs	r3, #250	; 0xfa
 80008c8:	0059      	lsls	r1, r3, #1
 80008ca:	68b8      	ldr	r0, [r7, #8]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	0013      	movs	r3, r2
 80008d2:	22af      	movs	r2, #175	; 0xaf
 80008d4:	f000 f82e 	bl	8000934 <Servo_up_movement>
		Servo_down_movement(timer, 75, 200, abort);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68b8      	ldr	r0, [r7, #8]
 80008dc:	22c8      	movs	r2, #200	; 0xc8
 80008de:	214b      	movs	r1, #75	; 0x4b
 80008e0:	f000 f858 	bl	8000994 <Servo_down_movement>
		mod_lucru_sistem = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
		break;
 80008e8:	e01a      	b.n	8000920 <Servo_master_function+0xdc>
	case 4: // treapta 3
		Servo_up_movement(timer, 100, 175, abort, is_first_swipe);
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	0013      	movs	r3, r2
 80008f4:	22af      	movs	r2, #175	; 0xaf
 80008f6:	2164      	movs	r1, #100	; 0x64
 80008f8:	f000 f81c 	bl	8000934 <Servo_up_movement>
		Servo_down_movement(timer, 75, 200, abort);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68b8      	ldr	r0, [r7, #8]
 8000900:	22c8      	movs	r2, #200	; 0xc8
 8000902:	214b      	movs	r1, #75	; 0x4b
 8000904:	f000 f846 	bl	8000994 <Servo_down_movement>
		mod_lucru_sistem = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
		break;
 800090c:	e008      	b.n	8000920 <Servo_master_function+0xdc>
	case 5: // spalare
		mod_lucru_sistem = Servo_spalare(timer, abort, is_first_swipe);
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	0018      	movs	r0, r3
 8000916:	f000 f867 	bl	80009e8 <Servo_spalare>
 800091a:	0003      	movs	r3, r0
 800091c:	617b      	str	r3, [r7, #20]
		break;
 800091e:	46c0      	nop			; (mov r8, r8)
	}

	return mod_lucru_sistem;
 8000920:	697b      	ldr	r3, [r7, #20]
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b006      	add	sp, #24
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	08008020 	.word	0x08008020
 8000930:	40000400 	.word	0x40000400

08000934 <Servo_up_movement>:

// Functiile pentru modul de lucru al servo motorului

int Servo_up_movement(int *timer, int start_time, int end_time, int *abort, int *is_first_swipe) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	603b      	str	r3, [r7, #0]
	*timer = 0; // Reseteaza timer-ul
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
	if (*is_first_swipe == 0) {
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d106      	bne.n	800095e <Servo_up_movement+0x2a>
		while (*timer < start_time) {
 8000950:	e000      	b.n	8000954 <Servo_up_movement+0x20>
			continue;
 8000952:	46c0      	nop			; (mov r8, r8)
		while (*timer < start_time) {
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	429a      	cmp	r2, r3
 800095c:	dcf9      	bgt.n	8000952 <Servo_up_movement+0x1e>
		}
	}
	*timer = 0;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
	TIM3->CCR4 = 2400;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <Servo_up_movement+0x5c>)
 8000966:	2296      	movs	r2, #150	; 0x96
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	641a      	str	r2, [r3, #64]	; 0x40
	while (*timer < end_time) {
 800096c:	e000      	b.n	8000970 <Servo_up_movement+0x3c>
		continue;
 800096e:	46c0      	nop			; (mov r8, r8)
	while (*timer < end_time) {
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	dcf9      	bgt.n	800096e <Servo_up_movement+0x3a>
	}

	if (*abort) // Daca se primeste semnalul de abort se iese fortat din functie
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <Servo_up_movement+0x52>
	{
		return 0;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <Servo_up_movement+0x54>
	}

	return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40000400 	.word	0x40000400

08000994 <Servo_down_movement>:

int Servo_down_movement(int *timer, int start_time, int end_time, int *abort) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	*timer = 0; // Reseteaza timer-ul
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
	while (*timer < start_time) {
 80009a8:	e000      	b.n	80009ac <Servo_down_movement+0x18>
		continue;
 80009aa:	46c0      	nop			; (mov r8, r8)
	while (*timer < start_time) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	dcf9      	bgt.n	80009aa <Servo_down_movement+0x16>
	}
	TIM3->CCR4 = 500; // se trece la urmatorul pas
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <Servo_down_movement+0x50>)
 80009b8:	22fa      	movs	r2, #250	; 0xfa
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
	while (*timer < end_time) {
 80009be:	e000      	b.n	80009c2 <Servo_down_movement+0x2e>
		continue;
 80009c0:	46c0      	nop			; (mov r8, r8)
	while (*timer < end_time) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dcf9      	bgt.n	80009c0 <Servo_down_movement+0x2c>
	}

	if (*abort) // Daca se primeste semnalul de abort se iese fortat din functie
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <Servo_down_movement+0x44>
	{
		return 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	e000      	b.n	80009da <Servo_down_movement+0x46>
	}

	return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40000400 	.word	0x40000400

080009e8 <Servo_spalare>:

int Servo_spalare(int *timer, int *abort, int* is_first_swipe) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e01d      	b.n	8000a36 <Servo_spalare+0x4e>
		*timer = 0;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
		Servo_up_movement(timer, 100, 300, abort, is_first_swipe);
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	2396      	movs	r3, #150	; 0x96
 8000a04:	005a      	lsls	r2, r3, #1
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	000b      	movs	r3, r1
 8000a0e:	2164      	movs	r1, #100	; 0x64
 8000a10:	f7ff ff90 	bl	8000934 <Servo_up_movement>
		Servo_down_movement(timer, 150, 200, abort);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	22c8      	movs	r2, #200	; 0xc8
 8000a1a:	2196      	movs	r1, #150	; 0x96
 8000a1c:	f7ff ffba 	bl	8000994 <Servo_down_movement>

		while (*timer < 600) {
 8000a20:	e000      	b.n	8000a24 <Servo_spalare+0x3c>
			continue;
 8000a22:	46c0      	nop			; (mov r8, r8)
		while (*timer < 600) {
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	2396      	movs	r3, #150	; 0x96
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbf8      	blt.n	8000a22 <Servo_spalare+0x3a>
	for (int i = 0; i < 3; i++) {
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	ddde      	ble.n	80009fa <Servo_spalare+0x12>
		}
	}

	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b006      	add	sp, #24
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 8000a50:	230e      	movs	r3, #14
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e060      	b.n	8000b1c <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8000a5a:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <st7565_write_buffer+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 fb17 	bl	8003094 <HAL_GPIO_WritePin>
 8000a66:	230e      	movs	r3, #14
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <st7565_write_buffer+0xec>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	2250      	movs	r2, #80	; 0x50
 8000a72:	4252      	negs	r2, r2
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 f85d 	bl	8000b38 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <st7565_write_buffer+0xe8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 fb05 	bl	8003094 <HAL_GPIO_WritePin>
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f854 	bl	8000b38 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <st7565_write_buffer+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 fafc 	bl	8003094 <HAL_GPIO_WritePin>
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f000 f84b 	bl	8000b38 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <st7565_write_buffer+0xe8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 faf3 	bl	8003094 <HAL_GPIO_WritePin>
 8000aae:	20e0      	movs	r0, #224	; 0xe0
 8000ab0:	f000 f842 	bl	8000b38 <st7565_sendbyte>
		DATA(0xff);
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <st7565_write_buffer+0xe8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 faea 	bl	8003094 <HAL_GPIO_WritePin>
 8000ac0:	20ff      	movs	r0, #255	; 0xff
 8000ac2:	f000 f839 	bl	8000b38 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e019      	b.n	8000b04 <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <st7565_write_buffer+0xe8>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 fadc 	bl	8003094 <HAL_GPIO_WritePin>
 8000adc:	230e      	movs	r3, #14
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	01da      	lsls	r2, r3, #7
 8000ae4:	240f      	movs	r4, #15
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	001a      	movs	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	189b      	adds	r3, r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 f81f 	bl	8000b38 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	3201      	adds	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dadf      	bge.n	8000ad0 <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 8000b10:	210e      	movs	r1, #14
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	3201      	adds	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	230e      	movs	r3, #14
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d999      	bls.n	8000a5a <st7565_write_buffer+0x12>
		}
	}
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b005      	add	sp, #20
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	48000800 	.word	0x48000800
 8000b34:	20002800 	.word	0x20002800

08000b38 <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8000b44:	1df9      	adds	r1, r7, #7
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <st7565_sendbyte+0x20>)
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f003 f978 	bl	8003e40 <HAL_SPI_Transmit>
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000292c 	.word	0x2000292c

08000b5c <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	0059      	lsls	r1, r3, #1
 8000b64:	2390      	movs	r3, #144	; 0x90
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	2201      	movs	r2, #1
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f002 fa92 	bl	8003094 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8000b70:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <st7565_init+0x150>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 fa8c 	bl	8003094 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	0099      	lsls	r1, r3, #2
 8000b80:	2390      	movs	r3, #144	; 0x90
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	2201      	movs	r2, #1
 8000b86:	0018      	movs	r0, r3
 8000b88:	f002 fa84 	bl	8003094 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000b8c:	4b48      	ldr	r3, [pc, #288]	; (8000cb0 <st7565_init+0x154>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 fa7e 	bl	8003094 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8000b98:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <st7565_init+0x154>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	; 0x40
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 fa78 	bl	8003094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	0099      	lsls	r1, r3, #2
 8000ba8:	2390      	movs	r3, #144	; 0x90
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	2200      	movs	r2, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f002 fa70 	bl	8003094 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000bb4:	23fa      	movs	r3, #250	; 0xfa
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f001 fa4b 	bl	8002054 <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	0099      	lsls	r1, r3, #2
 8000bc2:	2390      	movs	r3, #144	; 0x90
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f002 fa63 	bl	8003094 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <st7565_init+0x150>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fa5d 	bl	8003094 <HAL_GPIO_WritePin>
 8000bda:	20a3      	movs	r0, #163	; 0xa3
 8000bdc:	f7ff ffac 	bl	8000b38 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8000be0:	4b32      	ldr	r3, [pc, #200]	; (8000cac <st7565_init+0x150>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 fa54 	bl	8003094 <HAL_GPIO_WritePin>
 8000bec:	20a0      	movs	r0, #160	; 0xa0
 8000bee:	f7ff ffa3 	bl	8000b38 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <st7565_init+0x150>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f002 fa4b 	bl	8003094 <HAL_GPIO_WritePin>
 8000bfe:	20c0      	movs	r0, #192	; 0xc0
 8000c00:	f7ff ff9a 	bl	8000b38 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <st7565_init+0x150>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 fa42 	bl	8003094 <HAL_GPIO_WritePin>
 8000c10:	2040      	movs	r0, #64	; 0x40
 8000c12:	f7ff ff91 	bl	8000b38 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <st7565_init+0x150>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fa39 	bl	8003094 <HAL_GPIO_WritePin>
 8000c22:	202c      	movs	r0, #44	; 0x2c
 8000c24:	f7ff ff88 	bl	8000b38 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8000c28:	2032      	movs	r0, #50	; 0x32
 8000c2a:	f001 fa13 	bl	8002054 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <st7565_init+0x150>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	0018      	movs	r0, r3
 8000c36:	f002 fa2d 	bl	8003094 <HAL_GPIO_WritePin>
 8000c3a:	202e      	movs	r0, #46	; 0x2e
 8000c3c:	f7ff ff7c 	bl	8000b38 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8000c40:	2032      	movs	r0, #50	; 0x32
 8000c42:	f001 fa07 	bl	8002054 <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <st7565_init+0x150>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 fa21 	bl	8003094 <HAL_GPIO_WritePin>
 8000c52:	202f      	movs	r0, #47	; 0x2f
 8000c54:	f7ff ff70 	bl	8000b38 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f001 f9fb 	bl	8002054 <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <st7565_init+0x150>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 fa15 	bl	8003094 <HAL_GPIO_WritePin>
 8000c6a:	2026      	movs	r0, #38	; 0x26
 8000c6c:	f7ff ff64 	bl	8000b38 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <st7565_init+0x150>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0018      	movs	r0, r3
 8000c78:	f002 fa0c 	bl	8003094 <HAL_GPIO_WritePin>
 8000c7c:	20af      	movs	r0, #175	; 0xaf
 8000c7e:	f7ff ff5b 	bl	8000b38 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <st7565_init+0x150>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f002 fa03 	bl	8003094 <HAL_GPIO_WritePin>
 8000c8e:	20a4      	movs	r0, #164	; 0xa4
 8000c90:	f7ff ff52 	bl	8000b38 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f81d 	bl	8000cd4 <st7565_set_brightness>
 	st7565_clear_screen();
 8000c9a:	f000 f83f 	bl	8000d1c <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <st7565_init+0x158>)
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 f897 	bl	8000dd4 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	20002400 	.word	0x20002400

08000cb8 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	0059      	lsls	r1, r3, #1
 8000cc0:	2390      	movs	r3, #144	; 0x90
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f002 f9e4 	bl	8003094 <HAL_GPIO_WritePin>
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	0002      	movs	r2, r0
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <st7565_set_brightness+0x44>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f002 f9d4 	bl	8003094 <HAL_GPIO_WritePin>
 8000cec:	2081      	movs	r0, #129	; 0x81
 8000cee:	f7ff ff23 	bl	8000b38 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <st7565_set_brightness+0x44>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f002 f9cb 	bl	8003094 <HAL_GPIO_WritePin>
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	223f      	movs	r2, #63	; 0x3f
 8000d04:	4013      	ands	r3, r2
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff15 	bl	8000b38 <st7565_sendbyte>
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	48000800 	.word	0x48000800

08000d1c <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e049      	b.n	8000dbe <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <st7565_clear_screen+0xb4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	0018      	movs	r0, r3
 8000d32:	f002 f9af 	bl	8003094 <HAL_GPIO_WritePin>
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2250      	movs	r2, #80	; 0x50
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fef8 	bl	8000b38 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e02d      	b.n	8000dac <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <st7565_clear_screen+0xb4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 f99c 	bl	8003094 <HAL_GPIO_WritePin>
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	220f      	movs	r2, #15
 8000d62:	4013      	ands	r3, r2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fee6 	bl	8000b38 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <st7565_clear_screen+0xb4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 f98e 	bl	8003094 <HAL_GPIO_WritePin>
 8000d78:	1dbb      	adds	r3, r7, #6
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	2210      	movs	r2, #16
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fed4 	bl	8000b38 <st7565_sendbyte>
			DATA(0x0);
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <st7565_clear_screen+0xb4>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 f97c 	bl	8003094 <HAL_GPIO_WritePin>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fecb 	bl	8000b38 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000da2:	1dbb      	adds	r3, r7, #6
 8000da4:	781a      	ldrb	r2, [r3, #0]
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	3201      	adds	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	1dbb      	adds	r3, r7, #6
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b80      	cmp	r3, #128	; 0x80
 8000db2:	d9cd      	bls.n	8000d50 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	3201      	adds	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	d9b1      	bls.n	8000d2a <st7565_clear_screen+0xe>
		}
	}
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	48000800 	.word	0x48000800

08000dd4 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	00da      	lsls	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2100      	movs	r1, #0
 8000de4:	0018      	movs	r0, r3
 8000de6:	f007 f800 	bl	8007dea <memset>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000df2:	b590      	push	{r4, r7, lr}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	000c      	movs	r4, r1
 8000dfc:	0010      	movs	r0, r2
 8000dfe:	0019      	movs	r1, r3
 8000e00:	1cfb      	adds	r3, r7, #3
 8000e02:	1c22      	adds	r2, r4, #0
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	1cbb      	adds	r3, r7, #2
 8000e08:	1c02      	adds	r2, r0, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	1c7b      	adds	r3, r7, #1
 8000e0e:	1c0a      	adds	r2, r1, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000e12:	1cfb      	adds	r3, r7, #3
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db51      	blt.n	8000ec0 <st7565_setpixel+0xce>
 8000e1c:	1cbb      	adds	r3, r7, #2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b3f      	cmp	r3, #63	; 0x3f
 8000e22:	d84d      	bhi.n	8000ec0 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000e24:	1c7b      	adds	r3, r7, #1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d023      	beq.n	8000e74 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000e2c:	1cfb      	adds	r3, r7, #3
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	1cbb      	adds	r3, r7, #2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	b2d8      	uxtb	r0, r3
 8000e38:	0003      	movs	r3, r0
 8000e3a:	01db      	lsls	r3, r3, #7
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	001a      	movs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	189b      	adds	r3, r3, r2
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25a      	sxtb	r2, r3
 8000e48:	1cbb      	adds	r3, r7, #2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	2107      	movs	r1, #7
 8000e50:	400b      	ands	r3, r1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4099      	lsls	r1, r3
 8000e56:	000b      	movs	r3, r1
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	b259      	sxtb	r1, r3
 8000e5e:	1cfb      	adds	r3, r7, #3
 8000e60:	781a      	ldrb	r2, [r3, #0]
 8000e62:	0003      	movs	r3, r0
 8000e64:	01db      	lsls	r3, r3, #7
 8000e66:	18d3      	adds	r3, r2, r3
 8000e68:	001a      	movs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	189b      	adds	r3, r3, r2
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e026      	b.n	8000ec2 <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000e74:	1cfb      	adds	r3, r7, #3
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	1cbb      	adds	r3, r7, #2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	b2d8      	uxtb	r0, r3
 8000e80:	0003      	movs	r3, r0
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	001a      	movs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	189b      	adds	r3, r3, r2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	1cba      	adds	r2, r7, #2
 8000e92:	7812      	ldrb	r2, [r2, #0]
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	2107      	movs	r1, #7
 8000e98:	400a      	ands	r2, r1
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	b252      	sxtb	r2, r2
 8000ea2:	43d2      	mvns	r2, r2
 8000ea4:	b252      	sxtb	r2, r2
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	b259      	sxtb	r1, r3
 8000eaa:	1cfb      	adds	r3, r7, #3
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	0003      	movs	r3, r0
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	18d3      	adds	r3, r2, r3
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	189b      	adds	r3, r3, r2
 8000eba:	b2ca      	uxtb	r2, r1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e000      	b.n	8000ec2 <st7565_setpixel+0xd0>
		return;
 8000ec0:	46c0      	nop			; (mov r8, r8)
}
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	0008      	movs	r0, r1
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	1c02      	adds	r2, r0, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	230a      	movs	r3, #10
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	1c0a      	adds	r2, r1, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 8000ee6:	2317      	movs	r3, #23
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e04c      	b.n	8000f8a <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 8000ef0:	2316      	movs	r3, #22
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e037      	b.n	8000f6a <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 8000efa:	2416      	movs	r4, #22
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	2017      	movs	r0, #23
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	08db      	lsrs	r3, r3, #3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	2508      	movs	r5, #8
 8000f10:	195b      	adds	r3, r3, r5
 8000f12:	19db      	adds	r3, r3, r7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	434b      	muls	r3, r1
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	18d3      	adds	r3, r2, r3
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	0019      	movs	r1, r3
 8000f22:	183b      	adds	r3, r7, r0
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2207      	movs	r2, #7
 8000f28:	4013      	ands	r3, r2
 8000f2a:	4119      	asrs	r1, r3
 8000f2c:	000b      	movs	r3, r1
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4013      	ands	r3, r2
 8000f32:	d014      	beq.n	8000f5e <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 8000f34:	230b      	movs	r3, #11
 8000f36:	18fa      	adds	r2, r7, r3
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	18d3      	adds	r3, r2, r3
 8000f40:	b2d9      	uxtb	r1, r3
 8000f42:	230a      	movs	r3, #10
 8000f44:	18fa      	adds	r2, r7, r3
 8000f46:	183b      	adds	r3, r7, r0
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	2328      	movs	r3, #40	; 0x28
 8000f52:	195b      	adds	r3, r3, r5
 8000f54:	19db      	adds	r3, r3, r7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff ff4a 	bl	8000df2 <st7565_setpixel>
		for (i = 0; i < w; i++) {
 8000f5e:	2116      	movs	r1, #22
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	3201      	adds	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	2316      	movs	r3, #22
 8000f6c:	18fa      	adds	r2, r7, r3
 8000f6e:	2320      	movs	r3, #32
 8000f70:	2108      	movs	r1, #8
 8000f72:	185b      	adds	r3, r3, r1
 8000f74:	19db      	adds	r3, r3, r7
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3bd      	bcc.n	8000efa <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 8000f7e:	2117      	movs	r1, #23
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	3201      	adds	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	2317      	movs	r3, #23
 8000f8c:	18fa      	adds	r2, r7, r3
 8000f8e:	2324      	movs	r3, #36	; 0x24
 8000f90:	2108      	movs	r1, #8
 8000f92:	185b      	adds	r3, r3, r1
 8000f94:	19db      	adds	r3, r3, r7
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3a8      	bcc.n	8000ef0 <st7565_drawbitmap+0x28>
			}
		}
	}
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b006      	add	sp, #24
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}

08000fa8 <system_init>:
int aux_timer = 0; // Timer incrementat in Task-ul TimerUp pentru blocarea/stoparea incrementarii/decrementarii accidentale a treptelor de viteza
int abort_signal = 0; // Semanl de abort folosit pentru oprirea fortata a modurilor de lucru
int is_first_swipe = 1;		// Asigura prima stergere instanta

void system_init() // Functie care verifica daca sistemul s-a initializat (prin verificarea daca adc-ul a citit sau nu valori)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <system_init+0x3c>)
 8000fae:	210c      	movs	r1, #12
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f003 fabb 	bl	800452c <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc, instant_ADC_values, 3); // Initializeaza ADC-ul si ii stocheaza valorile citite instante
 8000fb6:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <system_init+0x40>)
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <system_init+0x44>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 f9ad 	bl	800231c <HAL_ADC_Start_DMA>

	// Se initializeaza display-ul si se activeaza backlight-ul
	st7565_init();
 8000fc2:	f7ff fdcb 	bl	8000b5c <st7565_init>
	st7565_backlight_enable();
 8000fc6:	f7ff fe77 	bl	8000cb8 <st7565_backlight_enable>

	timer = 0;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <system_init+0x48>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	//if (averaged_ADC_values[0] > IDLE_LOW && averaged_ADC_values[0] < IDLE_HIGH && averaged_ADC_values[1] > IDLE_LOW && averaged_ADC_values[1] < IDLE_HIGH && averaged_ADC_values[2] > IDLE_LOW && averaged_ADC_values[2] < IDLE_HIGH)
	system_initialized = Display_start_screen(&timer);
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <system_init+0x48>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff fa4c 	bl	8000470 <Display_start_screen>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <system_init+0x4c>)
 8000fdc:	601a      	str	r2, [r3, #0]
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20002990 	.word	0x20002990
 8000fe8:	20002ac0 	.word	0x20002ac0
 8000fec:	200028a8 	.word	0x200028a8
 8000ff0:	20002adc 	.word	0x20002adc
 8000ff4:	20002ad8 	.word	0x20002ad8

08000ff8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffc:	f000 ffc6 	bl	8001f8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001000:	f000 f84e 	bl	80010a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001004:	f000 fa3a 	bl	800147c <MX_GPIO_Init>
	MX_DMA_Init();
 8001008:	f000 fa12 	bl	8001430 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800100c:	f000 f9e0 	bl	80013d0 <MX_USART2_UART_Init>
	MX_ADC_Init();
 8001010:	f000 f8ac 	bl	800116c <MX_ADC_Init>
	MX_TIM3_Init();
 8001014:	f000 f95c 	bl	80012d0 <MX_TIM3_Init>
	MX_SPI1_Init();
 8001018:	f000 f91c 	bl	8001254 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800101c:	f004 fc6c 	bl	80058f8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Servo */
	ServoHandle = osThreadNew(Task_Servo, NULL, &Servo_attributes);
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <main+0x78>)
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <main+0x7c>)
 8001024:	2100      	movs	r1, #0
 8001026:	0018      	movs	r0, r3
 8001028:	f004 fcc0 	bl	80059ac <osThreadNew>
 800102c:	0002      	movs	r2, r0
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <main+0x80>)
 8001030:	601a      	str	r2, [r3, #0]

	/* creation of Joystick */
	JoystickHandle = osThreadNew(Task_Joystick, NULL, &Joystick_attributes);
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <main+0x84>)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <main+0x88>)
 8001036:	2100      	movs	r1, #0
 8001038:	0018      	movs	r0, r3
 800103a:	f004 fcb7 	bl	80059ac <osThreadNew>
 800103e:	0002      	movs	r2, r0
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	601a      	str	r2, [r3, #0]

	/* creation of LCD */
	LCDHandle = osThreadNew(Task_LCD, NULL, &LCD_attributes);
 8001044:	4a10      	ldr	r2, [pc, #64]	; (8001088 <main+0x90>)
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <main+0x94>)
 8001048:	2100      	movs	r1, #0
 800104a:	0018      	movs	r0, r3
 800104c:	f004 fcae 	bl	80059ac <osThreadNew>
 8001050:	0002      	movs	r2, r0
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <main+0x98>)
 8001054:	601a      	str	r2, [r3, #0]

	/* creation of Counter */
	CounterHandle = osThreadNew(Task_CounterUp, NULL, &Counter_attributes);
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <main+0x9c>)
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <main+0xa0>)
 800105a:	2100      	movs	r1, #0
 800105c:	0018      	movs	r0, r3
 800105e:	f004 fca5 	bl	80059ac <osThreadNew>
 8001062:	0002      	movs	r2, r0
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <main+0xa4>)
 8001066:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001068:	f004 fc72 	bl	8005950 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800106c:	e7fe      	b.n	800106c <main+0x74>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	08008038 	.word	0x08008038
 8001074:	08001635 	.word	0x08001635
 8001078:	20002aa0 	.word	0x20002aa0
 800107c:	0800805c 	.word	0x0800805c
 8001080:	0800188d 	.word	0x0800188d
 8001084:	20002aa4 	.word	0x20002aa4
 8001088:	08008080 	.word	0x08008080
 800108c:	08001a51 	.word	0x08001a51
 8001090:	20002aa8 	.word	0x20002aa8
 8001094:	080080a4 	.word	0x080080a4
 8001098:	08001ac9 	.word	0x08001ac9
 800109c:	20002aac 	.word	0x20002aac

080010a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b099      	sub	sp, #100	; 0x64
 80010a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010a6:	242c      	movs	r4, #44	; 0x2c
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	0018      	movs	r0, r3
 80010ac:	2334      	movs	r3, #52	; 0x34
 80010ae:	001a      	movs	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	f006 fe9a 	bl	8007dea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b6:	231c      	movs	r3, #28
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	0018      	movs	r0, r3
 80010bc:	2310      	movs	r3, #16
 80010be:	001a      	movs	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	f006 fe92 	bl	8007dea <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010c6:	003b      	movs	r3, r7
 80010c8:	0018      	movs	r0, r3
 80010ca:	231c      	movs	r3, #28
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f006 fe8b 	bl	8007dea <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14
 80010d4:	0021      	movs	r1, r4
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2211      	movs	r2, #17
 80010da:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2201      	movs	r2, #1
 80010e0:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2201      	movs	r2, #1
 80010e6:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2210      	movs	r2, #16
 80010ec:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2202      	movs	r2, #2
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0252      	lsls	r2, r2, #9
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	22a0      	movs	r2, #160	; 0xa0
 8001100:	0392      	lsls	r2, r2, #14
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2201      	movs	r2, #1
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800110a:	187b      	adds	r3, r7, r1
 800110c:	0018      	movs	r0, r3
 800110e:	f001 ffdf 	bl	80030d0 <HAL_RCC_OscConfig>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x7a>
		Error_Handler();
 8001116:	f000 fced 	bl	8001af4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800111a:	211c      	movs	r1, #28
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2207      	movs	r2, #7
 8001120:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2202      	movs	r2, #2
 8001126:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2101      	movs	r1, #1
 8001138:	0018      	movs	r0, r3
 800113a:	f002 fb4f 	bl	80037dc <HAL_RCC_ClockConfig>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xa6>
		Error_Handler();
 8001142:	f000 fcd7 	bl	8001af4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001146:	003b      	movs	r3, r7
 8001148:	2202      	movs	r2, #2
 800114a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800114c:	003b      	movs	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001152:	003b      	movs	r3, r7
 8001154:	0018      	movs	r0, r3
 8001156:	f002 fcbb 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xc2>
		Error_Handler();
 800115e:	f000 fcc9 	bl	8001af4 <Error_Handler>
	}
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b019      	add	sp, #100	; 0x64
 8001168:	bd90      	pop	{r4, r7, pc}
	...

0800116c <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	0018      	movs	r0, r3
 8001176:	230c      	movs	r3, #12
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f006 fe35 	bl	8007dea <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <MX_ADC_Init+0xe0>)
 8001182:	4a33      	ldr	r2, [pc, #204]	; (8001250 <MX_ADC_Init+0xe4>)
 8001184:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <MX_ADC_Init+0xe0>)
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <MX_ADC_Init+0xe0>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <MX_ADC_Init+0xe0>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <MX_ADC_Init+0xe0>)
 800119a:	2201      	movs	r2, #1
 800119c:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_ADC_Init+0xe0>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_ADC_Init+0xe0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_ADC_Init+0xe0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_ADC_Init+0xe0>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <MX_ADC_Init+0xe0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_ADC_Init+0xe0>)
 80011be:	22c2      	movs	r2, #194	; 0xc2
 80011c0:	32ff      	adds	r2, #255	; 0xff
 80011c2:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_ADC_Init+0xe0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = ENABLE;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <MX_ADC_Init+0xe0>)
 80011cc:	2224      	movs	r2, #36	; 0x24
 80011ce:	2101      	movs	r1, #1
 80011d0:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_ADC_Init+0xe0>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_ADC_Init+0xe0>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 ff5e 	bl	800209c <HAL_ADC_Init>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC_Init+0x7c>
		Error_Handler();
 80011e4:	f000 fc86 	bl	8001af4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0152      	lsls	r2, r2, #5
 80011f4:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2207      	movs	r2, #7
 80011fa:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80011fc:	1d3a      	adds	r2, r7, #4
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_ADC_Init+0xe0>)
 8001200:	0011      	movs	r1, r2
 8001202:	0018      	movs	r0, r3
 8001204:	f001 f924 	bl	8002450 <HAL_ADC_ConfigChannel>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC_Init+0xa4>
		Error_Handler();
 800120c:	f000 fc72 	bl	8001af4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	220d      	movs	r2, #13
 8001214:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001216:	1d3a      	adds	r2, r7, #4
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_ADC_Init+0xe0>)
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f001 f917 	bl	8002450 <HAL_ADC_ConfigChannel>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_ADC_Init+0xbe>
		Error_Handler();
 8001226:	f000 fc65 	bl	8001af4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	220e      	movs	r2, #14
 800122e:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001230:	1d3a      	adds	r2, r7, #4
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_ADC_Init+0xe0>)
 8001234:	0011      	movs	r1, r2
 8001236:	0018      	movs	r0, r3
 8001238:	f001 f90a 	bl	8002450 <HAL_ADC_ConfigChannel>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC_Init+0xd8>
		Error_Handler();
 8001240:	f000 fc58 	bl	8001af4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200028a8 	.word	0x200028a8
 8001250:	40012400 	.word	0x40012400

08001254 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_SPI1_Init+0x74>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <MX_SPI1_Init+0x78>)
 800125c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_SPI1_Init+0x74>)
 8001260:	2282      	movs	r2, #130	; 0x82
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_SPI1_Init+0x74>)
 800126e:	22e0      	movs	r2, #224	; 0xe0
 8001270:	00d2      	lsls	r2, r2, #3
 8001272:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_SPI1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_SPI1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_SPI1_Init+0x74>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_SPI1_Init+0x74>)
 800128a:	2230      	movs	r2, #48	; 0x30
 800128c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_SPI1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_SPI1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_SPI1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_SPI1_Init+0x74>)
 80012a2:	2207      	movs	r2, #7
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_SPI1_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_SPI1_Init+0x74>)
 80012ae:	2208      	movs	r2, #8
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <MX_SPI1_Init+0x74>)
 80012b4:	0018      	movs	r0, r3
 80012b6:	f002 fd0b 	bl	8003cd0 <HAL_SPI_Init>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80012be:	f000 fc19 	bl	8001af4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000292c 	.word	0x2000292c
 80012cc:	40013000 	.word	0x40013000

080012d0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012d6:	2328      	movs	r3, #40	; 0x28
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	0018      	movs	r0, r3
 80012dc:	2310      	movs	r3, #16
 80012de:	001a      	movs	r2, r3
 80012e0:	2100      	movs	r1, #0
 80012e2:	f006 fd82 	bl	8007dea <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012e6:	2320      	movs	r3, #32
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	0018      	movs	r0, r3
 80012ec:	2308      	movs	r3, #8
 80012ee:	001a      	movs	r2, r3
 80012f0:	2100      	movs	r1, #0
 80012f2:	f006 fd7a 	bl	8007dea <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	0018      	movs	r0, r3
 80012fa:	231c      	movs	r3, #28
 80012fc:	001a      	movs	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	f006 fd73 	bl	8007dea <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <MX_TIM3_Init+0xf4>)
 8001306:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <MX_TIM3_Init+0xf8>)
 8001308:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 48 - 1;
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_TIM3_Init+0xf4>)
 800130c:	222f      	movs	r2, #47	; 0x2f
 800130e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <MX_TIM3_Init+0xf4>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20000 - 1;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_TIM3_Init+0xf4>)
 8001318:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <MX_TIM3_Init+0xfc>)
 800131a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_TIM3_Init+0xf4>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_TIM3_Init+0xf4>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_TIM3_Init+0xf4>)
 800132a:	0018      	movs	r0, r3
 800132c:	f003 f856 	bl	80043dc <HAL_TIM_Base_Init>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x68>
		Error_Handler();
 8001334:	f000 fbde 	bl	8001af4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	2128      	movs	r1, #40	; 0x28
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	0152      	lsls	r2, r2, #5
 8001340:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001342:	187a      	adds	r2, r7, r1
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_TIM3_Init+0xf4>)
 8001346:	0011      	movs	r1, r2
 8001348:	0018      	movs	r0, r3
 800134a:	f003 fa6d 	bl	8004828 <HAL_TIM_ConfigClockSource>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0x86>
		Error_Handler();
 8001352:	f000 fbcf 	bl	8001af4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_TIM3_Init+0xf4>)
 8001358:	0018      	movs	r0, r3
 800135a:	f003 f88f 	bl	800447c <HAL_TIM_PWM_Init>
 800135e:	1e03      	subs	r3, r0, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0x96>
		Error_Handler();
 8001362:	f000 fbc7 	bl	8001af4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2120      	movs	r1, #32
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001374:	187a      	adds	r2, r7, r1
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_TIM3_Init+0xf4>)
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f003 fe62 	bl	8005044 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8001384:	f000 fbb6 	bl	8001af4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2260      	movs	r2, #96	; 0x60
 800138c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80013a0:	1d39      	adds	r1, r7, #4
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_TIM3_Init+0xf4>)
 80013a4:	220c      	movs	r2, #12
 80013a6:	0018      	movs	r0, r3
 80013a8:	f003 f978 	bl	800469c <HAL_TIM_PWM_ConfigChannel>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0xe4>
			!= HAL_OK) {
		Error_Handler();
 80013b0:	f000 fba0 	bl	8001af4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <MX_TIM3_Init+0xf4>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 fd00 	bl	8001dbc <HAL_TIM_MspPostInit>

}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b00e      	add	sp, #56	; 0x38
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20002990 	.word	0x20002990
 80013c8:	40000400 	.word	0x40000400
 80013cc:	00004e1f 	.word	0x00004e1f

080013d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <MX_USART2_UART_Init+0x5c>)
 80013d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013dc:	22e1      	movs	r2, #225	; 0xe1
 80013de:	0252      	lsls	r2, r2, #9
 80013e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART2_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART2_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MX_USART2_UART_Init+0x58>)
 8001414:	0018      	movs	r0, r3
 8001416:	f003 fe73 	bl	8005100 <HAL_UART_Init>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800141e:	f000 fb69 	bl	8001af4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20002a1c 	.word	0x20002a1c
 800142c:	40004400 	.word	0x40004400

08001430 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_DMA_Init+0x48>)
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_DMA_Init+0x48>)
 800143c:	2101      	movs	r1, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_DMA_Init+0x48>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Ch1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2103      	movs	r1, #3
 8001452:	2009      	movs	r0, #9
 8001454:	f001 fabe 	bl	80029d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8001458:	2009      	movs	r0, #9
 800145a:	f001 fad0 	bl	80029fe <HAL_NVIC_EnableIRQ>
	/* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2103      	movs	r1, #3
 8001462:	200a      	movs	r0, #10
 8001464:	f001 fab6 	bl	80029d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8001468:	200a      	movs	r0, #10
 800146a:	f001 fac8 	bl	80029fe <HAL_NVIC_EnableIRQ>

}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000

0800147c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b08b      	sub	sp, #44	; 0x2c
 8001480:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001482:	2414      	movs	r4, #20
 8001484:	193b      	adds	r3, r7, r4
 8001486:	0018      	movs	r0, r3
 8001488:	2314      	movs	r3, #20
 800148a:	001a      	movs	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	f006 fcac 	bl	8007dea <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <MX_GPIO_Init+0x12c>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <MX_GPIO_Init+0x12c>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	0309      	lsls	r1, r1, #12
 800149c:	430a      	orrs	r2, r1
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	031b      	lsls	r3, r3, #12
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	03c9      	lsls	r1, r1, #15
 80014b8:	430a      	orrs	r2, r1
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	03db      	lsls	r3, r3, #15
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	0289      	lsls	r1, r1, #10
 80014d4:	430a      	orrs	r2, r1
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	02c9      	lsls	r1, r1, #11
 80014f0:	430a      	orrs	r2, r1
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_GPIO_Init+0x12c>)
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	02db      	lsls	r3, r3, #11
 80014fc:	4013      	ands	r3, r2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <MX_GPIO_Init+0x130>)
 8001504:	2201      	movs	r2, #1
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0018      	movs	r0, r3
 800150a:	f001 fdc3 	bl	8003094 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BL_Pin | SPIRST_Pin, GPIO_PIN_RESET);
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	0099      	lsls	r1, r3, #2
 8001512:	2390      	movs	r3, #144	; 0x90
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	2200      	movs	r2, #0
 8001518:	0018      	movs	r0, r3
 800151a:	f001 fdbb 	bl	8003094 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <MX_GPIO_Init+0x134>)
 8001520:	2200      	movs	r2, #0
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	0018      	movs	r0, r3
 8001526:	f001 fdb5 	bl	8003094 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPICD_Pin */
	GPIO_InitStruct.Pin = SPICD_Pin;
 800152a:	193b      	adds	r3, r7, r4
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	193b      	adds	r3, r7, r4
 8001532:	2201      	movs	r2, #1
 8001534:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	193b      	adds	r3, r7, r4
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8001542:	193b      	adds	r3, r7, r4
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <MX_GPIO_Init+0x130>)
 8001546:	0019      	movs	r1, r3
 8001548:	0010      	movs	r0, r2
 800154a:	f001 fc2b 	bl	8002da4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BL_Pin SPIRST_Pin */
	GPIO_InitStruct.Pin = BL_Pin | SPIRST_Pin;
 800154e:	0021      	movs	r1, r4
 8001550:	187b      	adds	r3, r7, r1
 8001552:	22c0      	movs	r2, #192	; 0xc0
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	000c      	movs	r4, r1
 800155a:	193b      	adds	r3, r7, r4
 800155c:	2201      	movs	r2, #1
 800155e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	193b      	adds	r3, r7, r4
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	193b      	adds	r3, r7, r4
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	193a      	adds	r2, r7, r4
 800156e:	2390      	movs	r3, #144	; 0x90
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f001 fc15 	bl	8002da4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPICS_Pin */
	GPIO_InitStruct.Pin = SPICS_Pin;
 800157a:	0021      	movs	r1, r4
 800157c:	187b      	adds	r3, r7, r1
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2201      	movs	r2, #1
 8001586:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	187b      	adds	r3, r7, r1
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8001594:	187b      	adds	r3, r7, r1
 8001596:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <MX_GPIO_Init+0x134>)
 8001598:	0019      	movs	r1, r3
 800159a:	0010      	movs	r0, r2
 800159c:	f001 fc02 	bl	8002da4 <HAL_GPIO_Init>

}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b00b      	add	sp, #44	; 0x2c
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000800 	.word	0x48000800
 80015b0:	48000400 	.word	0x48000400

080015b4 <speed_function.0>:
	if (!system_initialized) {
		system_init();
	}

	// Functie auxiliara pentru modul de lucru in trepte de viteza
	void speed_function() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4663      	mov	r3, ip
 80015bc:	607b      	str	r3, [r7, #4]
		switch (current_speed) {
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <speed_function.0+0x6c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d021      	beq.n	800160a <speed_function.0+0x56>
 80015c6:	d827      	bhi.n	8001618 <speed_function.0+0x64>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d017      	beq.n	80015fc <speed_function.0+0x48>
 80015cc:	d824      	bhi.n	8001618 <speed_function.0+0x64>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <speed_function.0+0x24>
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d00b      	beq.n	80015ee <speed_function.0+0x3a>
			break;
		case 3:	// Case 3: se intra atunci cand se ajunge la treapta 3 de viteza
			Servo_master_function(4, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() modul de lucru (4, treapta 3), pointerul catre timer si pointerul catre semnalul de abort
			break;
		}
	}
 80015d6:	e01f      	b.n	8001618 <speed_function.0+0x64>
			servo_system_mode = Servo_master_function(0, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() modul de lucru (0, oprire), pointerul catre timer si pointerul catre semnalul de abort
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <speed_function.0+0x70>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <speed_function.0+0x74>)
 80015dc:	4913      	ldr	r1, [pc, #76]	; (800162c <speed_function.0+0x78>)
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff f930 	bl	8000844 <Servo_master_function>
 80015e4:	0003      	movs	r3, r0
 80015e6:	001a      	movs	r2, r3
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <speed_function.0+0x7c>)
 80015ea:	601a      	str	r2, [r3, #0]
			break;
 80015ec:	e014      	b.n	8001618 <speed_function.0+0x64>
			Servo_master_function(2, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() modul de lucru (2, treapta 1), pointerul catre timer si pointerul catre semnalul de abort
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <speed_function.0+0x70>)
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <speed_function.0+0x74>)
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <speed_function.0+0x78>)
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff f925 	bl	8000844 <Servo_master_function>
			break;
 80015fa:	e00d      	b.n	8001618 <speed_function.0+0x64>
			Servo_master_function(3, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() modul de lucru (3, treapta 2), pointerul catre timer si pointerul catre semnalul de abort
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <speed_function.0+0x70>)
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <speed_function.0+0x74>)
 8001600:	490a      	ldr	r1, [pc, #40]	; (800162c <speed_function.0+0x78>)
 8001602:	2003      	movs	r0, #3
 8001604:	f7ff f91e 	bl	8000844 <Servo_master_function>
			break;
 8001608:	e006      	b.n	8001618 <speed_function.0+0x64>
			Servo_master_function(4, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() modul de lucru (4, treapta 3), pointerul catre timer si pointerul catre semnalul de abort
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <speed_function.0+0x70>)
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <speed_function.0+0x74>)
 800160e:	4907      	ldr	r1, [pc, #28]	; (800162c <speed_function.0+0x78>)
 8001610:	2004      	movs	r0, #4
 8001612:	f7ff f917 	bl	8000844 <Servo_master_function>
			break;
 8001616:	46c0      	nop			; (mov r8, r8)
	}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20002ab0 	.word	0x20002ab0
 8001624:	2000280c 	.word	0x2000280c
 8001628:	20002ae4 	.word	0x20002ae4
 800162c:	20002adc 	.word	0x20002adc
 8001630:	20002ad0 	.word	0x20002ad0

08001634 <Task_Servo>:
void Task_Servo(void *argument) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	2318      	movs	r3, #24
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	60fb      	str	r3, [r7, #12]
	if (!system_initialized) {
 8001642:	4b53      	ldr	r3, [pc, #332]	; (8001790 <Task_Servo+0x15c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <Task_Servo+0x1a>
		system_init();
 800164a:	f7ff fcad 	bl	8000fa8 <system_init>

	for (;;) {
		if (system_initialized == 1) {
 800164e:	4b50      	ldr	r3, [pc, #320]	; (8001790 <Task_Servo+0x15c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d000      	beq.n	8001658 <Task_Servo+0x24>
 8001656:	e095      	b.n	8001784 <Task_Servo+0x150>
			switch (servo_system_mode) // Primeste de la Task-ul de Read_Joystick modul de lucru (mod_lucru_sistem)
 8001658:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <Task_Servo+0x160>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d900      	bls.n	8001662 <Task_Servo+0x2e>
 8001660:	e091      	b.n	8001786 <Task_Servo+0x152>
 8001662:	009a      	lsls	r2, r3, #2
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <Task_Servo+0x164>)
 8001666:	18d3      	adds	r3, r2, r3
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	469f      	mov	pc, r3
			{
			case 0:	// Case 0: modul idle sau reset. Servo motorul este adus si sta in pozitia 0
				Servo_master_function(0, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() modul de lucru (0, oprire), pointerul catre timer si pointerul catre semnalul de abort
 800166c:	4b4b      	ldr	r3, [pc, #300]	; (800179c <Task_Servo+0x168>)
 800166e:	4a4c      	ldr	r2, [pc, #304]	; (80017a0 <Task_Servo+0x16c>)
 8001670:	494c      	ldr	r1, [pc, #304]	; (80017a4 <Task_Servo+0x170>)
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff f8e6 	bl	8000844 <Servo_master_function>
				abort_signal = 0; // In cazul in care a fost folosit semnalul abort, acesta se readuce la 0 pentru a se putea continua functionarea normala a sistemului
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <Task_Servo+0x16c>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
				is_first_swipe = 1;
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <Task_Servo+0x168>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
				break;
 8001684:	e07f      	b.n	8001786 <Task_Servo+0x152>
			case 1:											// Case 1: wipe x1
				servo_system_mode = Servo_master_function(1, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() modul de lucru (1, wipe x1), pointerul catre timer si pointerul catre semnalul de abort
 8001686:	4b45      	ldr	r3, [pc, #276]	; (800179c <Task_Servo+0x168>)
 8001688:	4a45      	ldr	r2, [pc, #276]	; (80017a0 <Task_Servo+0x16c>)
 800168a:	4946      	ldr	r1, [pc, #280]	; (80017a4 <Task_Servo+0x170>)
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff f8d9 	bl	8000844 <Servo_master_function>
 8001692:	0003      	movs	r3, r0
 8001694:	001a      	movs	r2, r3
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <Task_Servo+0x160>)
 8001698:	601a      	str	r2, [r3, #0]
				break;
 800169a:	e074      	b.n	8001786 <Task_Servo+0x152>
			case 2:	// Case 2: lucru pe trepte de viteza, modul de incrementare a treptei de viteza
				if (current_speed < 3 && change_speed == 1) // Se verifica daca este necesara incrementarea treptei de viteza (pana la treapta_curenta = 3) folosind semnalul schimba_treapta primit de la task-ul Read_Joystick
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <Task_Servo+0x174>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d80e      	bhi.n	80016c2 <Task_Servo+0x8e>
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <Task_Servo+0x178>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d10a      	bne.n	80016c2 <Task_Servo+0x8e>
						{
					aux_timer = 0; // reseteaza de fiecare data timer_trepte
 80016ac:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <Task_Servo+0x17c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
					current_speed++;	 // Se incrementeaza treapta
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <Task_Servo+0x174>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <Task_Servo+0x174>)
 80016ba:	601a      	str	r2, [r3, #0]
					change_speed = 0; // Se reseteaza semnalul de schimba_treapta
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <Task_Servo+0x178>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
				}
				speed_function(); // Se foloseste functia de lucru_in_trepte()
 80016c2:	230c      	movs	r3, #12
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	469c      	mov	ip, r3
 80016c8:	f7ff ff74 	bl	80015b4 <speed_function.0>
				is_first_swipe = 0;
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <Task_Servo+0x168>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

				break;
 80016d2:	e058      	b.n	8001786 <Task_Servo+0x152>
			case 3:	// Case 3: lucru in trepte de viteza, modul de decrementare a treptei de viteza
				if (current_speed > 0 && change_speed == 1) // Se verifica daca este necesara decrementarea treptei de viteza (pana la treapta_curenta = 0) folosind semnalul schimba_treapta primit de la task-ul de Read_Joystick
 80016d4:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <Task_Servo+0x174>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d012      	beq.n	8001702 <Task_Servo+0xce>
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <Task_Servo+0x178>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d10e      	bne.n	8001702 <Task_Servo+0xce>
						{
					current_speed--;	 // Se decrementeaza treapta
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <Task_Servo+0x174>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <Task_Servo+0x174>)
 80016ec:	601a      	str	r2, [r3, #0]
					if(current_speed == 0)
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <Task_Servo+0x174>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <Task_Servo+0xc8>
						lucru_in_trepte = 0;
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <Task_Servo+0x180>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
					change_speed = 0; // Se reseteaza semnalul de schimba_treapta
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <Task_Servo+0x178>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
				}
				speed_function(); // Se foloseste functia de lucru_in_trepte()
 8001702:	230c      	movs	r3, #12
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	469c      	mov	ip, r3
 8001708:	f7ff ff54 	bl	80015b4 <speed_function.0>
				is_first_swipe = 0;
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <Task_Servo+0x168>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
				break;
 8001712:	e038      	b.n	8001786 <Task_Servo+0x152>
			case 4:								// Case 4: modul spalare parbriz
				servo_system_mode = Servo_master_function(5, &timer, &abort_signal, &is_first_swipe); // Se paseaza la functia master Servo_master_function() moodul de lucru(5, spalare parbriz), pointerul catre timer si pointerul catre semnalul de abort
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <Task_Servo+0x168>)
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <Task_Servo+0x16c>)
 8001718:	4922      	ldr	r1, [pc, #136]	; (80017a4 <Task_Servo+0x170>)
 800171a:	2005      	movs	r0, #5
 800171c:	f7ff f892 	bl	8000844 <Servo_master_function>
 8001720:	0003      	movs	r3, r0
 8001722:	001a      	movs	r2, r3
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <Task_Servo+0x160>)
 8001726:	601a      	str	r2, [r3, #0]
				display_system_mode = servo_system_mode;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <Task_Servo+0x160>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <Task_Servo+0x184>)
 800172e:	601a      	str	r2, [r3, #0]
				break;
 8001730:	e029      	b.n	8001786 <Task_Servo+0x152>
			case 5:
				Servo_master_function(0, &timer, &abort_signal, &is_first_swipe);
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <Task_Servo+0x168>)
 8001734:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <Task_Servo+0x16c>)
 8001736:	491b      	ldr	r1, [pc, #108]	; (80017a4 <Task_Servo+0x170>)
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff f883 	bl	8000844 <Servo_master_function>
				Display_master_function(0);
 800173e:	2000      	movs	r0, #0
 8001740:	f7fe fe58 	bl	80003f4 <Display_master_function>
				is_first_swipe = 1;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <Task_Servo+0x168>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
				aux_timer = 0;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <Task_Servo+0x17c>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
				while(aux_timer < 500){
 8001750:	e000      	b.n	8001754 <Task_Servo+0x120>
					continue;
 8001752:	46c0      	nop			; (mov r8, r8)
				while(aux_timer < 500){
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <Task_Servo+0x17c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	23fa      	movs	r3, #250	; 0xfa
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf8      	blt.n	8001752 <Task_Servo+0x11e>
				}

				Servo_master_function(5, &timer, &abort_signal, &is_first_swipe);
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <Task_Servo+0x168>)
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <Task_Servo+0x16c>)
 8001764:	490f      	ldr	r1, [pc, #60]	; (80017a4 <Task_Servo+0x170>)
 8001766:	2005      	movs	r0, #5
 8001768:	f7ff f86c 	bl	8000844 <Servo_master_function>
				Display_master_function(display_system_mode);
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <Task_Servo+0x184>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f7fe fe3f 	bl	80003f4 <Display_master_function>

				servo_system_mode = 2;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <Task_Servo+0x160>)
 8001778:	2202      	movs	r2, #2
 800177a:	601a      	str	r2, [r3, #0]
				display_system_mode = 2;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <Task_Servo+0x184>)
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
				break;
 8001782:	e000      	b.n	8001786 <Task_Servo+0x152>
			}
		}
 8001784:	46c0      	nop			; (mov r8, r8)
		osDelay(1); // Task-ul se reapeleaza automat la 1ms
 8001786:	2001      	movs	r0, #1
 8001788:	f004 f9b8 	bl	8005afc <osDelay>
		if (system_initialized == 1) {
 800178c:	e75f      	b.n	800164e <Task_Servo+0x1a>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	20002ad8 	.word	0x20002ad8
 8001794:	20002ad0 	.word	0x20002ad0
 8001798:	080080c8 	.word	0x080080c8
 800179c:	2000280c 	.word	0x2000280c
 80017a0:	20002ae4 	.word	0x20002ae4
 80017a4:	20002adc 	.word	0x20002adc
 80017a8:	20002ab0 	.word	0x20002ab0
 80017ac:	20002808 	.word	0x20002808
 80017b0:	20002ae0 	.word	0x20002ae0
 80017b4:	20002acc 	.word	0x20002acc
 80017b8:	20002ad4 	.word	0x20002ad4

080017bc <moving_average.1>:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	int adcBuffer[ADC_COUNT][BUFFER_SIZE] = { 0 };
	int sum[ADC_COUNT] = { 0 };
	int index = 0;

	void moving_average() {
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4664      	mov	r4, ip
 80017c4:	4663      	mov	r3, ip
 80017c6:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < ADC_COUNT; i++) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e04b      	b.n	8001866 <moving_average.1+0xaa>
			sum[i] += instant_ADC_values[i] - adcBuffer[i][index]; // add new measurement to sum and subtract the oldest measurement
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	331e      	adds	r3, #30
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	18e3      	adds	r3, r4, r3
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	001d      	movs	r5, r3
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <moving_average.1+0xc8>)
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	58d1      	ldr	r1, [r2, r3]
 80017e4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	0013      	movs	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	189b      	adds	r3, r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	181b      	adds	r3, r3, r0
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	591b      	ldr	r3, [r3, r4]
 80017f6:	1acb      	subs	r3, r1, r3
 80017f8:	18eb      	adds	r3, r5, r3
 80017fa:	001a      	movs	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	331e      	adds	r3, #30
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	18e3      	adds	r3, r4, r3
 8001804:	3304      	adds	r3, #4
 8001806:	601a      	str	r2, [r3, #0]
			adcBuffer[i][index] = instant_ADC_values[i]; // store new measurement in buffer
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <moving_average.1+0xc8>)
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	58d3      	ldr	r3, [r2, r3]
 8001810:	0018      	movs	r0, r3
 8001812:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	0013      	movs	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	189b      	adds	r3, r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	185b      	adds	r3, r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	5118      	str	r0, [r3, r4]

			if (sum[i] >= 0) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	331e      	adds	r3, #30
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	18e3      	adds	r3, r4, r3
 800182c:	3304      	adds	r3, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db10      	blt.n	8001856 <moving_average.1+0x9a>
				averaged_ADC_values[i] = sum[i] / BUFFER_SIZE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	331e      	adds	r3, #30
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	18e3      	adds	r3, r4, r3
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	210a      	movs	r1, #10
 8001842:	0018      	movs	r0, r3
 8001844:	f7fe fcea 	bl	800021c <__divsi3>
 8001848:	0003      	movs	r3, r0
 800184a:	0019      	movs	r1, r3
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <moving_average.1+0xcc>)
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	50d1      	str	r1, [r2, r3]
 8001854:	e004      	b.n	8001860 <moving_average.1+0xa4>
			} else {
				averaged_ADC_values[i] = 0;
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <moving_average.1+0xcc>)
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	0092      	lsls	r2, r2, #2
 800185c:	2100      	movs	r1, #0
 800185e:	50d1      	str	r1, [r2, r3]
		for (int i = 0; i < ADC_COUNT; i++) {
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b02      	cmp	r3, #2
 800186a:	ddb0      	ble.n	80017ce <moving_average.1+0x12>
			}
		}
		index = (index + 1) % BUFFER_SIZE;
 800186c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800186e:	3301      	adds	r3, #1
 8001870:	210a      	movs	r1, #10
 8001872:	0018      	movs	r0, r3
 8001874:	f7fe fdb8 	bl	80003e8 <__aeabi_idivmod>
 8001878:	000b      	movs	r3, r1
 800187a:	67a3      	str	r3, [r4, #120]	; 0x78
	}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bdb0      	pop	{r4, r5, r7, pc}
 8001884:	20002ac0 	.word	0x20002ac0
 8001888:	20002ab4 	.word	0x20002ab4

0800188c <Task_Joystick>:
void Task_Joystick(void *argument) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b0a7      	sub	sp, #156	; 0x9c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	23a0      	movs	r3, #160	; 0xa0
 8001896:	2208      	movs	r2, #8
 8001898:	189b      	adds	r3, r3, r2
 800189a:	19db      	adds	r3, r3, r7
 800189c:	240c      	movs	r4, #12
 800189e:	193a      	adds	r2, r7, r4
 80018a0:	2188      	movs	r1, #136	; 0x88
 80018a2:	5053      	str	r3, [r2, r1]
	int adcBuffer[ADC_COUNT][BUFFER_SIZE] = { 0 };
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	0018      	movs	r0, r3
 80018a8:	2378      	movs	r3, #120	; 0x78
 80018aa:	001a      	movs	r2, r3
 80018ac:	2100      	movs	r1, #0
 80018ae:	f006 fa9c 	bl	8007dea <memset>
	int sum[ADC_COUNT] = { 0 };
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	337c      	adds	r3, #124	; 0x7c
 80018b6:	220c      	movs	r2, #12
 80018b8:	2100      	movs	r1, #0
 80018ba:	0018      	movs	r0, r3
 80018bc:	f006 fa95 	bl	8007dea <memset>
	int index = 0;
 80018c0:	2200      	movs	r2, #0
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	679a      	str	r2, [r3, #120]	; 0x78

	for (;;) {
		moving_average();
 80018c6:	230c      	movs	r3, #12
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	469c      	mov	ip, r3
 80018cc:	f7ff ff76 	bl	80017bc <moving_average.1>

		if (system_initialized) // Dupa ce sistemul a fost initializat se incepe functionarea normala
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <Task_Joystick+0x150>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d100      	bne.n	80018da <Task_Joystick+0x4e>
 80018d8:	e07b      	b.n	80019d2 <Task_Joystick+0x146>
		{
			if (JOYSTICK_BUTTON<= DOWN) {
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <Task_Joystick+0x154>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d80e      	bhi.n	8001900 <Task_Joystick+0x74>
				servo_system_mode = 0; // Modul de lucru se trece in 0 (oprire/reset)
 80018e2:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <Task_Joystick+0x158>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
				display_system_mode = 0;
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <Task_Joystick+0x15c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
				abort_signal = 1;// Semnalul de abort se face 1 pentru a oprii orice operatie
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <Task_Joystick+0x160>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
				current_speed = 0;// Se reseteaza treapta de viteza
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <Task_Joystick+0x164>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
				lucru_in_trepte = 0;
 80018fa:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <Task_Joystick+0x168>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
			}

			if (JOYSTICK_X <= DOWN && current_speed > 0) // Cazul Joystick Jos in timpul functionarii pe trepte de viteza
 8001900:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <Task_Joystick+0x154>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b64      	cmp	r3, #100	; 0x64
 8001906:	d814      	bhi.n	8001932 <Task_Joystick+0xa6>
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <Task_Joystick+0x164>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <Task_Joystick+0xa6>
			{
				servo_system_mode = 3; // Modul de lucru se trece in 3 (lucru in trepte, cazul decrementare treapta de viteza)
 8001910:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <Task_Joystick+0x158>)
 8001912:	2203      	movs	r2, #3
 8001914:	601a      	str	r2, [r3, #0]
				display_system_mode = 3;
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <Task_Joystick+0x15c>)
 8001918:	2203      	movs	r2, #3
 800191a:	601a      	str	r2, [r3, #0]
				lucru_in_trepte = 1;
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <Task_Joystick+0x168>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
				if (aux_timer > 150)// Se verifica daca a trecut timpul minim de 150ms pentru a nu se decrementa accidental de mai multe ori treapta de viteza
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <Task_Joystick+0x16c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b96      	cmp	r3, #150	; 0x96
 8001928:	dd11      	ble.n	800194e <Task_Joystick+0xc2>
				change_speed = 1;// In cazul in care timpul minim a expirat, semnalul schimba_treapta se trece in 1 pentru a permite decrementarea treptei de viteza
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <Task_Joystick+0x170>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
				if (aux_timer > 150)// Se verifica daca a trecut timpul minim de 150ms pentru a nu se decrementa accidental de mai multe ori treapta de viteza
 8001930:	e00d      	b.n	800194e <Task_Joystick+0xc2>
			}
			else
			{
				if (JOYSTICK_X <= DOWN && current_speed == 0) // Cazul: Joystick Jos in afara functionarii pe trepte de viteza
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <Task_Joystick+0x154>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d809      	bhi.n	800194e <Task_Joystick+0xc2>
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <Task_Joystick+0x164>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d105      	bne.n	800194e <Task_Joystick+0xc2>
				{
					servo_system_mode = 1; // Modul de lucru se trece in 1 (wipe x1)
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <Task_Joystick+0x158>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
					display_system_mode = 1;
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <Task_Joystick+0x15c>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
				}
			}

			if (JOYSTICK_X >= UP) // Cazul Joystick Sus
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <Task_Joystick+0x154>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	23fa      	movs	r3, #250	; 0xfa
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	429a      	cmp	r2, r3
 8001958:	d30f      	bcc.n	800197a <Task_Joystick+0xee>
			{
				servo_system_mode = 2; // Modul de lucru se trece in 2 (lucru pe trepte de viteza, cazul incrementare treapta de viteza)
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <Task_Joystick+0x158>)
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
				display_system_mode = 2;
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <Task_Joystick+0x15c>)
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
				lucru_in_trepte = 1;
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <Task_Joystick+0x168>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
				if (aux_timer > 150)// Se verifica daca a trecut timpul minim de 150ms pentru a nu se incrementa accidental de mai multe ori treapta de viteza
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <Task_Joystick+0x16c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b96      	cmp	r3, #150	; 0x96
 8001972:	dd02      	ble.n	800197a <Task_Joystick+0xee>
				change_speed = 1;// In cazul in care timpul minim a expirat, semnalul schimba_treapta se trece in 1 pentru a permite incrementarea treptei de viteza
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <Task_Joystick+0x170>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]
			}

			if (JOYSTICK_Y <= DOWN) // Cazul Joystick Stanga
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <Task_Joystick+0x154>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d810      	bhi.n	80019a4 <Task_Joystick+0x118>
			{
				if(lucru_in_trepte) {
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <Task_Joystick+0x168>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <Task_Joystick+0x10c>
					servo_system_mode = 5;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <Task_Joystick+0x158>)
 800198c:	2205      	movs	r2, #5
 800198e:	601a      	str	r2, [r3, #0]
					display_system_mode = 4;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <Task_Joystick+0x15c>)
 8001992:	2204      	movs	r2, #4
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e002      	b.n	800199e <Task_Joystick+0x112>
				} else
				servo_system_mode = 4; // Modul de lucru se trece in 4 (modul spalare)
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <Task_Joystick+0x158>)
 800199a:	2204      	movs	r2, #4
 800199c:	601a      	str	r2, [r3, #0]
				display_system_mode = 4;
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <Task_Joystick+0x15c>)
 80019a0:	2204      	movs	r2, #4
 80019a2:	601a      	str	r2, [r3, #0]
			}

			if (JOYSTICK_Y >= UP) // Cazul Joystick Dreapta
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <Task_Joystick+0x154>)
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	23fa      	movs	r3, #250	; 0xfa
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d310      	bcc.n	80019d2 <Task_Joystick+0x146>
			{
				if(lucru_in_trepte) {
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <Task_Joystick+0x168>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <Task_Joystick+0x13a>
					servo_system_mode = 5;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <Task_Joystick+0x158>)
 80019ba:	2205      	movs	r2, #5
 80019bc:	601a      	str	r2, [r3, #0]
					display_system_mode = 5;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <Task_Joystick+0x15c>)
 80019c0:	2205      	movs	r2, #5
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e002      	b.n	80019cc <Task_Joystick+0x140>
				} else
				servo_system_mode = 4; // Modul de lucru se trece in 4 (modul spalare)
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <Task_Joystick+0x158>)
 80019c8:	2204      	movs	r2, #4
 80019ca:	601a      	str	r2, [r3, #0]
				display_system_mode = 5;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <Task_Joystick+0x15c>)
 80019ce:	2205      	movs	r2, #5
 80019d0:	601a      	str	r2, [r3, #0]
			}
		}
		osDelay(1); // Task-ul se reapeleaza automat la 1ms
 80019d2:	2001      	movs	r0, #1
 80019d4:	f004 f892 	bl	8005afc <osDelay>
		moving_average();
 80019d8:	e775      	b.n	80018c6 <Task_Joystick+0x3a>
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	20002ad8 	.word	0x20002ad8
 80019e0:	20002ab4 	.word	0x20002ab4
 80019e4:	20002ad0 	.word	0x20002ad0
 80019e8:	20002ad4 	.word	0x20002ad4
 80019ec:	20002ae4 	.word	0x20002ae4
 80019f0:	20002ab0 	.word	0x20002ab0
 80019f4:	20002acc 	.word	0x20002acc
 80019f8:	20002ae0 	.word	0x20002ae0
 80019fc:	20002808 	.word	0x20002808

08001a00 <speed_function_LCD.2>:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////   Implementare Task Display   ///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Functie auxiliara pentru modul de lucru in trepte de viteza
	// Este apelata din interiorul for(;;) pe case-urile 2 si 3 ale switch-ului
	void speed_function_LCD() {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4663      	mov	r3, ip
 8001a08:	607b      	str	r3, [r7, #4]
		switch (current_speed) {
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <speed_function_LCD.2+0x4c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d014      	beq.n	8001a3c <speed_function_LCD.2+0x3c>
 8001a12:	d817      	bhi.n	8001a44 <speed_function_LCD.2+0x44>
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d00d      	beq.n	8001a34 <speed_function_LCD.2+0x34>
 8001a18:	d814      	bhi.n	8001a44 <speed_function_LCD.2+0x44>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <speed_function_LCD.2+0x24>
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d004      	beq.n	8001a2c <speed_function_LCD.2+0x2c>
			break;
		case 3:	// Case 3: se intra atunci cand se ajunge la treapta 3 de viteza
			Display_master_function(4); // Se apeleaza functia master Display_mod_lucru_display() cu paramentrul 4 (treapta 4)
			break;
		}
	}
 8001a22:	e00f      	b.n	8001a44 <speed_function_LCD.2+0x44>
			Display_master_function(0); // Se apeleaza functia master Display_mod_lucru_Display() cu parametrul 0 (reset/oprire)
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7fe fce5 	bl	80003f4 <Display_master_function>
			break;
 8001a2a:	e00b      	b.n	8001a44 <speed_function_LCD.2+0x44>
			Display_master_function(2); // Se apeleaza functia master Display_mod_lucru_Display() cu parametrul 2 (treapta 1)
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7fe fce1 	bl	80003f4 <Display_master_function>
			break;
 8001a32:	e007      	b.n	8001a44 <speed_function_LCD.2+0x44>
			Display_master_function(3); // Se apeleaza functia master Display_mod_lucru_Display() cu parametrul 3 (treapta 2)
 8001a34:	2003      	movs	r0, #3
 8001a36:	f7fe fcdd 	bl	80003f4 <Display_master_function>
			break;
 8001a3a:	e003      	b.n	8001a44 <speed_function_LCD.2+0x44>
			Display_master_function(4); // Se apeleaza functia master Display_mod_lucru_display() cu paramentrul 4 (treapta 4)
 8001a3c:	2004      	movs	r0, #4
 8001a3e:	f7fe fcd9 	bl	80003f4 <Display_master_function>
			break;
 8001a42:	46c0      	nop			; (mov r8, r8)
	}
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20002ab0 	.word	0x20002ab0

08001a50 <Task_LCD>:
void Task_LCD(void *argument) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	2318      	movs	r3, #24
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	60fb      	str	r3, [r7, #12]

	for (;;) {
		if (system_initialized == 1) {
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <Task_LCD+0x6c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d124      	bne.n	8001ab0 <Task_LCD+0x60>
			switch (display_system_mode) {
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <Task_LCD+0x70>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d821      	bhi.n	8001ab2 <Task_LCD+0x62>
 8001a6e:	009a      	lsls	r2, r3, #2
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <Task_LCD+0x74>)
 8001a72:	18d3      	adds	r3, r2, r3
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	469f      	mov	pc, r3
			case 0:							// Case 0: modul idle/reset
				Display_master_function(0); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 0 (idle/reset)
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7fe fcbb 	bl	80003f4 <Display_master_function>
				break;
 8001a7e:	e018      	b.n	8001ab2 <Task_LCD+0x62>
			case 1:							// Case 1: modul wipe x1
				Display_master_function(1); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 1 (wipe x1)
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7fe fcb7 	bl	80003f4 <Display_master_function>
				break;
 8001a86:	e014      	b.n	8001ab2 <Task_LCD+0x62>
			case 2:	// Case 2: modul de lucru in trepte, cazul incrementare treapta de viteza
				speed_function_LCD(); // Se apeleaza functia lucru_in_trepte_LCD()
 8001a88:	230c      	movs	r3, #12
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	469c      	mov	ip, r3
 8001a8e:	f7ff ffb7 	bl	8001a00 <speed_function_LCD.2>
				break;
 8001a92:	e00e      	b.n	8001ab2 <Task_LCD+0x62>
			case 3:	// Case 3: modul de lucru in trepte, cazul decrementare treapta de viteza
				speed_function_LCD(); // Se apeleaza functia lucru_in_trepte_LCD()
 8001a94:	230c      	movs	r3, #12
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	469c      	mov	ip, r3
 8001a9a:	f7ff ffb1 	bl	8001a00 <speed_function_LCD.2>
				break;
 8001a9e:	e008      	b.n	8001ab2 <Task_LCD+0x62>
			case 4:							// Case 4: modul spalare parbriz
				Display_master_function(5); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 4 (spalare parbriz)
 8001aa0:	2005      	movs	r0, #5
 8001aa2:	f7fe fca7 	bl	80003f4 <Display_master_function>
				break;
 8001aa6:	e004      	b.n	8001ab2 <Task_LCD+0x62>
			case 5:							// Case 5: modul spalare luneta
				Display_master_function(6); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 5 (spalare luneta)
 8001aa8:	2006      	movs	r0, #6
 8001aaa:	f7fe fca3 	bl	80003f4 <Display_master_function>
				break;
 8001aae:	e000      	b.n	8001ab2 <Task_LCD+0x62>
			}
		}
 8001ab0:	46c0      	nop			; (mov r8, r8)
		osDelay(1); // Task-ul se reapeleaza automat la 1ms
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f004 f822 	bl	8005afc <osDelay>
		if (system_initialized == 1) {
 8001ab8:	e7d1      	b.n	8001a5e <Task_LCD+0xe>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	20002ad8 	.word	0x20002ad8
 8001ac0:	20002ad4 	.word	0x20002ad4
 8001ac4:	080080e0 	.word	0x080080e0

08001ac8 <Task_CounterUp>:
 * @brief Function implementing the Counter thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task_CounterUp */
void Task_CounterUp(void *argument) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////   Implementare Task TimerUp   ///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	for (;;) {
		timer++;		// Incrementeaza timer pentru lucrul cu servomotorul
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <Task_CounterUp+0x24>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <Task_CounterUp+0x24>)
 8001ad8:	601a      	str	r2, [r3, #0]
		aux_timer++; // Incrementeaza timer_trepte pentru evitarea incrementarii/decrementarii de mai multe ori a treptei de viteza 
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <Task_CounterUp+0x28>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <Task_CounterUp+0x28>)
 8001ae2:	601a      	str	r2, [r3, #0]

		osDelay(1);	// Task-ul se reapeleaza la 1ms astfel ca ambele timere masoara in ms
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f004 f809 	bl	8005afc <osDelay>
		timer++;		// Incrementeaza timer pentru lucrul cu servomotorul
 8001aea:	e7f1      	b.n	8001ad0 <Task_CounterUp+0x8>
 8001aec:	20002adc 	.word	0x20002adc
 8001af0:	20002ae0 	.word	0x20002ae0

08001af4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_MspInit+0x50>)
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_MspInit+0x50>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	619a      	str	r2, [r3, #24]
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_MspInit+0x50>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_MspInit+0x50>)
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_MspInit+0x50>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0549      	lsls	r1, r1, #21
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	61da      	str	r2, [r3, #28]
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_MspInit+0x50>)
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	055b      	lsls	r3, r3, #21
 8001b34:	4013      	ands	r3, r2
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2103      	movs	r1, #3
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 ff46 	bl	80029d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b08b      	sub	sp, #44	; 0x2c
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	2414      	movs	r4, #20
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	0018      	movs	r0, r3
 8001b62:	2314      	movs	r3, #20
 8001b64:	001a      	movs	r2, r3
 8001b66:	2100      	movs	r1, #0
 8001b68:	f006 f93f 	bl	8007dea <memset>
  if(hadc->Instance==ADC1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a35      	ldr	r2, [pc, #212]	; (8001c48 <HAL_ADC_MspInit+0xf4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d163      	bne.n	8001c3e <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_ADC_MspInit+0xf8>)
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_ADC_MspInit+0xf8>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0089      	lsls	r1, r1, #2
 8001b80:	430a      	orrs	r2, r1
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_ADC_MspInit+0xf8>)
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_ADC_MspInit+0xf8>)
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_ADC_MspInit+0xf8>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0309      	lsls	r1, r1, #12
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_ADC_MspInit+0xf8>)
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	031b      	lsls	r3, r3, #12
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	221c      	movs	r2, #28
 8001bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc0:	193b      	adds	r3, r7, r4
 8001bc2:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <HAL_ADC_MspInit+0xfc>)
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	0010      	movs	r0, r2
 8001bc8:	f001 f8ec 	bl	8002da4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001bce:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_ADC_MspInit+0x104>)
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001bfc:	22c0      	movs	r2, #192	; 0xc0
 8001bfe:	0192      	lsls	r2, r2, #6
 8001c00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 ff17 	bl	8002a38 <HAL_DMA_Init>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001c0e:	f7ff ff71 	bl	8001af4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <HAL_ADC_MspInit+0x108>)
 8001c14:	23a8      	movs	r3, #168	; 0xa8
 8001c16:	58d3      	ldr	r3, [r2, r3]
 8001c18:	4910      	ldr	r1, [pc, #64]	; (8001c5c <HAL_ADC_MspInit+0x108>)
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	22a8      	movs	r2, #168	; 0xa8
 8001c20:	508b      	str	r3, [r1, r2]
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_ADC_MspInit+0x108>)
 8001c24:	23a8      	movs	r3, #168	; 0xa8
 8001c26:	58d3      	ldr	r3, [r2, r3]
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <HAL_ADC_MspInit+0x108>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	22a8      	movs	r2, #168	; 0xa8
 8001c30:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_ADC_MspInit+0x100>)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b00b      	add	sp, #44	; 0x2c
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40012400 	.word	0x40012400
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48000800 	.word	0x48000800
 8001c54:	200028e8 	.word	0x200028e8
 8001c58:	40020008 	.word	0x40020008
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	2414      	movs	r4, #20
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	2314      	movs	r3, #20
 8001c70:	001a      	movs	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	f006 f8b9 	bl	8007dea <memset>
  if(hspi->Instance==SPI1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <HAL_SPI_MspInit+0x90>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d132      	bne.n	8001ce8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_SPI_MspInit+0x94>)
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_SPI_MspInit+0x94>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	0149      	lsls	r1, r1, #5
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	619a      	str	r2, [r3, #24]
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_SPI_MspInit+0x94>)
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	015b      	lsls	r3, r3, #5
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_SPI_MspInit+0x94>)
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_SPI_MspInit+0x94>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0289      	lsls	r1, r1, #10
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	615a      	str	r2, [r3, #20]
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_SPI_MspInit+0x94>)
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	029b      	lsls	r3, r3, #10
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cba:	0021      	movs	r1, r4
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	22a0      	movs	r2, #160	; 0xa0
 8001cc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	187a      	adds	r2, r7, r1
 8001cdc:	2390      	movs	r3, #144	; 0x90
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	0011      	movs	r1, r2
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f001 f85e 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b00b      	add	sp, #44	; 0x2c
 8001cee:	bd90      	pop	{r4, r7, pc}
 8001cf0:	40013000 	.word	0x40013000
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_TIM_Base_MspInit+0xac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d147      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_TIM_Base_MspInit+0xb0>)
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_TIM_Base_MspInit+0xb0>)
 8001d10:	2102      	movs	r1, #2
 8001d12:	430a      	orrs	r2, r1
 8001d14:	61da      	str	r2, [r3, #28]
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_TIM_Base_MspInit+0xb0>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_TIM_Base_MspInit+0xb8>)
 8001d26:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	0052      	lsls	r2, r2, #1
 8001d40:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	00d2      	lsls	r2, r2, #3
 8001d48:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 fe6d 	bl	8002a38 <HAL_DMA_Init>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001d62:	f7ff fec7 	bl	8001af4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DEFAULT);
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <HAL_TIM_Base_MspInit+0xbc>)
 8001d68:	23a8      	movs	r3, #168	; 0xa8
 8001d6a:	58d3      	ldr	r3, [r2, r3]
 8001d6c:	4911      	ldr	r1, [pc, #68]	; (8001db4 <HAL_TIM_Base_MspInit+0xbc>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_TIM_Base_MspInit+0xc0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	22a8      	movs	r2, #168	; 0xa8
 8001d74:	508b      	str	r3, [r1, r2]
 8001d76:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_TIM_Base_MspInit+0xbc>)
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_TIM_Base_MspInit+0xbc>)
 8001d7a:	23a8      	movs	r3, #168	; 0xa8
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	22a8      	movs	r2, #168	; 0xa8
 8001d80:	508b      	str	r3, [r1, r2]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a09      	ldr	r2, [pc, #36]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d92:	621a      	str	r2, [r3, #32]
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_TIM_Base_MspInit+0xb4>)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40021000 	.word	0x40021000
 8001dac:	200029d8 	.word	0x200029d8
 8001db0:	40020030 	.word	0x40020030
 8001db4:	40020000 	.word	0x40020000
 8001db8:	fffff0ff 	.word	0xfffff0ff

08001dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	240c      	movs	r4, #12
 8001dc6:	193b      	adds	r3, r7, r4
 8001dc8:	0018      	movs	r0, r3
 8001dca:	2314      	movs	r3, #20
 8001dcc:	001a      	movs	r2, r3
 8001dce:	2100      	movs	r1, #0
 8001dd0:	f006 f80b 	bl	8007dea <memset>
  if(htim->Instance==TIM3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_TIM_MspPostInit+0x74>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d123      	bne.n	8001e26 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_TIM_MspPostInit+0x78>)
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_TIM_MspPostInit+0x78>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	02c9      	lsls	r1, r1, #11
 8001de8:	430a      	orrs	r2, r1
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_TIM_MspPostInit+0x78>)
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	02db      	lsls	r3, r3, #11
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dfa:	0021      	movs	r1, r4
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	2202      	movs	r2, #2
 8001e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2202      	movs	r2, #2
 8001e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2201      	movs	r2, #1
 8001e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_TIM_MspPostInit+0x7c>)
 8001e1e:	0019      	movs	r1, r3
 8001e20:	0010      	movs	r0, r2
 8001e22:	f000 ffbf 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b009      	add	sp, #36	; 0x24
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48000400 	.word	0x48000400

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	2414      	movs	r4, #20
 8001e46:	193b      	adds	r3, r7, r4
 8001e48:	0018      	movs	r0, r3
 8001e4a:	2314      	movs	r3, #20
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	f005 ffcb 	bl	8007dea <memset>
  if(huart->Instance==USART2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d132      	bne.n	8001ec4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0289      	lsls	r1, r1, #10
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	61da      	str	r2, [r3, #28]
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0289      	lsls	r1, r1, #10
 8001e84:	430a      	orrs	r2, r1
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	029b      	lsls	r3, r3, #10
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e96:	0021      	movs	r1, r4
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	187a      	adds	r2, r7, r1
 8001eb8:	2390      	movs	r3, #144	; 0x90
 8001eba:	05db      	lsls	r3, r3, #23
 8001ebc:	0011      	movs	r1, r2
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 ff70 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b00b      	add	sp, #44	; 0x2c
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	40004400 	.word	0x40004400
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee4:	f000 f89a 	bl	800201c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ee8:	f005 f8da 	bl	80070a0 <xTaskGetSchedulerState>
 8001eec:	0003      	movs	r3, r0
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ef2:	f005 fd69 	bl	80079c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <DMA1_Ch1_IRQHandler+0x14>)
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 fe46 	bl	8002b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	200028e8 	.word	0x200028e8

08001f14 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fe3a 	bl	8002b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	200029d8 	.word	0x200029d8

08001f2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3e:	490e      	ldr	r1, [pc, #56]	; (8001f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <LoopForever+0xe>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f54:	4c0b      	ldr	r4, [pc, #44]	; (8001f84 <LoopForever+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f62:	f7ff ffe3 	bl	8001f2c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f66:	f005 ff11 	bl	8007d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f6a:	f7ff f845 	bl	8000ff8 <main>

08001f6e <LoopForever>:

LoopForever:
    b LoopForever
 8001f6e:	e7fe      	b.n	8001f6e <LoopForever>
  ldr   r0, =_estack
 8001f70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	20002884 	.word	0x20002884
  ldr r2, =_sidata
 8001f7c:	080081a0 	.word	0x080081a0
  ldr r2, =_sbss
 8001f80:	20002884 	.word	0x20002884
  ldr r4, =_ebss
 8001f84:	200044f4 	.word	0x200044f4

08001f88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC1_COMP_IRQHandler>
	...

08001f8c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_Init+0x24>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_Init+0x24>)
 8001f96:	2110      	movs	r1, #16
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 f809 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa2:	f7ff fdad 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_InitTick+0x5c>)
 8001fbe:	681c      	ldr	r4, [r3, #0]
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_InitTick+0x60>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	23fa      	movs	r3, #250	; 0xfa
 8001fc8:	0098      	lsls	r0, r3, #2
 8001fca:	f7fe f89d 	bl	8000108 <__udivsi3>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	0020      	movs	r0, r4
 8001fd4:	f7fe f898 	bl	8000108 <__udivsi3>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 fd1f 	bl	8002a1e <HAL_SYSTICK_Config>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e00f      	b.n	8002008 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d80b      	bhi.n	8002006 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 fcec 	bl	80029d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_InitTick+0x64>)
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b003      	add	sp, #12
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	20002810 	.word	0x20002810
 8002014:	20002818 	.word	0x20002818
 8002018:	20002814 	.word	0x20002814

0800201c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_IncTick+0x1c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	001a      	movs	r2, r3
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_IncTick+0x20>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	18d2      	adds	r2, r2, r3
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_IncTick+0x20>)
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	20002818 	.word	0x20002818
 800203c:	20002ae8 	.word	0x20002ae8

08002040 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b02      	ldr	r3, [pc, #8]	; (8002050 <HAL_GetTick+0x10>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	20002ae8 	.word	0x20002ae8

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff fff0 	bl	8002040 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	001a      	movs	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	189b      	adds	r3, r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	f7ff ffe0 	bl	8002040 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	20002818 	.word	0x20002818

0800209c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	230f      	movs	r3, #15
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e125      	b.n	8002306 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10a      	bne.n	80020d8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2234      	movs	r2, #52	; 0x34
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7ff fd3e 	bl	8001b54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	2210      	movs	r2, #16
 80020de:	4013      	ands	r3, r2
 80020e0:	d000      	beq.n	80020e4 <HAL_ADC_Init+0x48>
 80020e2:	e103      	b.n	80022ec <HAL_ADC_Init+0x250>
 80020e4:	230f      	movs	r3, #15
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d000      	beq.n	80020f0 <HAL_ADC_Init+0x54>
 80020ee:	e0fd      	b.n	80022ec <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2204      	movs	r2, #4
 80020f8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80020fa:	d000      	beq.n	80020fe <HAL_ADC_Init+0x62>
 80020fc:	e0f6      	b.n	80022ec <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	4a83      	ldr	r2, [pc, #524]	; (8002310 <HAL_ADC_Init+0x274>)
 8002104:	4013      	ands	r3, r2
 8002106:	2202      	movs	r2, #2
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2203      	movs	r2, #3
 8002116:	4013      	ands	r3, r2
 8002118:	2b01      	cmp	r3, #1
 800211a:	d112      	bne.n	8002142 <HAL_ADC_Init+0xa6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	2b01      	cmp	r3, #1
 8002128:	d009      	beq.n	800213e <HAL_ADC_Init+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	401a      	ands	r2, r3
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	429a      	cmp	r2, r3
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Init+0xa6>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_ADC_Init+0xa8>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2218      	movs	r2, #24
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	0899      	lsrs	r1, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4964      	ldr	r1, [pc, #400]	; (8002314 <HAL_ADC_Init+0x278>)
 8002182:	400a      	ands	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7e1b      	ldrb	r3, [r3, #24]
 800218a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e5b      	ldrb	r3, [r3, #25]
 8002190:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002192:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7e9b      	ldrb	r3, [r3, #26]
 8002198:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800219a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d002      	beq.n	80021aa <HAL_ADC_Init+0x10e>
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	015b      	lsls	r3, r3, #5
 80021a8:	e000      	b.n	80021ac <HAL_ADC_Init+0x110>
 80021aa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021ac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80021b2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_Init+0x124>
 80021bc:	2304      	movs	r3, #4
 80021be:	e000      	b.n	80021c2 <HAL_ADC_Init+0x126>
 80021c0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80021c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2124      	movs	r1, #36	; 0x24
 80021c8:	5c5b      	ldrb	r3, [r3, r1]
 80021ca:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021cc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7edb      	ldrb	r3, [r3, #27]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d115      	bne.n	8002208 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e9b      	ldrb	r3, [r3, #26]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	0252      	lsls	r2, r2, #9
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	e00b      	b.n	8002208 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	2220      	movs	r2, #32
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2201      	movs	r2, #1
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	23c2      	movs	r3, #194	; 0xc2
 800220e:	33ff      	adds	r3, #255	; 0xff
 8002210:	429a      	cmp	r2, r3
 8002212:	d007      	beq.n	8002224 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800221c:	4313      	orrs	r3, r2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4313      	orrs	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	055b      	lsls	r3, r3, #21
 800223c:	429a      	cmp	r2, r3
 800223e:	d01b      	beq.n	8002278 <HAL_ADC_Init+0x1dc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d017      	beq.n	8002278 <HAL_ADC_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	2b02      	cmp	r3, #2
 800224e:	d013      	beq.n	8002278 <HAL_ADC_Init+0x1dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b03      	cmp	r3, #3
 8002256:	d00f      	beq.n	8002278 <HAL_ADC_Init+0x1dc>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	2b04      	cmp	r3, #4
 800225e:	d00b      	beq.n	8002278 <HAL_ADC_Init+0x1dc>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b05      	cmp	r3, #5
 8002266:	d007      	beq.n	8002278 <HAL_ADC_Init+0x1dc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	2b06      	cmp	r3, #6
 800226e:	d003      	beq.n	8002278 <HAL_ADC_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	2b07      	cmp	r3, #7
 8002276:	d112      	bne.n	800229e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2107      	movs	r1, #7
 8002284:	438a      	bics	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6959      	ldr	r1, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	2207      	movs	r2, #7
 8002294:	401a      	ands	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_ADC_Init+0x27c>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d10b      	bne.n	80022c6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	2203      	movs	r2, #3
 80022ba:	4393      	bics	r3, r2
 80022bc:	2201      	movs	r2, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022c4:	e01c      	b.n	8002300 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	2212      	movs	r2, #18
 80022cc:	4393      	bics	r3, r2
 80022ce:	2210      	movs	r2, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	2201      	movs	r2, #1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80022e2:	230f      	movs	r3, #15
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022ea:	e009      	b.n	8002300 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	2210      	movs	r2, #16
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80022f8:	230f      	movs	r3, #15
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002300:	230f      	movs	r3, #15
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	fffffefd 	.word	0xfffffefd
 8002314:	fffe0219 	.word	0xfffe0219
 8002318:	833fffe7 	.word	0x833fffe7

0800231c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002328:	2317      	movs	r3, #23
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2204      	movs	r2, #4
 8002338:	4013      	ands	r3, r2
 800233a:	d15e      	bne.n	80023fa <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2234      	movs	r2, #52	; 0x34
 8002340:	5c9b      	ldrb	r3, [r3, r2]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_Start_DMA+0x2e>
 8002346:	2302      	movs	r3, #2
 8002348:	e05e      	b.n	8002408 <HAL_ADC_Start_DMA+0xec>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2234      	movs	r2, #52	; 0x34
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	7e5b      	ldrb	r3, [r3, #25]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d007      	beq.n	800236a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800235a:	2317      	movs	r3, #23
 800235c:	18fc      	adds	r4, r7, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 f983 	bl	800266c <ADC_Enable>
 8002366:	0003      	movs	r3, r0
 8002368:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800236a:	2317      	movs	r3, #23
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d146      	bne.n	8002402 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_ADC_Start_DMA+0xf4>)
 800237a:	4013      	ands	r3, r2
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	0052      	lsls	r2, r2, #1
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2234      	movs	r2, #52	; 0x34
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <HAL_ADC_Start_DMA+0xf8>)
 800239a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_ADC_Start_DMA+0xfc>)
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_ADC_Start_DMA+0x100>)
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	221c      	movs	r2, #28
 80023b2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2110      	movs	r1, #16
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3340      	adds	r3, #64	; 0x40
 80023de:	0019      	movs	r1, r3
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f000 fb70 	bl	8002ac8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2104      	movs	r1, #4
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e003      	b.n	8002402 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023fa:	2317      	movs	r3, #23
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002402:	2317      	movs	r3, #23
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b007      	add	sp, #28
 800240e:	bd90      	pop	{r4, r7, pc}
 8002410:	fffff0fe 	.word	0xfffff0fe
 8002414:	08002775 	.word	0x08002775
 8002418:	08002829 	.word	0x08002829
 800241c:	08002847 	.word	0x08002847

08002420 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245a:	230f      	movs	r3, #15
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	055b      	lsls	r3, r3, #21
 800246e:	429a      	cmp	r2, r3
 8002470:	d011      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x46>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d00d      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x46>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	2b02      	cmp	r3, #2
 8002480:	d009      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x46>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	2b03      	cmp	r3, #3
 8002488:	d005      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x46>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	2b04      	cmp	r3, #4
 8002490:	d001      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x46>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2234      	movs	r2, #52	; 0x34
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x54>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e0d0      	b.n	8002646 <HAL_ADC_ConfigChannel+0x1f6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2234      	movs	r2, #52	; 0x34
 80024a8:	2101      	movs	r1, #1
 80024aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2204      	movs	r2, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	d000      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x6a>
 80024b8:	e0b4      	b.n	8002624 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a64      	ldr	r2, [pc, #400]	; (8002650 <HAL_ADC_ConfigChannel+0x200>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d100      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x76>
 80024c4:	e082      	b.n	80025cc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	409a      	lsls	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	055b      	lsls	r3, r3, #21
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d037      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d033      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d02f      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d02b      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2b04      	cmp	r3, #4
 8002506:	d027      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	2b05      	cmp	r3, #5
 800250e:	d023      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2b06      	cmp	r3, #6
 8002516:	d01f      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2b07      	cmp	r3, #7
 800251e:	d01b      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2107      	movs	r1, #7
 800252c:	400b      	ands	r3, r1
 800252e:	429a      	cmp	r2, r3
 8002530:	d012      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2107      	movs	r1, #7
 800253e:	438a      	bics	r2, r1
 8002540:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6959      	ldr	r1, [r3, #20]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2207      	movs	r2, #7
 800254e:	401a      	ands	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b10      	cmp	r3, #16
 800255e:	d007      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x120>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b11      	cmp	r3, #17
 8002566:	d003      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x120>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b12      	cmp	r3, #18
 800256e:	d163      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002570:	4b38      	ldr	r3, [pc, #224]	; (8002654 <HAL_ADC_ConfigChannel+0x204>)
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b10      	cmp	r3, #16
 800257a:	d009      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x140>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b11      	cmp	r3, #17
 8002582:	d102      	bne.n	800258a <HAL_ADC_ConfigChannel+0x13a>
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	03db      	lsls	r3, r3, #15
 8002588:	e004      	b.n	8002594 <HAL_ADC_ConfigChannel+0x144>
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	045b      	lsls	r3, r3, #17
 800258e:	e001      	b.n	8002594 <HAL_ADC_ConfigChannel+0x144>
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_ADC_ConfigChannel+0x204>)
 8002596:	430b      	orrs	r3, r1
 8002598:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d14a      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_ADC_ConfigChannel+0x208>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	492d      	ldr	r1, [pc, #180]	; (800265c <HAL_ADC_ConfigChannel+0x20c>)
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7fd fdad 	bl	8000108 <__udivsi3>
 80025ae:	0003      	movs	r3, r0
 80025b0:	001a      	movs	r2, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_ConfigChannel+0x16e>
 80025ca:	e035      	b.n	8002638 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2101      	movs	r1, #1
 80025d8:	4099      	lsls	r1, r3
 80025da:	000b      	movs	r3, r1
 80025dc:	43d9      	mvns	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	400a      	ands	r2, r1
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d007      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x1ae>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b11      	cmp	r3, #17
 80025f4:	d003      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x1ae>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b12      	cmp	r3, #18
 80025fc:	d11c      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_ADC_ConfigChannel+0x204>)
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b10      	cmp	r3, #16
 8002608:	d007      	beq.n	800261a <HAL_ADC_ConfigChannel+0x1ca>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b11      	cmp	r3, #17
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x1c6>
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_ADC_ConfigChannel+0x210>)
 8002614:	e002      	b.n	800261c <HAL_ADC_ConfigChannel+0x1cc>
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_ADC_ConfigChannel+0x214>)
 8002618:	e000      	b.n	800261c <HAL_ADC_ConfigChannel+0x1cc>
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_ADC_ConfigChannel+0x218>)
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <HAL_ADC_ConfigChannel+0x204>)
 800261e:	400b      	ands	r3, r1
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e009      	b.n	8002638 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	2220      	movs	r2, #32
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002630:	230f      	movs	r3, #15
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2234      	movs	r2, #52	; 0x34
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002640:	230f      	movs	r3, #15
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b004      	add	sp, #16
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	00001001 	.word	0x00001001
 8002654:	40012708 	.word	0x40012708
 8002658:	20002810 	.word	0x20002810
 800265c:	000f4240 	.word	0x000f4240
 8002660:	ffbfffff 	.word	0xffbfffff
 8002664:	feffffff 	.word	0xfeffffff
 8002668:	ff7fffff 	.word	0xff7fffff

0800266c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2203      	movs	r2, #3
 8002684:	4013      	ands	r3, r2
 8002686:	2b01      	cmp	r3, #1
 8002688:	d112      	bne.n	80026b0 <ADC_Enable+0x44>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	4013      	ands	r3, r2
 8002694:	2b01      	cmp	r3, #1
 8002696:	d009      	beq.n	80026ac <ADC_Enable+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	401a      	ands	r2, r3
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d101      	bne.n	80026b0 <ADC_Enable+0x44>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <ADC_Enable+0x46>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d152      	bne.n	800275c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <ADC_Enable+0xfc>)
 80026be:	4013      	ands	r3, r2
 80026c0:	d00d      	beq.n	80026de <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	2210      	movs	r2, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	2201      	movs	r2, #1
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e03f      	b.n	800275e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <ADC_Enable+0x100>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	491f      	ldr	r1, [pc, #124]	; (8002770 <ADC_Enable+0x104>)
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fd fd07 	bl	8000108 <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026fe:	e002      	b.n	8002706 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3b01      	subs	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800270c:	f7ff fc98 	bl	8002040 <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002714:	e01b      	b.n	800274e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002716:	f7ff fc93 	bl	8002040 <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d914      	bls.n	800274e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2201      	movs	r2, #1
 800272c:	4013      	ands	r3, r2
 800272e:	2b01      	cmp	r3, #1
 8002730:	d00d      	beq.n	800274e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	2210      	movs	r2, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2201      	movs	r2, #1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e007      	b.n	800275e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	4013      	ands	r3, r2
 8002758:	2b01      	cmp	r3, #1
 800275a:	d1dc      	bne.n	8002716 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	80000017 	.word	0x80000017
 800276c:	20002810 	.word	0x20002810
 8002770:	000f4240 	.word	0x000f4240

08002774 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	2250      	movs	r2, #80	; 0x50
 8002788:	4013      	ands	r3, r2
 800278a:	d140      	bne.n	800280e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	d12d      	bne.n	8002804 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d129      	bne.n	8002804 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2208      	movs	r2, #8
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d122      	bne.n	8002804 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	d110      	bne.n	80027ec <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	210c      	movs	r1, #12
 80027d6:	438a      	bics	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <ADC_DMAConvCplt+0xb0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	2201      	movs	r2, #1
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
 80027ea:	e00b      	b.n	8002804 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	2220      	movs	r2, #32
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	2201      	movs	r2, #1
 80027fe:	431a      	orrs	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	0018      	movs	r0, r3
 8002808:	f7ff fe0a 	bl	8002420 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800280c:	e005      	b.n	800281a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	0010      	movs	r0, r2
 8002818:	4798      	blx	r3
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	fffffefe 	.word	0xfffffefe

08002828 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff fdf9 	bl	8002430 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}

08002846 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	431a      	orrs	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	2204      	movs	r2, #4
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	0018      	movs	r0, r3
 8002870:	f7ff fde6 	bl	8002440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	0002      	movs	r2, r0
 8002884:	1dfb      	adds	r3, r7, #7
 8002886:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002888:	1dfb      	adds	r3, r7, #7
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b7f      	cmp	r3, #127	; 0x7f
 800288e:	d809      	bhi.n	80028a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	001a      	movs	r2, r3
 8002896:	231f      	movs	r3, #31
 8002898:	401a      	ands	r2, r3
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_EnableIRQ+0x30>)
 800289c:	2101      	movs	r1, #1
 800289e:	4091      	lsls	r1, r2
 80028a0:	000a      	movs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
  }
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	0002      	movs	r2, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b7f      	cmp	r3, #127	; 0x7f
 80028c4:	d828      	bhi.n	8002918 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c6:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <__NVIC_SetPriority+0xd4>)
 80028c8:	1dfb      	adds	r3, r7, #7
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	33c0      	adds	r3, #192	; 0xc0
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	589b      	ldr	r3, [r3, r2]
 80028d6:	1dfa      	adds	r2, r7, #7
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	0011      	movs	r1, r2
 80028dc:	2203      	movs	r2, #3
 80028de:	400a      	ands	r2, r1
 80028e0:	00d2      	lsls	r2, r2, #3
 80028e2:	21ff      	movs	r1, #255	; 0xff
 80028e4:	4091      	lsls	r1, r2
 80028e6:	000a      	movs	r2, r1
 80028e8:	43d2      	mvns	r2, r2
 80028ea:	401a      	ands	r2, r3
 80028ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	401a      	ands	r2, r3
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	0018      	movs	r0, r3
 80028fc:	2303      	movs	r3, #3
 80028fe:	4003      	ands	r3, r0
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002904:	481f      	ldr	r0, [pc, #124]	; (8002984 <__NVIC_SetPriority+0xd4>)
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b25b      	sxtb	r3, r3
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	430a      	orrs	r2, r1
 8002910:	33c0      	adds	r3, #192	; 0xc0
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002916:	e031      	b.n	800297c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <__NVIC_SetPriority+0xd8>)
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	0019      	movs	r1, r3
 8002920:	230f      	movs	r3, #15
 8002922:	400b      	ands	r3, r1
 8002924:	3b08      	subs	r3, #8
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	3306      	adds	r3, #6
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	18d3      	adds	r3, r2, r3
 800292e:	3304      	adds	r3, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1dfa      	adds	r2, r7, #7
 8002934:	7812      	ldrb	r2, [r2, #0]
 8002936:	0011      	movs	r1, r2
 8002938:	2203      	movs	r2, #3
 800293a:	400a      	ands	r2, r1
 800293c:	00d2      	lsls	r2, r2, #3
 800293e:	21ff      	movs	r1, #255	; 0xff
 8002940:	4091      	lsls	r1, r2
 8002942:	000a      	movs	r2, r1
 8002944:	43d2      	mvns	r2, r2
 8002946:	401a      	ands	r2, r3
 8002948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	22ff      	movs	r2, #255	; 0xff
 8002950:	401a      	ands	r2, r3
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	0018      	movs	r0, r3
 8002958:	2303      	movs	r3, #3
 800295a:	4003      	ands	r3, r0
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002960:	4809      	ldr	r0, [pc, #36]	; (8002988 <__NVIC_SetPriority+0xd8>)
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	001c      	movs	r4, r3
 8002968:	230f      	movs	r3, #15
 800296a:	4023      	ands	r3, r4
 800296c:	3b08      	subs	r3, #8
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	430a      	orrs	r2, r1
 8002972:	3306      	adds	r3, #6
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	18c3      	adds	r3, r0, r3
 8002978:	3304      	adds	r3, #4
 800297a:	601a      	str	r2, [r3, #0]
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b003      	add	sp, #12
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	045b      	lsls	r3, r3, #17
 800299c:	429a      	cmp	r2, r3
 800299e:	d301      	bcc.n	80029a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a0:	2301      	movs	r3, #1
 80029a2:	e010      	b.n	80029c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <SysTick_Config+0x44>)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	3a01      	subs	r2, #1
 80029aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ac:	2301      	movs	r3, #1
 80029ae:	425b      	negs	r3, r3
 80029b0:	2103      	movs	r1, #3
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7ff ff7c 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <SysTick_Config+0x44>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SysTick_Config+0x44>)
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	210f      	movs	r1, #15
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	1c02      	adds	r2, r0, #0
 80029e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	0011      	movs	r1, r2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b004      	add	sp, #16
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	0002      	movs	r2, r0
 8002a06:	1dfb      	adds	r3, r7, #7
 8002a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0a:	1dfb      	adds	r3, r7, #7
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff ff33 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff ffaf 	bl	800298c <SysTick_Config>
 8002a2e:	0003      	movs	r3, r0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e036      	b.n	8002abc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2221      	movs	r2, #33	; 0x21
 8002a52:	2102      	movs	r1, #2
 8002a54:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_DMA_Init+0x8c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f946 	bl	8002d30 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2221      	movs	r2, #33	; 0x21
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}  
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b004      	add	sp, #16
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	ffffc00f 	.word	0xffffc00f

08002ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2317      	movs	r3, #23
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Start_IT+0x24>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e04f      	b.n	8002b8c <HAL_DMA_Start_IT+0xc4>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2221      	movs	r2, #33	; 0x21
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d13a      	bne.n	8002b76 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2221      	movs	r2, #33	; 0x21
 8002b04:	2102      	movs	r1, #2
 8002b06:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f8d7 	bl	8002cd8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	210e      	movs	r1, #14
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e00f      	b.n	8002b64 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	210a      	movs	r1, #10
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2104      	movs	r1, #4
 8002b60:	438a      	bics	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2101      	movs	r1, #1
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e007      	b.n	8002b86 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b7e:	2317      	movs	r3, #23
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002b86:	2317      	movs	r3, #23
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
} 
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b006      	add	sp, #24
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d024      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x72>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d020      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2104      	movs	r1, #4
 8002bdc:	438a      	bics	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	2104      	movs	r1, #4
 8002bea:	4091      	lsls	r1, r2
 8002bec:	000a      	movs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d100      	bne.n	8002bfa <HAL_DMA_IRQHandler+0x66>
 8002bf8:	e06a      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	0010      	movs	r0, r2
 8002c02:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	e064      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	0013      	movs	r3, r2
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4013      	ands	r3, r2
 8002c14:	d02b      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xda>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2220      	movs	r2, #32
 8002c26:	4013      	ands	r3, r2
 8002c28:	d10b      	bne.n	8002c42 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	210a      	movs	r1, #10
 8002c36:	438a      	bics	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4091      	lsls	r1, r2
 8002c4e:	000a      	movs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	2100      	movs	r1, #0
 8002c58:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	0010      	movs	r0, r2
 8002c6a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c6c:	e030      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2208      	movs	r2, #8
 8002c74:	409a      	lsls	r2, r3
 8002c76:	0013      	movs	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d028      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2208      	movs	r2, #8
 8002c82:	4013      	ands	r3, r2
 8002c84:	d024      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	210e      	movs	r1, #14
 8002c92:	438a      	bics	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4091      	lsls	r1, r2
 8002ca2:	000a      	movs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2221      	movs	r2, #33	; 0x21
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	2100      	movs	r1, #0
 8002cba:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	0010      	movs	r0, r2
 8002ccc:	4798      	blx	r3
    }
   }
}  
 8002cce:	e7ff      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x13c>
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b004      	add	sp, #16
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4091      	lsls	r1, r2
 8002cf2:	000a      	movs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d108      	bne.n	8002d18 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d16:	e007      	b.n	8002d28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	60da      	str	r2, [r3, #12]
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b004      	add	sp, #16
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <DMA_CalcBaseAndBitshift+0x60>)
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d810      	bhi.n	8002d66 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <DMA_CalcBaseAndBitshift+0x64>)
 8002d4a:	4694      	mov	ip, r2
 8002d4c:	4463      	add	r3, ip
 8002d4e:	2114      	movs	r1, #20
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7fd f9d9 	bl	8000108 <__udivsi3>
 8002d56:	0003      	movs	r3, r0
 8002d58:	009a      	lsls	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <DMA_CalcBaseAndBitshift+0x68>)
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002d64:	e00f      	b.n	8002d86 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <DMA_CalcBaseAndBitshift+0x6c>)
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	4463      	add	r3, ip
 8002d70:	2114      	movs	r1, #20
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7fd f9c8 	bl	8000108 <__udivsi3>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	009a      	lsls	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <DMA_CalcBaseAndBitshift+0x70>)
 8002d84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	40020407 	.word	0x40020407
 8002d94:	bffdfff8 	.word	0xbffdfff8
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	bffdfbf8 	.word	0xbffdfbf8
 8002da0:	40020400 	.word	0x40020400

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db2:	e155      	b.n	8003060 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4091      	lsls	r1, r2
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d100      	bne.n	8002dcc <HAL_GPIO_Init+0x28>
 8002dca:	e146      	b.n	800305a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d005      	beq.n	8002de4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d130      	bne.n	8002e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	409a      	lsls	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	43da      	mvns	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	0013      	movs	r3, r2
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	43da      	mvns	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	2201      	movs	r2, #1
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
 8002e38:	0013      	movs	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d017      	beq.n	8002e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	0013      	movs	r3, r2
 8002e62:	43da      	mvns	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	0013      	movs	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2203      	movs	r2, #3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d123      	bne.n	8002ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	08da      	lsrs	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3208      	adds	r2, #8
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	58d3      	ldr	r3, [r2, r3]
 8002e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2107      	movs	r1, #7
 8002eba:	400b      	ands	r3, r1
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3208      	adds	r2, #8
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	6939      	ldr	r1, [r7, #16]
 8002ed4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	0013      	movs	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	23c0      	movs	r3, #192	; 0xc0
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	4013      	ands	r3, r2
 8002f14:	d100      	bne.n	8002f18 <HAL_GPIO_Init+0x174>
 8002f16:	e0a0      	b.n	800305a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f18:	4b57      	ldr	r3, [pc, #348]	; (8003078 <HAL_GPIO_Init+0x2d4>)
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_GPIO_Init+0x2d4>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	430a      	orrs	r2, r1
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	4b54      	ldr	r3, [pc, #336]	; (8003078 <HAL_GPIO_Init+0x2d4>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f30:	4a52      	ldr	r2, [pc, #328]	; (800307c <HAL_GPIO_Init+0x2d8>)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	3302      	adds	r3, #2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	589b      	ldr	r3, [r3, r2]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2203      	movs	r2, #3
 8002f42:	4013      	ands	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	2390      	movs	r3, #144	; 0x90
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d019      	beq.n	8002f92 <HAL_GPIO_Init+0x1ee>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_GPIO_Init+0x2dc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_GPIO_Init+0x1ea>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a46      	ldr	r2, [pc, #280]	; (8003084 <HAL_GPIO_Init+0x2e0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00d      	beq.n	8002f8a <HAL_GPIO_Init+0x1e6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a45      	ldr	r2, [pc, #276]	; (8003088 <HAL_GPIO_Init+0x2e4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <HAL_GPIO_Init+0x1e2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a44      	ldr	r2, [pc, #272]	; (800308c <HAL_GPIO_Init+0x2e8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_GPIO_Init+0x1de>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e008      	b.n	8002f94 <HAL_GPIO_Init+0x1f0>
 8002f82:	2305      	movs	r3, #5
 8002f84:	e006      	b.n	8002f94 <HAL_GPIO_Init+0x1f0>
 8002f86:	2303      	movs	r3, #3
 8002f88:	e004      	b.n	8002f94 <HAL_GPIO_Init+0x1f0>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e002      	b.n	8002f94 <HAL_GPIO_Init+0x1f0>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_GPIO_Init+0x1f0>
 8002f92:	2300      	movs	r3, #0
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	2103      	movs	r1, #3
 8002f98:	400a      	ands	r2, r1
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	4093      	lsls	r3, r2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa4:	4935      	ldr	r1, [pc, #212]	; (800307c <HAL_GPIO_Init+0x2d8>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	3302      	adds	r3, #2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	025b      	lsls	r3, r3, #9
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002fdc:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003000:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43da      	mvns	r2, r3
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	035b      	lsls	r3, r3, #13
 800301e:	4013      	ands	r3, r2
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	43da      	mvns	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	039b      	lsls	r3, r3, #14
 8003048:	4013      	ands	r3, r2
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	40da      	lsrs	r2, r3
 8003068:	1e13      	subs	r3, r2, #0
 800306a:	d000      	beq.n	800306e <HAL_GPIO_Init+0x2ca>
 800306c:	e6a2      	b.n	8002db4 <HAL_GPIO_Init+0x10>
  } 
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b006      	add	sp, #24
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000
 8003080:	48000400 	.word	0x48000400
 8003084:	48000800 	.word	0x48000800
 8003088:	48000c00 	.word	0x48000c00
 800308c:	48001000 	.word	0x48001000
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	0008      	movs	r0, r1
 800309e:	0011      	movs	r1, r2
 80030a0:	1cbb      	adds	r3, r7, #2
 80030a2:	1c02      	adds	r2, r0, #0
 80030a4:	801a      	strh	r2, [r3, #0]
 80030a6:	1c7b      	adds	r3, r7, #1
 80030a8:	1c0a      	adds	r2, r1, #0
 80030aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	1c7b      	adds	r3, r7, #1
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b4:	1cbb      	adds	r3, r7, #2
 80030b6:	881a      	ldrh	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030be:	1cbb      	adds	r3, r7, #2
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b002      	add	sp, #8
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f000 fb76 	bl	80037d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	4013      	ands	r3, r2
 80030ec:	d100      	bne.n	80030f0 <HAL_RCC_OscConfig+0x20>
 80030ee:	e08e      	b.n	800320e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030f0:	4bc5      	ldr	r3, [pc, #788]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	220c      	movs	r2, #12
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d00e      	beq.n	800311a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030fc:	4bc2      	ldr	r3, [pc, #776]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	220c      	movs	r2, #12
 8003102:	4013      	ands	r3, r2
 8003104:	2b08      	cmp	r3, #8
 8003106:	d117      	bne.n	8003138 <HAL_RCC_OscConfig+0x68>
 8003108:	4bbf      	ldr	r3, [pc, #764]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	23c0      	movs	r3, #192	; 0xc0
 800310e:	025b      	lsls	r3, r3, #9
 8003110:	401a      	ands	r2, r3
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	025b      	lsls	r3, r3, #9
 8003116:	429a      	cmp	r2, r3
 8003118:	d10e      	bne.n	8003138 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311a:	4bbb      	ldr	r3, [pc, #748]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	029b      	lsls	r3, r3, #10
 8003122:	4013      	ands	r3, r2
 8003124:	d100      	bne.n	8003128 <HAL_RCC_OscConfig+0x58>
 8003126:	e071      	b.n	800320c <HAL_RCC_OscConfig+0x13c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d000      	beq.n	8003132 <HAL_RCC_OscConfig+0x62>
 8003130:	e06c      	b.n	800320c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	f000 fb4c 	bl	80037d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x80>
 8003140:	4bb1      	ldr	r3, [pc, #708]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4bb0      	ldr	r3, [pc, #704]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	0249      	lsls	r1, r1, #9
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e02f      	b.n	80031b0 <HAL_RCC_OscConfig+0xe0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0xa2>
 8003158:	4bab      	ldr	r3, [pc, #684]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4baa      	ldr	r3, [pc, #680]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800315e:	49ab      	ldr	r1, [pc, #684]	; (800340c <HAL_RCC_OscConfig+0x33c>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	4ba8      	ldr	r3, [pc, #672]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4ba7      	ldr	r3, [pc, #668]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800316a:	49a9      	ldr	r1, [pc, #676]	; (8003410 <HAL_RCC_OscConfig+0x340>)
 800316c:	400a      	ands	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e01e      	b.n	80031b0 <HAL_RCC_OscConfig+0xe0>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b05      	cmp	r3, #5
 8003178:	d10e      	bne.n	8003198 <HAL_RCC_OscConfig+0xc8>
 800317a:	4ba3      	ldr	r3, [pc, #652]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4ba2      	ldr	r3, [pc, #648]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	02c9      	lsls	r1, r1, #11
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	4b9f      	ldr	r3, [pc, #636]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	0249      	lsls	r1, r1, #9
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xe0>
 8003198:	4b9b      	ldr	r3, [pc, #620]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b9a      	ldr	r3, [pc, #616]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800319e:	499b      	ldr	r1, [pc, #620]	; (800340c <HAL_RCC_OscConfig+0x33c>)
 80031a0:	400a      	ands	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	4b98      	ldr	r3, [pc, #608]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b97      	ldr	r3, [pc, #604]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80031aa:	4999      	ldr	r1, [pc, #612]	; (8003410 <HAL_RCC_OscConfig+0x340>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d014      	beq.n	80031e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe ff42 	bl	8002040 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c2:	f7fe ff3d 	bl	8002040 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b64      	cmp	r3, #100	; 0x64
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e2fd      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d4:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	029b      	lsls	r3, r3, #10
 80031dc:	4013      	ands	r3, r2
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0xf2>
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe ff2d 	bl	8002040 <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe ff28 	bl	8002040 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e2e8      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	4b82      	ldr	r3, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	029b      	lsls	r3, r3, #10
 8003206:	4013      	ands	r3, r2
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x11c>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2202      	movs	r2, #2
 8003214:	4013      	ands	r3, r2
 8003216:	d100      	bne.n	800321a <HAL_RCC_OscConfig+0x14a>
 8003218:	e06c      	b.n	80032f4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800321a:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	220c      	movs	r2, #12
 8003220:	4013      	ands	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003224:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	220c      	movs	r2, #12
 800322a:	4013      	ands	r3, r2
 800322c:	2b08      	cmp	r3, #8
 800322e:	d11f      	bne.n	8003270 <HAL_RCC_OscConfig+0x1a0>
 8003230:	4b75      	ldr	r3, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	23c0      	movs	r3, #192	; 0xc0
 8003236:	025b      	lsls	r3, r3, #9
 8003238:	401a      	ands	r2, r3
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	429a      	cmp	r2, r3
 8003240:	d116      	bne.n	8003270 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	4b71      	ldr	r3, [pc, #452]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d005      	beq.n	8003258 <HAL_RCC_OscConfig+0x188>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e2bb      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b6b      	ldr	r3, [pc, #428]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	22f8      	movs	r2, #248	; 0xf8
 800325e:	4393      	bics	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00da      	lsls	r2, r3, #3
 8003268:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	e041      	b.n	80032f4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d024      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b62      	ldr	r3, [pc, #392]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800327e:	2101      	movs	r1, #1
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fedc 	bl	8002040 <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe fed7 	bl	8002040 <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e297      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2202      	movs	r2, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	d0f1      	beq.n	800328e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	22f8      	movs	r2, #248	; 0xf8
 80032b0:	4393      	bics	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00da      	lsls	r2, r3, #3
 80032ba:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e018      	b.n	80032f4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	438a      	bics	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe feb7 	bl	8002040 <HAL_GetTick>
 80032d2:	0003      	movs	r3, r0
 80032d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d8:	f7fe feb2 	bl	8002040 <HAL_GetTick>
 80032dc:	0002      	movs	r2, r0
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e272      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2202      	movs	r2, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	d1f1      	bne.n	80032d8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2208      	movs	r2, #8
 80032fa:	4013      	ands	r3, r2
 80032fc:	d036      	beq.n	800336c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d019      	beq.n	800333a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b40      	ldr	r3, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800330c:	2101      	movs	r1, #1
 800330e:	430a      	orrs	r2, r1
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7fe fe95 	bl	8002040 <HAL_GetTick>
 8003316:	0003      	movs	r3, r0
 8003318:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe fe90 	bl	8002040 <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e250      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2202      	movs	r2, #2
 8003334:	4013      	ands	r3, r2
 8003336:	d0f1      	beq.n	800331c <HAL_RCC_OscConfig+0x24c>
 8003338:	e018      	b.n	800336c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800333c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003340:	2101      	movs	r1, #1
 8003342:	438a      	bics	r2, r1
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fe fe7b 	bl	8002040 <HAL_GetTick>
 800334a:	0003      	movs	r3, r0
 800334c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe fe76 	bl	8002040 <HAL_GetTick>
 8003354:	0002      	movs	r2, r0
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e236      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2202      	movs	r2, #2
 8003368:	4013      	ands	r3, r2
 800336a:	d1f1      	bne.n	8003350 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2204      	movs	r2, #4
 8003372:	4013      	ands	r3, r2
 8003374:	d100      	bne.n	8003378 <HAL_RCC_OscConfig+0x2a8>
 8003376:	e0b5      	b.n	80034e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003378:	201f      	movs	r0, #31
 800337a:	183b      	adds	r3, r7, r0
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003380:	4b21      	ldr	r3, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	055b      	lsls	r3, r3, #21
 8003388:	4013      	ands	r3, r2
 800338a:	d110      	bne.n	80033ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	0549      	lsls	r1, r1, #21
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	055b      	lsls	r3, r3, #21
 80033a2:	4013      	ands	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033a8:	183b      	adds	r3, r7, r0
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_RCC_OscConfig+0x344>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d11a      	bne.n	80033f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <HAL_RCC_OscConfig+0x344>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_RCC_OscConfig+0x344>)
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	0049      	lsls	r1, r1, #1
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c8:	f7fe fe3a 	bl	8002040 <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe fe35 	bl	8002040 <HAL_GetTick>
 80033d6:	0002      	movs	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b64      	cmp	r3, #100	; 0x64
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e1f5      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_OscConfig+0x344>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10f      	bne.n	8003418 <HAL_RCC_OscConfig+0x348>
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <HAL_RCC_OscConfig+0x338>)
 80033fe:	2101      	movs	r1, #1
 8003400:	430a      	orrs	r2, r1
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	e036      	b.n	8003474 <HAL_RCC_OscConfig+0x3a4>
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	40021000 	.word	0x40021000
 800340c:	fffeffff 	.word	0xfffeffff
 8003410:	fffbffff 	.word	0xfffbffff
 8003414:	40007000 	.word	0x40007000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x36a>
 8003420:	4bca      	ldr	r3, [pc, #808]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	4bc9      	ldr	r3, [pc, #804]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003426:	2101      	movs	r1, #1
 8003428:	438a      	bics	r2, r1
 800342a:	621a      	str	r2, [r3, #32]
 800342c:	4bc7      	ldr	r3, [pc, #796]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	4bc6      	ldr	r3, [pc, #792]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003432:	2104      	movs	r1, #4
 8003434:	438a      	bics	r2, r1
 8003436:	621a      	str	r2, [r3, #32]
 8003438:	e01c      	b.n	8003474 <HAL_RCC_OscConfig+0x3a4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b05      	cmp	r3, #5
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x38c>
 8003442:	4bc2      	ldr	r3, [pc, #776]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	4bc1      	ldr	r3, [pc, #772]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003448:	2104      	movs	r1, #4
 800344a:	430a      	orrs	r2, r1
 800344c:	621a      	str	r2, [r3, #32]
 800344e:	4bbf      	ldr	r3, [pc, #764]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003450:	6a1a      	ldr	r2, [r3, #32]
 8003452:	4bbe      	ldr	r3, [pc, #760]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003454:	2101      	movs	r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	621a      	str	r2, [r3, #32]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0x3a4>
 800345c:	4bbb      	ldr	r3, [pc, #748]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	4bba      	ldr	r3, [pc, #744]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003462:	2101      	movs	r1, #1
 8003464:	438a      	bics	r2, r1
 8003466:	621a      	str	r2, [r3, #32]
 8003468:	4bb8      	ldr	r3, [pc, #736]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800346a:	6a1a      	ldr	r2, [r3, #32]
 800346c:	4bb7      	ldr	r3, [pc, #732]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800346e:	2104      	movs	r1, #4
 8003470:	438a      	bics	r2, r1
 8003472:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d014      	beq.n	80034a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347c:	f7fe fde0 	bl	8002040 <HAL_GetTick>
 8003480:	0003      	movs	r3, r0
 8003482:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	e009      	b.n	800349a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fddb 	bl	8002040 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	4aaf      	ldr	r2, [pc, #700]	; (8003750 <HAL_RCC_OscConfig+0x680>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e19a      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	4bac      	ldr	r3, [pc, #688]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x3b6>
 80034a4:	e013      	b.n	80034ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fe fdcb 	bl	8002040 <HAL_GetTick>
 80034aa:	0003      	movs	r3, r0
 80034ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	e009      	b.n	80034c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fe fdc6 	bl	8002040 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	4aa5      	ldr	r2, [pc, #660]	; (8003750 <HAL_RCC_OscConfig+0x680>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e185      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c4:	4ba1      	ldr	r3, [pc, #644]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	2202      	movs	r2, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ce:	231f      	movs	r3, #31
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d8:	4b9c      	ldr	r3, [pc, #624]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	4b9b      	ldr	r3, [pc, #620]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80034de:	499d      	ldr	r1, [pc, #628]	; (8003754 <HAL_RCC_OscConfig+0x684>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2210      	movs	r2, #16
 80034ea:	4013      	ands	r3, r2
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12a      	bne.n	800354c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034f6:	4b95      	ldr	r3, [pc, #596]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80034f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fa:	4b94      	ldr	r3, [pc, #592]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80034fc:	2104      	movs	r1, #4
 80034fe:	430a      	orrs	r2, r1
 8003500:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003502:	4b92      	ldr	r3, [pc, #584]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003506:	4b91      	ldr	r3, [pc, #580]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003508:	2101      	movs	r1, #1
 800350a:	430a      	orrs	r2, r1
 800350c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe fd97 	bl	8002040 <HAL_GetTick>
 8003512:	0003      	movs	r3, r0
 8003514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003518:	f7fe fd92 	bl	8002040 <HAL_GetTick>
 800351c:	0002      	movs	r2, r0
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e152      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800352a:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	2202      	movs	r2, #2
 8003530:	4013      	ands	r3, r2
 8003532:	d0f1      	beq.n	8003518 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003534:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	22f8      	movs	r2, #248	; 0xf8
 800353a:	4393      	bics	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	00da      	lsls	r2, r3, #3
 8003544:	4b81      	ldr	r3, [pc, #516]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003546:	430a      	orrs	r2, r1
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
 800354a:	e034      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	3305      	adds	r3, #5
 8003552:	d111      	bne.n	8003578 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003554:	4b7d      	ldr	r3, [pc, #500]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003558:	4b7c      	ldr	r3, [pc, #496]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800355a:	2104      	movs	r1, #4
 800355c:	438a      	bics	r2, r1
 800355e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003560:	4b7a      	ldr	r3, [pc, #488]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	22f8      	movs	r2, #248	; 0xf8
 8003566:	4393      	bics	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	00da      	lsls	r2, r3, #3
 8003570:	4b76      	ldr	r3, [pc, #472]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003572:	430a      	orrs	r2, r1
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
 8003576:	e01e      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003578:	4b74      	ldr	r3, [pc, #464]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800357a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357c:	4b73      	ldr	r3, [pc, #460]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800357e:	2104      	movs	r1, #4
 8003580:	430a      	orrs	r2, r1
 8003582:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003584:	4b71      	ldr	r3, [pc, #452]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003588:	4b70      	ldr	r3, [pc, #448]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800358a:	2101      	movs	r1, #1
 800358c:	438a      	bics	r2, r1
 800358e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fe fd56 	bl	8002040 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800359a:	f7fe fd51 	bl	8002040 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e111      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035ac:	4b67      	ldr	r3, [pc, #412]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	2202      	movs	r2, #2
 80035b2:	4013      	ands	r3, r2
 80035b4:	d1f1      	bne.n	800359a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2220      	movs	r2, #32
 80035bc:	4013      	ands	r3, r2
 80035be:	d05c      	beq.n	800367a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035c0:	4b62      	ldr	r3, [pc, #392]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	220c      	movs	r2, #12
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d00e      	beq.n	80035ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035cc:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	220c      	movs	r2, #12
 80035d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d114      	bne.n	8003602 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035d8:	4b5c      	ldr	r3, [pc, #368]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	23c0      	movs	r3, #192	; 0xc0
 80035de:	025b      	lsls	r3, r3, #9
 80035e0:	401a      	ands	r2, r3
 80035e2:	23c0      	movs	r3, #192	; 0xc0
 80035e4:	025b      	lsls	r3, r3, #9
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d10b      	bne.n	8003602 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80035ea:	4b58      	ldr	r3, [pc, #352]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80035ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	025b      	lsls	r3, r3, #9
 80035f2:	4013      	ands	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_RCC_OscConfig+0x5a8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d03c      	beq.n	8003678 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0e6      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01b      	beq.n	8003642 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800360a:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360e:	4b4f      	ldr	r3, [pc, #316]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	0249      	lsls	r1, r1, #9
 8003614:	430a      	orrs	r2, r1
 8003616:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fd12 	bl	8002040 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003622:	f7fe fd0d 	bl	8002040 <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0cd      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003634:	4b45      	ldr	r3, [pc, #276]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	025b      	lsls	r3, r3, #9
 800363c:	4013      	ands	r3, r2
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x552>
 8003640:	e01b      	b.n	800367a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003642:	4b42      	ldr	r3, [pc, #264]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003648:	4943      	ldr	r1, [pc, #268]	; (8003758 <HAL_RCC_OscConfig+0x688>)
 800364a:	400a      	ands	r2, r1
 800364c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fcf7 	bl	8002040 <HAL_GetTick>
 8003652:	0003      	movs	r3, r0
 8003654:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003658:	f7fe fcf2 	bl	8002040 <HAL_GetTick>
 800365c:	0002      	movs	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0b2      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800366a:	4b38      	ldr	r3, [pc, #224]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800366c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	025b      	lsls	r3, r3, #9
 8003672:	4013      	ands	r3, r2
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x588>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003678:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d100      	bne.n	8003684 <HAL_RCC_OscConfig+0x5b4>
 8003682:	e0a4      	b.n	80037ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	220c      	movs	r2, #12
 800368a:	4013      	ands	r3, r2
 800368c:	2b08      	cmp	r3, #8
 800368e:	d100      	bne.n	8003692 <HAL_RCC_OscConfig+0x5c2>
 8003690:	e078      	b.n	8003784 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b02      	cmp	r3, #2
 8003698:	d14c      	bne.n	8003734 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80036a0:	492e      	ldr	r1, [pc, #184]	; (800375c <HAL_RCC_OscConfig+0x68c>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fe fccb 	bl	8002040 <HAL_GetTick>
 80036aa:	0003      	movs	r3, r0
 80036ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe fcc6 	bl	8002040 <HAL_GetTick>
 80036b4:	0002      	movs	r2, r0
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e086      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	049b      	lsls	r3, r3, #18
 80036ca:	4013      	ands	r3, r2
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	220f      	movs	r2, #15
 80036d4:	4393      	bics	r3, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80036de:	430a      	orrs	r2, r1
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <HAL_RCC_OscConfig+0x690>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	0019      	movs	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	431a      	orrs	r2, r3
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	0449      	lsls	r1, r1, #17
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fc99 	bl	8002040 <HAL_GetTick>
 800370e:	0003      	movs	r3, r0
 8003710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fc94 	bl	8002040 <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e054      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	049b      	lsls	r3, r3, #18
 800372e:	4013      	ands	r3, r2
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x644>
 8003732:	e04c      	b.n	80037ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <HAL_RCC_OscConfig+0x67c>)
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <HAL_RCC_OscConfig+0x68c>)
 800373c:	400a      	ands	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fe fc7e 	bl	8002040 <HAL_GetTick>
 8003744:	0003      	movs	r3, r0
 8003746:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003748:	e015      	b.n	8003776 <HAL_RCC_OscConfig+0x6a6>
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	40021000 	.word	0x40021000
 8003750:	00001388 	.word	0x00001388
 8003754:	efffffff 	.word	0xefffffff
 8003758:	fffeffff 	.word	0xfffeffff
 800375c:	feffffff 	.word	0xfeffffff
 8003760:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe fc6c 	bl	8002040 <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e02c      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_RCC_OscConfig+0x708>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	049b      	lsls	r3, r3, #18
 800377e:	4013      	ands	r3, r2
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x694>
 8003782:	e024      	b.n	80037ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e01f      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_RCC_OscConfig+0x708>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_OscConfig+0x708>)
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	23c0      	movs	r3, #192	; 0xc0
 80037a0:	025b      	lsls	r3, r3, #9
 80037a2:	401a      	ands	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d10e      	bne.n	80037ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	220f      	movs	r2, #15
 80037b0:	401a      	ands	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	23f0      	movs	r3, #240	; 0xf0
 80037be:	039b      	lsls	r3, r3, #14
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b008      	add	sp, #32
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000

080037dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0bf      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	4013      	ands	r3, r2
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d911      	bls.n	8003822 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	4393      	bics	r3, r2
 8003806:	0019      	movs	r1, r3
 8003808:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0a6      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2202      	movs	r2, #2
 8003828:	4013      	ands	r3, r2
 800382a:	d015      	beq.n	8003858 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2204      	movs	r2, #4
 8003832:	4013      	ands	r3, r2
 8003834:	d006      	beq.n	8003844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4b50      	ldr	r3, [pc, #320]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 800383c:	21e0      	movs	r1, #224	; 0xe0
 800383e:	00c9      	lsls	r1, r1, #3
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b4d      	ldr	r3, [pc, #308]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	22f0      	movs	r2, #240	; 0xf0
 800384a:	4393      	bics	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d04c      	beq.n	80038fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b44      	ldr	r3, [pc, #272]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	029b      	lsls	r3, r3, #10
 8003872:	4013      	ands	r3, r2
 8003874:	d120      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07a      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	4b3e      	ldr	r3, [pc, #248]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	049b      	lsls	r3, r3, #18
 800388a:	4013      	ands	r3, r2
 800388c:	d114      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e06e      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800389a:	4b38      	ldr	r3, [pc, #224]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 800389c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	025b      	lsls	r3, r3, #9
 80038a2:	4013      	ands	r3, r2
 80038a4:	d108      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e062      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2202      	movs	r2, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e05b      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b8:	4b30      	ldr	r3, [pc, #192]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2203      	movs	r2, #3
 80038be:	4393      	bics	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4b2d      	ldr	r3, [pc, #180]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038cc:	f7fe fbb8 	bl	8002040 <HAL_GetTick>
 80038d0:	0003      	movs	r3, r0
 80038d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d4:	e009      	b.n	80038ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d6:	f7fe fbb3 	bl	8002040 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <HAL_RCC_ClockConfig+0x1a4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e042      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	220c      	movs	r2, #12
 80038f0:	401a      	ands	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1ec      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2201      	movs	r2, #1
 8003902:	4013      	ands	r3, r2
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d211      	bcs.n	800392e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2201      	movs	r2, #1
 8003910:	4393      	bics	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_RCC_ClockConfig+0x19c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2201      	movs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e020      	b.n	8003970 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2204      	movs	r2, #4
 8003934:	4013      	ands	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a11      	ldr	r2, [pc, #68]	; (8003984 <HAL_RCC_ClockConfig+0x1a8>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800394c:	f000 f820 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003950:	0001      	movs	r1, r0
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x1a0>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	220f      	movs	r2, #15
 800395a:	4013      	ands	r3, r2
 800395c:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1ac>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	000a      	movs	r2, r1
 8003962:	40da      	lsrs	r2, r3
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1b0>)
 8003966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003968:	2003      	movs	r0, #3
 800396a:	f7fe fb23 	bl	8001fb4 <HAL_InitTick>
  
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40022000 	.word	0x40022000
 800397c:	40021000 	.word	0x40021000
 8003980:	00001388 	.word	0x00001388
 8003984:	fffff8ff 	.word	0xfffff8ff
 8003988:	080080f8 	.word	0x080080f8
 800398c:	20002810 	.word	0x20002810

08003990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b08f      	sub	sp, #60	; 0x3c
 8003994:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003996:	2314      	movs	r3, #20
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xec>)
 800399c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800399e:	c313      	stmia	r3!, {r0, r1, r4}
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	4a36      	ldr	r2, [pc, #216]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xf0>)
 80039a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80039aa:	c313      	stmia	r3!, {r0, r1, r4}
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b4:	2300      	movs	r3, #0
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b8:	2300      	movs	r3, #0
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80039c4:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xf4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	220c      	movs	r2, #12
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d047      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0xd4>
 80039d4:	d849      	bhi.n	8003a6a <HAL_RCC_GetSysClockFreq+0xda>
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x50>
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x56>
 80039de:	e044      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039e4:	e044      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	0c9b      	lsrs	r3, r3, #18
 80039ea:	220f      	movs	r2, #15
 80039ec:	4013      	ands	r3, r2
 80039ee:	2214      	movs	r2, #20
 80039f0:	18ba      	adds	r2, r7, r2
 80039f2:	5cd3      	ldrb	r3, [r2, r3]
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xf4>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	220f      	movs	r2, #15
 80039fc:	4013      	ands	r3, r2
 80039fe:	1d3a      	adds	r2, r7, #4
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a06:	23c0      	movs	r3, #192	; 0xc0
 8003a08:	025b      	lsls	r3, r3, #9
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	025b      	lsls	r3, r3, #9
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d109      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a16:	481c      	ldr	r0, [pc, #112]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a18:	f7fc fb76 	bl	8000108 <__udivsi3>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	001a      	movs	r2, r3
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	4353      	muls	r3, r2
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
 8003a26:	e01a      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2a:	23c0      	movs	r3, #192	; 0xc0
 8003a2c:	025b      	lsls	r3, r3, #9
 8003a2e:	401a      	ands	r2, r3
 8003a30:	23c0      	movs	r3, #192	; 0xc0
 8003a32:	025b      	lsls	r3, r3, #9
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d109      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a3a:	4814      	ldr	r0, [pc, #80]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a3c:	f7fc fb64 	bl	8000108 <__udivsi3>
 8003a40:	0003      	movs	r3, r0
 8003a42:	001a      	movs	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	4353      	muls	r3, r2
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4e:	480e      	ldr	r0, [pc, #56]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a50:	f7fc fb5a 	bl	8000108 <__udivsi3>
 8003a54:	0003      	movs	r3, r0
 8003a56:	001a      	movs	r2, r3
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	4353      	muls	r3, r2
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a62:	e005      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a68:	e002      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b00f      	add	sp, #60	; 0x3c
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	08007fcc 	.word	0x08007fcc
 8003a80:	08007fdc 	.word	0x08007fdc
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	02dc6c00 	.word	0x02dc6c00

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b02      	ldr	r3, [pc, #8]	; (8003aa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	20002810 	.word	0x20002810

08003aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003aa8:	f7ff fff2 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003aac:	0001      	movs	r1, r0
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aba:	5cd3      	ldrb	r3, [r2, r3]
 8003abc:	40d9      	lsrs	r1, r3
 8003abe:	000b      	movs	r3, r1
}    
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08008108 	.word	0x08008108

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	025b      	lsls	r3, r3, #9
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d100      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003aec:	e08e      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2017      	movs	r0, #23
 8003af0:	183b      	adds	r3, r7, r0
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af6:	4b6e      	ldr	r3, [pc, #440]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	055b      	lsls	r3, r3, #21
 8003afe:	4013      	ands	r3, r2
 8003b00:	d110      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b6b      	ldr	r3, [pc, #428]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	4b6a      	ldr	r3, [pc, #424]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	0549      	lsls	r1, r1, #21
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	61da      	str	r2, [r3, #28]
 8003b10:	4b67      	ldr	r3, [pc, #412]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	055b      	lsls	r3, r3, #21
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1e:	183b      	adds	r3, r7, r0
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d11a      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b30:	4b60      	ldr	r3, [pc, #384]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0049      	lsls	r1, r1, #1
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fa7f 	bl	8002040 <HAL_GetTick>
 8003b42:	0003      	movs	r3, r0
 8003b44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b46:	e008      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b48:	f7fe fa7a 	bl	8002040 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0a6      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b56      	ldr	r3, [pc, #344]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4013      	ands	r3, r2
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b68:	6a1a      	ldr	r2, [r3, #32]
 8003b6a:	23c0      	movs	r3, #192	; 0xc0
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d034      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	23c0      	movs	r3, #192	; 0xc0
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4013      	ands	r3, r2
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d02c      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b88:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a4a      	ldr	r2, [pc, #296]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b94:	6a1a      	ldr	r2, [r3, #32]
 8003b96:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0249      	lsls	r1, r1, #9
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba0:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ba6:	4945      	ldr	r1, [pc, #276]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bac:	4b40      	ldr	r3, [pc, #256]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fe fa41 	bl	8002040 <HAL_GetTick>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fe fa3c 	bl	8002040 <HAL_GetTick>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e067      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	4013      	ands	r3, r2
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be2:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	0019      	movs	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf6:	2317      	movs	r3, #23
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c06:	492f      	ldr	r1, [pc, #188]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	4013      	ands	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c26:	430a      	orrs	r2, r1
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	4013      	ands	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	4a23      	ldr	r2, [pc, #140]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	02db      	lsls	r3, r3, #11
 8003c50:	4013      	ands	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c54:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	2210      	movs	r2, #16
 8003c78:	4393      	bics	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	2240      	movs	r2, #64	; 0x40
 8003c98:	4393      	bics	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b006      	add	sp, #24
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	fffffcff 	.word	0xfffffcff
 8003cbc:	fffeffff 	.word	0xfffeffff
 8003cc0:	00001388 	.word	0x00001388
 8003cc4:	efffffff 	.word	0xefffffff
 8003cc8:	fffcffff 	.word	0xfffcffff
 8003ccc:	fff3ffff 	.word	0xfff3ffff

08003cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0a8      	b.n	8003e34 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	2382      	movs	r3, #130	; 0x82
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d009      	beq.n	8003d0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	61da      	str	r2, [r3, #28]
 8003cfc:	e005      	b.n	8003d0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	225d      	movs	r2, #93	; 0x5d
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d107      	bne.n	8003d2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	225c      	movs	r2, #92	; 0x5c
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7fd ff9a 	bl	8001c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	225d      	movs	r2, #93	; 0x5d
 8003d30:	2102      	movs	r1, #2
 8003d32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	23e0      	movs	r3, #224	; 0xe0
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d902      	bls.n	8003d56 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e002      	b.n	8003d5c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	015b      	lsls	r3, r3, #5
 8003d5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	23f0      	movs	r3, #240	; 0xf0
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d008      	beq.n	8003d7a <HAL_SPI_Init+0xaa>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	23e0      	movs	r3, #224	; 0xe0
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d002      	beq.n	8003d7a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	2382      	movs	r3, #130	; 0x82
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6899      	ldr	r1, [r3, #8]
 8003d88:	2384      	movs	r3, #132	; 0x84
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2102      	movs	r1, #2
 8003d96:	400b      	ands	r3, r1
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	400b      	ands	r3, r1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6999      	ldr	r1, [r3, #24]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	400b      	ands	r3, r1
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2138      	movs	r1, #56	; 0x38
 8003db6:	400b      	ands	r3, r1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	0011      	movs	r1, r2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	401a      	ands	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	2204      	movs	r2, #4
 8003de0:	401a      	ands	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2110      	movs	r1, #16
 8003de8:	400b      	ands	r3, r1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	2108      	movs	r1, #8
 8003df2:	400b      	ands	r3, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68d9      	ldr	r1, [r3, #12]
 8003dfa:	23f0      	movs	r3, #240	; 0xf0
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	400b      	ands	r3, r1
 8003e00:	431a      	orrs	r2, r3
 8003e02:	0011      	movs	r1, r2
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	015b      	lsls	r3, r3, #5
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4907      	ldr	r1, [pc, #28]	; (8003e3c <HAL_SPI_Init+0x16c>)
 8003e20:	400a      	ands	r2, r1
 8003e22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	225d      	movs	r2, #93	; 0x5d
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	fffff7ff 	.word	0xfffff7ff

08003e40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	1dbb      	adds	r3, r7, #6
 8003e4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e50:	231f      	movs	r3, #31
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	225c      	movs	r2, #92	; 0x5c
 8003e5c:	5c9b      	ldrb	r3, [r3, r2]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_SPI_Transmit+0x26>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e140      	b.n	80040e8 <HAL_SPI_Transmit+0x2a8>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	225c      	movs	r2, #92	; 0x5c
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e6e:	f7fe f8e7 	bl	8002040 <HAL_GetTick>
 8003e72:	0003      	movs	r3, r0
 8003e74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e76:	2316      	movs	r3, #22
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	1dba      	adds	r2, r7, #6
 8003e7c:	8812      	ldrh	r2, [r2, #0]
 8003e7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	225d      	movs	r2, #93	; 0x5d
 8003e84:	5c9b      	ldrb	r3, [r3, r2]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d004      	beq.n	8003e96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e8c:	231f      	movs	r3, #31
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2202      	movs	r2, #2
 8003e92:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e94:	e11d      	b.n	80040d2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_SPI_Transmit+0x64>
 8003e9c:	1dbb      	adds	r3, r7, #6
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003ea4:	231f      	movs	r3, #31
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
    goto error;
 8003eac:	e111      	b.n	80040d2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	225d      	movs	r2, #93	; 0x5d
 8003eb2:	2103      	movs	r1, #3
 8003eb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1dba      	adds	r2, r7, #6
 8003ec6:	8812      	ldrh	r2, [r2, #0]
 8003ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1dba      	adds	r2, r7, #6
 8003ece:	8812      	ldrh	r2, [r2, #0]
 8003ed0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2244      	movs	r2, #68	; 0x44
 8003edc:	2100      	movs	r1, #0
 8003ede:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2246      	movs	r2, #70	; 0x46
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d110      	bne.n	8003f22 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2140      	movs	r1, #64	; 0x40
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	01c9      	lsls	r1, r1, #7
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2240      	movs	r2, #64	; 0x40
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2140      	movs	r1, #64	; 0x40
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	23e0      	movs	r3, #224	; 0xe0
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d94e      	bls.n	8003fea <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_SPI_Transmit+0x11e>
 8003f54:	2316      	movs	r3, #22
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d13f      	bne.n	8003fde <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	881a      	ldrh	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	1c9a      	adds	r2, r3, #2
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f82:	e02c      	b.n	8003fde <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d112      	bne.n	8003fb8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	1c9a      	adds	r2, r3, #2
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb6:	e012      	b.n	8003fde <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fb8:	f7fe f842 	bl	8002040 <HAL_GetTick>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d802      	bhi.n	8003fce <HAL_SPI_Transmit+0x18e>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_Transmit+0x194>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003fd4:	231f      	movs	r3, #31
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2203      	movs	r2, #3
 8003fda:	701a      	strb	r2, [r3, #0]
          goto error;
 8003fdc:	e079      	b.n	80040d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1cd      	bne.n	8003f84 <HAL_SPI_Transmit+0x144>
 8003fe8:	e04f      	b.n	800408a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_SPI_Transmit+0x1bc>
 8003ff2:	2316      	movs	r3, #22
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d141      	bne.n	8004080 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004022:	e02d      	b.n	8004080 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2202      	movs	r2, #2
 800402c:	4013      	ands	r3, r2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d113      	bne.n	800405a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004058:	e012      	b.n	8004080 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800405a:	f7fd fff1 	bl	8002040 <HAL_GetTick>
 800405e:	0002      	movs	r2, r0
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d802      	bhi.n	8004070 <HAL_SPI_Transmit+0x230>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	d102      	bne.n	8004076 <HAL_SPI_Transmit+0x236>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004076:	231f      	movs	r3, #31
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2203      	movs	r2, #3
 800407c:	701a      	strb	r2, [r3, #0]
          goto error;
 800407e:	e028      	b.n	80040d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1cc      	bne.n	8004024 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f95d 	bl	8004350 <SPI_EndRxTxTransaction>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80040c6:	231f      	movs	r3, #31
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e000      	b.n	80040d2 <HAL_SPI_Transmit+0x292>
  }

error:
 80040d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	225d      	movs	r2, #93	; 0x5d
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	225c      	movs	r2, #92	; 0x5c
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040e2:	231f      	movs	r3, #31
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	781b      	ldrb	r3, [r3, #0]
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b008      	add	sp, #32
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004100:	f7fd ff9e 	bl	8002040 <HAL_GetTick>
 8004104:	0002      	movs	r2, r0
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	18d3      	adds	r3, r2, r3
 800410e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004110:	f7fd ff96 	bl	8002040 <HAL_GetTick>
 8004114:	0003      	movs	r3, r0
 8004116:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004118:	4b3a      	ldr	r3, [pc, #232]	; (8004204 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	015b      	lsls	r3, r3, #5
 800411e:	0d1b      	lsrs	r3, r3, #20
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	4353      	muls	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004126:	e058      	b.n	80041da <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	3301      	adds	r3, #1
 800412c:	d055      	beq.n	80041da <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800412e:	f7fd ff87 	bl	8002040 <HAL_GetTick>
 8004132:	0002      	movs	r2, r0
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	429a      	cmp	r2, r3
 800413c:	d902      	bls.n	8004144 <SPI_WaitFlagStateUntilTimeout+0x54>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d142      	bne.n	80041ca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	21e0      	movs	r1, #224	; 0xe0
 8004150:	438a      	bics	r2, r1
 8004152:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	2382      	movs	r3, #130	; 0x82
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	429a      	cmp	r2, r3
 800415e:	d113      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	429a      	cmp	r2, r3
 800416a:	d005      	beq.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	429a      	cmp	r2, r3
 8004176:	d107      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2140      	movs	r1, #64	; 0x40
 8004184:	438a      	bics	r2, r1
 8004186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	019b      	lsls	r3, r3, #6
 8004190:	429a      	cmp	r2, r3
 8004192:	d110      	bne.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	491a      	ldr	r1, [pc, #104]	; (8004208 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	0189      	lsls	r1, r1, #6
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	225d      	movs	r2, #93	; 0x5d
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	225c      	movs	r2, #92	; 0x5c
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e017      	b.n	80041fa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	4013      	ands	r3, r2
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	425a      	negs	r2, r3
 80041ea:	4153      	adcs	r3, r2
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	001a      	movs	r2, r3
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d197      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b008      	add	sp, #32
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20002810 	.word	0x20002810
 8004208:	ffffdfff 	.word	0xffffdfff

0800420c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800421a:	2317      	movs	r3, #23
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004222:	f7fd ff0d 	bl	8002040 <HAL_GetTick>
 8004226:	0002      	movs	r2, r0
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	18d3      	adds	r3, r2, r3
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004232:	f7fd ff05 	bl	8002040 <HAL_GetTick>
 8004236:	0003      	movs	r3, r0
 8004238:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	0013      	movs	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	189b      	adds	r3, r3, r2
 800424c:	00da      	lsls	r2, r3, #3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	4353      	muls	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004258:	e068      	b.n	800432c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	23c0      	movs	r3, #192	; 0xc0
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	429a      	cmp	r2, r3
 8004262:	d10a      	bne.n	800427a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	2117      	movs	r1, #23
 8004272:	187b      	adds	r3, r7, r1
 8004274:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004276:	187b      	adds	r3, r7, r1
 8004278:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	d055      	beq.n	800432c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004280:	f7fd fede 	bl	8002040 <HAL_GetTick>
 8004284:	0002      	movs	r2, r0
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	429a      	cmp	r2, r3
 800428e:	d902      	bls.n	8004296 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d142      	bne.n	800431c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	21e0      	movs	r1, #224	; 0xe0
 80042a2:	438a      	bics	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	2382      	movs	r3, #130	; 0x82
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d113      	bne.n	80042da <SPI_WaitFifoStateUntilTimeout+0xce>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d005      	beq.n	80042ca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d107      	bne.n	80042da <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	438a      	bics	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d110      	bne.n	8004308 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4916      	ldr	r1, [pc, #88]	; (800434c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	0189      	lsls	r1, r1, #6
 8004304:	430a      	orrs	r2, r1
 8004306:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	225d      	movs	r2, #93	; 0x5d
 800430c:	2101      	movs	r1, #1
 800430e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	225c      	movs	r2, #92	; 0x5c
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e010      	b.n	800433e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3b01      	subs	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	d18e      	bne.n	800425a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b00a      	add	sp, #40	; 0x28
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	20002810 	.word	0x20002810
 800434c:	ffffdfff 	.word	0xffffdfff

08004350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	23c0      	movs	r3, #192	; 0xc0
 8004360:	0159      	lsls	r1, r3, #5
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	0013      	movs	r3, r2
 800436a:	2200      	movs	r2, #0
 800436c:	f7ff ff4e 	bl	800420c <SPI_WaitFifoStateUntilTimeout>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d007      	beq.n	8004384 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004378:	2220      	movs	r2, #32
 800437a:	431a      	orrs	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e027      	b.n	80043d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	0013      	movs	r3, r2
 800438e:	2200      	movs	r2, #0
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	f7ff fead 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 8004396:	1e03      	subs	r3, r0, #0
 8004398:	d007      	beq.n	80043aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	2220      	movs	r2, #32
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e014      	b.n	80043d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	23c0      	movs	r3, #192	; 0xc0
 80043ae:	00d9      	lsls	r1, r3, #3
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	0013      	movs	r3, r2
 80043b8:	2200      	movs	r2, #0
 80043ba:	f7ff ff27 	bl	800420c <SPI_WaitFifoStateUntilTimeout>
 80043be:	1e03      	subs	r3, r0, #0
 80043c0:	d007      	beq.n	80043d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c6:	2220      	movs	r2, #32
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e000      	b.n	80043d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b004      	add	sp, #16
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e042      	b.n	8004474 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	223d      	movs	r2, #61	; 0x3d
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	223c      	movs	r2, #60	; 0x3c
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0018      	movs	r0, r3
 8004406:	f7fd fc77 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223d      	movs	r2, #61	; 0x3d
 800440e:	2102      	movs	r1, #2
 8004410:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f000 fad7 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2246      	movs	r2, #70	; 0x46
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	223e      	movs	r2, #62	; 0x3e
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2240      	movs	r2, #64	; 0x40
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2241      	movs	r2, #65	; 0x41
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2242      	movs	r2, #66	; 0x42
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2243      	movs	r2, #67	; 0x43
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2244      	movs	r2, #68	; 0x44
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2245      	movs	r2, #69	; 0x45
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	223d      	movs	r2, #61	; 0x3d
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e042      	b.n	8004514 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	223d      	movs	r2, #61	; 0x3d
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	223c      	movs	r2, #60	; 0x3c
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 f839 	bl	800451c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	223d      	movs	r2, #61	; 0x3d
 80044ae:	2102      	movs	r1, #2
 80044b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	0019      	movs	r1, r3
 80044bc:	0010      	movs	r0, r2
 80044be:	f000 fa87 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2246      	movs	r2, #70	; 0x46
 80044c6:	2101      	movs	r1, #1
 80044c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	223e      	movs	r2, #62	; 0x3e
 80044ce:	2101      	movs	r1, #1
 80044d0:	5499      	strb	r1, [r3, r2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	223f      	movs	r2, #63	; 0x3f
 80044d6:	2101      	movs	r1, #1
 80044d8:	5499      	strb	r1, [r3, r2]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	2101      	movs	r1, #1
 80044e0:	5499      	strb	r1, [r3, r2]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2241      	movs	r2, #65	; 0x41
 80044e6:	2101      	movs	r1, #1
 80044e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2242      	movs	r2, #66	; 0x42
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2243      	movs	r2, #67	; 0x43
 80044f6:	2101      	movs	r1, #1
 80044f8:	5499      	strb	r1, [r3, r2]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2244      	movs	r2, #68	; 0x44
 80044fe:	2101      	movs	r1, #1
 8004500:	5499      	strb	r1, [r3, r2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2245      	movs	r2, #69	; 0x45
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	223d      	movs	r2, #61	; 0x3d
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <HAL_TIM_PWM_Start+0x22>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	223e      	movs	r2, #62	; 0x3e
 8004540:	5c9b      	ldrb	r3, [r3, r2]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	1e5a      	subs	r2, r3, #1
 8004548:	4193      	sbcs	r3, r2
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e01f      	b.n	800458e <HAL_TIM_PWM_Start+0x62>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d108      	bne.n	8004566 <HAL_TIM_PWM_Start+0x3a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	223f      	movs	r2, #63	; 0x3f
 8004558:	5c9b      	ldrb	r3, [r3, r2]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	4193      	sbcs	r3, r2
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e013      	b.n	800458e <HAL_TIM_PWM_Start+0x62>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d108      	bne.n	800457e <HAL_TIM_PWM_Start+0x52>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	5c9b      	ldrb	r3, [r3, r2]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	1e5a      	subs	r2, r3, #1
 8004578:	4193      	sbcs	r3, r2
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e007      	b.n	800458e <HAL_TIM_PWM_Start+0x62>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2241      	movs	r2, #65	; 0x41
 8004582:	5c9b      	ldrb	r3, [r3, r2]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	1e5a      	subs	r2, r3, #1
 800458a:	4193      	sbcs	r3, r2
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e074      	b.n	8004680 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Start+0x7a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	223e      	movs	r2, #62	; 0x3e
 80045a0:	2102      	movs	r1, #2
 80045a2:	5499      	strb	r1, [r3, r2]
 80045a4:	e013      	b.n	80045ce <HAL_TIM_PWM_Start+0xa2>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Start+0x8a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	223f      	movs	r2, #63	; 0x3f
 80045b0:	2102      	movs	r1, #2
 80045b2:	5499      	strb	r1, [r3, r2]
 80045b4:	e00b      	b.n	80045ce <HAL_TIM_PWM_Start+0xa2>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_PWM_Start+0x9a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	2102      	movs	r1, #2
 80045c2:	5499      	strb	r1, [r3, r2]
 80045c4:	e003      	b.n	80045ce <HAL_TIM_PWM_Start+0xa2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2241      	movs	r2, #65	; 0x41
 80045ca:	2102      	movs	r1, #2
 80045cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	2201      	movs	r2, #1
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 fd10 	bl	8004ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a29      	ldr	r2, [pc, #164]	; (8004688 <HAL_TIM_PWM_Start+0x15c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_TIM_PWM_Start+0xd8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <HAL_TIM_PWM_Start+0x160>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_TIM_PWM_Start+0xd8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <HAL_TIM_PWM_Start+0x164>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_TIM_PWM_Start+0xd8>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a25      	ldr	r2, [pc, #148]	; (8004694 <HAL_TIM_PWM_Start+0x168>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d101      	bne.n	8004608 <HAL_TIM_PWM_Start+0xdc>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_TIM_PWM_Start+0xde>
 8004608:	2300      	movs	r3, #0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2180      	movs	r1, #128	; 0x80
 800461a:	0209      	lsls	r1, r1, #8
 800461c:	430a      	orrs	r2, r1
 800461e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_TIM_PWM_Start+0x15c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00f      	beq.n	800464a <HAL_TIM_PWM_Start+0x11e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	05db      	lsls	r3, r3, #23
 8004632:	429a      	cmp	r2, r3
 8004634:	d009      	beq.n	800464a <HAL_TIM_PWM_Start+0x11e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <HAL_TIM_PWM_Start+0x16c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <HAL_TIM_PWM_Start+0x11e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <HAL_TIM_PWM_Start+0x160>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d111      	bne.n	800466e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2207      	movs	r2, #7
 8004652:	4013      	ands	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b06      	cmp	r3, #6
 800465a:	d010      	beq.n	800467e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2101      	movs	r1, #1
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	e007      	b.n	800467e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	430a      	orrs	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b004      	add	sp, #16
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800
 8004698:	40000400 	.word	0x40000400

0800469c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a8:	2317      	movs	r3, #23
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	223c      	movs	r2, #60	; 0x3c
 80046b4:	5c9b      	ldrb	r3, [r3, r2]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_TIM_PWM_ConfigChannel+0x22>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e0ad      	b.n	800481a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	223c      	movs	r2, #60	; 0x3c
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d100      	bne.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80046cc:	e076      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	d900      	bls.n	80046d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80046d4:	e095      	b.n	8004802 <HAL_TIM_PWM_ConfigChannel+0x166>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d04e      	beq.n	800477a <HAL_TIM_PWM_ConfigChannel+0xde>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d900      	bls.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80046e2:	e08e      	b.n	8004802 <HAL_TIM_PWM_ConfigChannel+0x166>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d021      	beq.n	8004734 <HAL_TIM_PWM_ConfigChannel+0x98>
 80046f0:	e087      	b.n	8004802 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	0011      	movs	r1, r2
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f9e8 	bl	8004ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2108      	movs	r1, #8
 800470c:	430a      	orrs	r2, r1
 800470e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2104      	movs	r1, #4
 800471c:	438a      	bics	r2, r1
 800471e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	619a      	str	r2, [r3, #24]
      break;
 8004732:	e06b      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	0011      	movs	r1, r2
 800473c:	0018      	movs	r0, r3
 800473e:	f000 fa4f 	bl	8004be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	0109      	lsls	r1, r1, #4
 8004750:	430a      	orrs	r2, r1
 8004752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4931      	ldr	r1, [pc, #196]	; (8004824 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004760:	400a      	ands	r2, r1
 8004762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6999      	ldr	r1, [r3, #24]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	021a      	lsls	r2, r3, #8
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	619a      	str	r2, [r3, #24]
      break;
 8004778:	e048      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0011      	movs	r1, r2
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fab0 	bl	8004ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2108      	movs	r1, #8
 8004794:	430a      	orrs	r2, r1
 8004796:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2104      	movs	r1, #4
 80047a4:	438a      	bics	r2, r1
 80047a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69d9      	ldr	r1, [r3, #28]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
      break;
 80047ba:	e027      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	0011      	movs	r1, r2
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 fb15 	bl	8004df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	0109      	lsls	r1, r1, #4
 80047d8:	430a      	orrs	r2, r1
 80047da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	490f      	ldr	r1, [pc, #60]	; (8004824 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69d9      	ldr	r1, [r3, #28]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	61da      	str	r2, [r3, #28]
      break;
 8004800:	e004      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004802:	2317      	movs	r3, #23
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
      break;
 800480a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	223c      	movs	r2, #60	; 0x3c
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

  return status;
 8004814:	2317      	movs	r3, #23
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	fffffbff 	.word	0xfffffbff

08004828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	230f      	movs	r3, #15
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	223c      	movs	r2, #60	; 0x3c
 800483e:	5c9b      	ldrb	r3, [r3, r2]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIM_ConfigClockSource+0x20>
 8004844:	2302      	movs	r3, #2
 8004846:	e0bc      	b.n	80049c2 <HAL_TIM_ConfigClockSource+0x19a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	223c      	movs	r2, #60	; 0x3c
 800484c:	2101      	movs	r1, #1
 800484e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	223d      	movs	r2, #61	; 0x3d
 8004854:	2102      	movs	r1, #2
 8004856:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2277      	movs	r2, #119	; 0x77
 8004864:	4393      	bics	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800486c:	4013      	ands	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	0192      	lsls	r2, r2, #6
 8004880:	4293      	cmp	r3, r2
 8004882:	d040      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0xde>
 8004884:	2280      	movs	r2, #128	; 0x80
 8004886:	0192      	lsls	r2, r2, #6
 8004888:	4293      	cmp	r3, r2
 800488a:	d900      	bls.n	800488e <HAL_TIM_ConfigClockSource+0x66>
 800488c:	e088      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 800488e:	2280      	movs	r2, #128	; 0x80
 8004890:	0152      	lsls	r2, r2, #5
 8004892:	4293      	cmp	r3, r2
 8004894:	d100      	bne.n	8004898 <HAL_TIM_ConfigClockSource+0x70>
 8004896:	e088      	b.n	80049aa <HAL_TIM_ConfigClockSource+0x182>
 8004898:	2280      	movs	r2, #128	; 0x80
 800489a:	0152      	lsls	r2, r2, #5
 800489c:	4293      	cmp	r3, r2
 800489e:	d900      	bls.n	80048a2 <HAL_TIM_ConfigClockSource+0x7a>
 80048a0:	e07e      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 80048a2:	2b70      	cmp	r3, #112	; 0x70
 80048a4:	d018      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0xb0>
 80048a6:	d900      	bls.n	80048aa <HAL_TIM_ConfigClockSource+0x82>
 80048a8:	e07a      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 80048aa:	2b60      	cmp	r3, #96	; 0x60
 80048ac:	d04f      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x126>
 80048ae:	d900      	bls.n	80048b2 <HAL_TIM_ConfigClockSource+0x8a>
 80048b0:	e076      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 80048b2:	2b50      	cmp	r3, #80	; 0x50
 80048b4:	d03b      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x106>
 80048b6:	d900      	bls.n	80048ba <HAL_TIM_ConfigClockSource+0x92>
 80048b8:	e072      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d057      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x146>
 80048be:	d900      	bls.n	80048c2 <HAL_TIM_ConfigClockSource+0x9a>
 80048c0:	e06e      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 80048c2:	2b30      	cmp	r3, #48	; 0x30
 80048c4:	d063      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x166>
 80048c6:	d86b      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d060      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x166>
 80048cc:	d868      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d05d      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x166>
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d05b      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x166>
 80048d6:	e063      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f000 fb68 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2277      	movs	r2, #119	; 0x77
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	609a      	str	r2, [r3, #8]
      break;
 8004904:	e052      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f000 fb51 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2180      	movs	r1, #128	; 0x80
 8004926:	01c9      	lsls	r1, r1, #7
 8004928:	430a      	orrs	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
      break;
 800492c:	e03e      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	001a      	movs	r2, r3
 800493c:	f000 fac4 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2150      	movs	r1, #80	; 0x50
 8004946:	0018      	movs	r0, r3
 8004948:	f000 fb1e 	bl	8004f88 <TIM_ITRx_SetConfig>
      break;
 800494c:	e02e      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	001a      	movs	r2, r3
 800495c:	f000 fae2 	bl	8004f24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2160      	movs	r1, #96	; 0x60
 8004966:	0018      	movs	r0, r3
 8004968:	f000 fb0e 	bl	8004f88 <TIM_ITRx_SetConfig>
      break;
 800496c:	e01e      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	001a      	movs	r2, r3
 800497c:	f000 faa4 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2140      	movs	r1, #64	; 0x40
 8004986:	0018      	movs	r0, r3
 8004988:	f000 fafe 	bl	8004f88 <TIM_ITRx_SetConfig>
      break;
 800498c:	e00e      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	0019      	movs	r1, r3
 8004998:	0010      	movs	r0, r2
 800499a:	f000 faf5 	bl	8004f88 <TIM_ITRx_SetConfig>
      break;
 800499e:	e005      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80049a0:	230f      	movs	r3, #15
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
      break;
 80049a8:	e000      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80049aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	223d      	movs	r2, #61	; 0x3d
 80049b0:	2101      	movs	r1, #1
 80049b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	223c      	movs	r2, #60	; 0x3c
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]

  return status;
 80049bc:	230f      	movs	r3, #15
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	781b      	ldrb	r3, [r3, #0]
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	ffff00ff 	.word	0xffff00ff

080049d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a34      	ldr	r2, [pc, #208]	; (8004ab4 <TIM_Base_SetConfig+0xe4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d008      	beq.n	80049fa <TIM_Base_SetConfig+0x2a>
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	05db      	lsls	r3, r3, #23
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0x2a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a30      	ldr	r2, [pc, #192]	; (8004ab8 <TIM_Base_SetConfig+0xe8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2270      	movs	r2, #112	; 0x70
 80049fe:	4393      	bics	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <TIM_Base_SetConfig+0xe4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <TIM_Base_SetConfig+0x76>
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	05db      	lsls	r3, r3, #23
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d013      	beq.n	8004a46 <TIM_Base_SetConfig+0x76>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <TIM_Base_SetConfig+0xe8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00f      	beq.n	8004a46 <TIM_Base_SetConfig+0x76>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a24      	ldr	r2, [pc, #144]	; (8004abc <TIM_Base_SetConfig+0xec>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <TIM_Base_SetConfig+0x76>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <TIM_Base_SetConfig+0xf0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <TIM_Base_SetConfig+0x76>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <TIM_Base_SetConfig+0xf4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_Base_SetConfig+0x76>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <TIM_Base_SetConfig+0xf8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d108      	bne.n	8004a58 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM_Base_SetConfig+0xfc>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2280      	movs	r2, #128	; 0x80
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	001a      	movs	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <TIM_Base_SetConfig+0xe4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_Base_SetConfig+0xce>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <TIM_Base_SetConfig+0xf0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_Base_SetConfig+0xce>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <TIM_Base_SetConfig+0xf4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_Base_SetConfig+0xce>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a0b      	ldr	r2, [pc, #44]	; (8004ac8 <TIM_Base_SetConfig+0xf8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d103      	bne.n	8004aa6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	615a      	str	r2, [r3, #20]
}
 8004aac:	46c0      	nop			; (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b004      	add	sp, #16
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40002000 	.word	0x40002000
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800
 8004acc:	fffffcff 	.word	0xfffffcff

08004ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4393      	bics	r3, r2
 8004ae2:	001a      	movs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2270      	movs	r2, #112	; 0x70
 8004afe:	4393      	bics	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2203      	movs	r2, #3
 8004b06:	4393      	bics	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2202      	movs	r2, #2
 8004b18:	4393      	bics	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <TIM_OC1_SetConfig+0xf8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_OC1_SetConfig+0x76>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a26      	ldr	r2, [pc, #152]	; (8004bcc <TIM_OC1_SetConfig+0xfc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_OC1_SetConfig+0x76>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <TIM_OC1_SetConfig+0x100>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_OC1_SetConfig+0x76>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <TIM_OC1_SetConfig+0x104>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10c      	bne.n	8004b60 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	4393      	bics	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	4393      	bics	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <TIM_OC1_SetConfig+0xf8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_OC1_SetConfig+0xb0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <TIM_OC1_SetConfig+0xfc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_OC1_SetConfig+0xb0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <TIM_OC1_SetConfig+0x100>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_OC1_SetConfig+0xb0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <TIM_OC1_SetConfig+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d111      	bne.n	8004ba4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <TIM_OC1_SetConfig+0x108>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <TIM_OC1_SetConfig+0x10c>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b006      	add	sp, #24
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800
 8004bd8:	fffffeff 	.word	0xfffffeff
 8004bdc:	fffffdff 	.word	0xfffffdff

08004be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	2210      	movs	r2, #16
 8004bf0:	4393      	bics	r3, r2
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a2e      	ldr	r2, [pc, #184]	; (8004cc8 <TIM_OC2_SetConfig+0xe8>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <TIM_OC2_SetConfig+0xec>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	4393      	bics	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a24      	ldr	r2, [pc, #144]	; (8004cd0 <TIM_OC2_SetConfig+0xf0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10d      	bne.n	8004c5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2280      	movs	r2, #128	; 0x80
 8004c46:	4393      	bics	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2240      	movs	r2, #64	; 0x40
 8004c5a:	4393      	bics	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <TIM_OC2_SetConfig+0xf0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_OC2_SetConfig+0x9e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1a      	ldr	r2, [pc, #104]	; (8004cd4 <TIM_OC2_SetConfig+0xf4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_OC2_SetConfig+0x9e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a19      	ldr	r2, [pc, #100]	; (8004cd8 <TIM_OC2_SetConfig+0xf8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_OC2_SetConfig+0x9e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <TIM_OC2_SetConfig+0xfc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d113      	bne.n	8004ca6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <TIM_OC2_SetConfig+0x100>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <TIM_OC2_SetConfig+0x104>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	621a      	str	r2, [r3, #32]
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b006      	add	sp, #24
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	ffff8fff 	.word	0xffff8fff
 8004ccc:	fffffcff 	.word	0xfffffcff
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800
 8004ce0:	fffffbff 	.word	0xfffffbff
 8004ce4:	fffff7ff 	.word	0xfffff7ff

08004ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	4a35      	ldr	r2, [pc, #212]	; (8004dcc <TIM_OC3_SetConfig+0xe4>)
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2270      	movs	r2, #112	; 0x70
 8004d14:	4393      	bics	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <TIM_OC3_SetConfig+0xe8>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a24      	ldr	r2, [pc, #144]	; (8004dd4 <TIM_OC3_SetConfig+0xec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10d      	bne.n	8004d62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <TIM_OC3_SetConfig+0xf0>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <TIM_OC3_SetConfig+0xf4>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <TIM_OC3_SetConfig+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <TIM_OC3_SetConfig+0xf8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <TIM_OC3_SetConfig+0xfc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <TIM_OC3_SetConfig+0x100>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d113      	bne.n	8004daa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <TIM_OC3_SetConfig+0x104>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <TIM_OC3_SetConfig+0x108>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b006      	add	sp, #24
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fffffeff 	.word	0xfffffeff
 8004dd0:	fffffdff 	.word	0xfffffdff
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	fffff7ff 	.word	0xfffff7ff
 8004ddc:	fffffbff 	.word	0xfffffbff
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800
 8004dec:	ffffefff 	.word	0xffffefff
 8004df0:	ffffdfff 	.word	0xffffdfff

08004df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4a28      	ldr	r2, [pc, #160]	; (8004ea4 <TIM_OC4_SetConfig+0xb0>)
 8004e04:	401a      	ands	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <TIM_OC4_SetConfig+0xb4>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a21      	ldr	r2, [pc, #132]	; (8004eac <TIM_OC4_SetConfig+0xb8>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <TIM_OC4_SetConfig+0xbc>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	031b      	lsls	r3, r3, #12
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <TIM_OC4_SetConfig+0xc0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <TIM_OC4_SetConfig+0x78>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <TIM_OC4_SetConfig+0xc4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_OC4_SetConfig+0x78>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <TIM_OC4_SetConfig+0xc8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC4_SetConfig+0x78>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <TIM_OC4_SetConfig+0xcc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d109      	bne.n	8004e80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <TIM_OC4_SetConfig+0xd0>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	019b      	lsls	r3, r3, #6
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b006      	add	sp, #24
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	ffffefff 	.word	0xffffefff
 8004ea8:	ffff8fff 	.word	0xffff8fff
 8004eac:	fffffcff 	.word	0xfffffcff
 8004eb0:	ffffdfff 	.word	0xffffdfff
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800
 8004ec4:	ffffbfff 	.word	0xffffbfff

08004ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4393      	bics	r3, r2
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	22f0      	movs	r2, #240	; 0xf0
 8004ef2:	4393      	bics	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	220a      	movs	r2, #10
 8004f04:	4393      	bics	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b006      	add	sp, #24
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	2210      	movs	r2, #16
 8004f36:	4393      	bics	r3, r2
 8004f38:	001a      	movs	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <TIM_TI2_ConfigInputStage+0x60>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	22a0      	movs	r2, #160	; 0xa0
 8004f60:	4393      	bics	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b006      	add	sp, #24
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	ffff0fff 	.word	0xffff0fff

08004f88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2270      	movs	r2, #112	; 0x70
 8004f9c:	4393      	bics	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	609a      	str	r2, [r3, #8]
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b004      	add	sp, #16
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <TIM_ETR_SetConfig+0x3c>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b006      	add	sp, #24
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	ffff00ff 	.word	0xffff00ff

08004ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	221f      	movs	r2, #31
 800500c:	4013      	ands	r3, r2
 800500e:	2201      	movs	r2, #1
 8005010:	409a      	lsls	r2, r3
 8005012:	0013      	movs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	43d2      	mvns	r2, r2
 800501e:	401a      	ands	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	211f      	movs	r1, #31
 800502c:	400b      	ands	r3, r1
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4099      	lsls	r1, r3
 8005032:	000b      	movs	r3, r1
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b006      	add	sp, #24
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	223c      	movs	r2, #60	; 0x3c
 8005052:	5c9b      	ldrb	r3, [r3, r2]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005058:	2302      	movs	r3, #2
 800505a:	e047      	b.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	223c      	movs	r2, #60	; 0x3c
 8005060:	2101      	movs	r1, #1
 8005062:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	223d      	movs	r2, #61	; 0x3d
 8005068:	2102      	movs	r1, #2
 800506a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2270      	movs	r2, #112	; 0x70
 8005080:	4393      	bics	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	05db      	lsls	r3, r3, #23
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d009      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a11      	ldr	r2, [pc, #68]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a10      	ldr	r2, [pc, #64]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10c      	bne.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	4393      	bics	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	223d      	movs	r2, #61	; 0x3d
 80050de:	2101      	movs	r1, #1
 80050e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	223c      	movs	r2, #60	; 0x3c
 80050e6:	2100      	movs	r1, #0
 80050e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b004      	add	sp, #16
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40014000 	.word	0x40014000

08005100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e044      	b.n	800519c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2274      	movs	r2, #116	; 0x74
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0018      	movs	r0, r3
 8005126:	f7fc fe89 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2224      	movs	r2, #36	; 0x24
 800512e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2101      	movs	r1, #1
 800513c:	438a      	bics	r2, r1
 800513e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0018      	movs	r0, r3
 8005144:	f000 f830 	bl	80051a8 <UART_SetConfig>
 8005148:	0003      	movs	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e024      	b.n	800519c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0018      	movs	r0, r3
 800515e:	f000 fa0b 	bl	8005578 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	490d      	ldr	r1, [pc, #52]	; (80051a4 <HAL_UART_Init+0xa4>)
 800516e:	400a      	ands	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	212a      	movs	r1, #42	; 0x2a
 800517e:	438a      	bics	r2, r1
 8005180:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2101      	movs	r1, #1
 800518e:	430a      	orrs	r2, r1
 8005190:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0018      	movs	r0, r3
 8005196:	f000 faa3 	bl	80056e0 <UART_CheckIdleState>
 800519a:	0003      	movs	r3, r0
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b002      	add	sp, #8
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	ffffb7ff 	.word	0xffffb7ff

080051a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051b0:	231e      	movs	r3, #30
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4abe      	ldr	r2, [pc, #760]	; (80054d0 <UART_SetConfig+0x328>)
 80051d8:	4013      	ands	r3, r2
 80051da:	0019      	movs	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4ab9      	ldr	r2, [pc, #740]	; (80054d4 <UART_SetConfig+0x32c>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4ab0      	ldr	r2, [pc, #704]	; (80054d8 <UART_SetConfig+0x330>)
 8005216:	4013      	ands	r3, r2
 8005218:	0019      	movs	r1, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	430a      	orrs	r2, r1
 8005222:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4aac      	ldr	r2, [pc, #688]	; (80054dc <UART_SetConfig+0x334>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d127      	bne.n	800527e <UART_SetConfig+0xd6>
 800522e:	4bac      	ldr	r3, [pc, #688]	; (80054e0 <UART_SetConfig+0x338>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	2203      	movs	r2, #3
 8005234:	4013      	ands	r3, r2
 8005236:	2b03      	cmp	r3, #3
 8005238:	d00d      	beq.n	8005256 <UART_SetConfig+0xae>
 800523a:	d81b      	bhi.n	8005274 <UART_SetConfig+0xcc>
 800523c:	2b02      	cmp	r3, #2
 800523e:	d014      	beq.n	800526a <UART_SetConfig+0xc2>
 8005240:	d818      	bhi.n	8005274 <UART_SetConfig+0xcc>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <UART_SetConfig+0xa4>
 8005246:	2b01      	cmp	r3, #1
 8005248:	d00a      	beq.n	8005260 <UART_SetConfig+0xb8>
 800524a:	e013      	b.n	8005274 <UART_SetConfig+0xcc>
 800524c:	231f      	movs	r3, #31
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e0bd      	b.n	80053d2 <UART_SetConfig+0x22a>
 8005256:	231f      	movs	r3, #31
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	2202      	movs	r2, #2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e0b8      	b.n	80053d2 <UART_SetConfig+0x22a>
 8005260:	231f      	movs	r3, #31
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	2204      	movs	r2, #4
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e0b3      	b.n	80053d2 <UART_SetConfig+0x22a>
 800526a:	231f      	movs	r3, #31
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	2208      	movs	r2, #8
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e0ae      	b.n	80053d2 <UART_SetConfig+0x22a>
 8005274:	231f      	movs	r3, #31
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	2210      	movs	r2, #16
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e0a9      	b.n	80053d2 <UART_SetConfig+0x22a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a98      	ldr	r2, [pc, #608]	; (80054e4 <UART_SetConfig+0x33c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d134      	bne.n	80052f2 <UART_SetConfig+0x14a>
 8005288:	4b95      	ldr	r3, [pc, #596]	; (80054e0 <UART_SetConfig+0x338>)
 800528a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528c:	23c0      	movs	r3, #192	; 0xc0
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	4013      	ands	r3, r2
 8005292:	22c0      	movs	r2, #192	; 0xc0
 8005294:	0292      	lsls	r2, r2, #10
 8005296:	4293      	cmp	r3, r2
 8005298:	d017      	beq.n	80052ca <UART_SetConfig+0x122>
 800529a:	22c0      	movs	r2, #192	; 0xc0
 800529c:	0292      	lsls	r2, r2, #10
 800529e:	4293      	cmp	r3, r2
 80052a0:	d822      	bhi.n	80052e8 <UART_SetConfig+0x140>
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	0292      	lsls	r2, r2, #10
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d019      	beq.n	80052de <UART_SetConfig+0x136>
 80052aa:	2280      	movs	r2, #128	; 0x80
 80052ac:	0292      	lsls	r2, r2, #10
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d81a      	bhi.n	80052e8 <UART_SetConfig+0x140>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <UART_SetConfig+0x118>
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	0252      	lsls	r2, r2, #9
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00a      	beq.n	80052d4 <UART_SetConfig+0x12c>
 80052be:	e013      	b.n	80052e8 <UART_SetConfig+0x140>
 80052c0:	231f      	movs	r3, #31
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e083      	b.n	80053d2 <UART_SetConfig+0x22a>
 80052ca:	231f      	movs	r3, #31
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	2202      	movs	r2, #2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e07e      	b.n	80053d2 <UART_SetConfig+0x22a>
 80052d4:	231f      	movs	r3, #31
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	2204      	movs	r2, #4
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	e079      	b.n	80053d2 <UART_SetConfig+0x22a>
 80052de:	231f      	movs	r3, #31
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2208      	movs	r2, #8
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	e074      	b.n	80053d2 <UART_SetConfig+0x22a>
 80052e8:	231f      	movs	r3, #31
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2210      	movs	r2, #16
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e06f      	b.n	80053d2 <UART_SetConfig+0x22a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7c      	ldr	r2, [pc, #496]	; (80054e8 <UART_SetConfig+0x340>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d134      	bne.n	8005366 <UART_SetConfig+0x1be>
 80052fc:	4b78      	ldr	r3, [pc, #480]	; (80054e0 <UART_SetConfig+0x338>)
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	23c0      	movs	r3, #192	; 0xc0
 8005302:	031b      	lsls	r3, r3, #12
 8005304:	4013      	ands	r3, r2
 8005306:	22c0      	movs	r2, #192	; 0xc0
 8005308:	0312      	lsls	r2, r2, #12
 800530a:	4293      	cmp	r3, r2
 800530c:	d017      	beq.n	800533e <UART_SetConfig+0x196>
 800530e:	22c0      	movs	r2, #192	; 0xc0
 8005310:	0312      	lsls	r2, r2, #12
 8005312:	4293      	cmp	r3, r2
 8005314:	d822      	bhi.n	800535c <UART_SetConfig+0x1b4>
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	0312      	lsls	r2, r2, #12
 800531a:	4293      	cmp	r3, r2
 800531c:	d019      	beq.n	8005352 <UART_SetConfig+0x1aa>
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	0312      	lsls	r2, r2, #12
 8005322:	4293      	cmp	r3, r2
 8005324:	d81a      	bhi.n	800535c <UART_SetConfig+0x1b4>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <UART_SetConfig+0x18c>
 800532a:	2280      	movs	r2, #128	; 0x80
 800532c:	02d2      	lsls	r2, r2, #11
 800532e:	4293      	cmp	r3, r2
 8005330:	d00a      	beq.n	8005348 <UART_SetConfig+0x1a0>
 8005332:	e013      	b.n	800535c <UART_SetConfig+0x1b4>
 8005334:	231f      	movs	r3, #31
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e049      	b.n	80053d2 <UART_SetConfig+0x22a>
 800533e:	231f      	movs	r3, #31
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	2202      	movs	r2, #2
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	e044      	b.n	80053d2 <UART_SetConfig+0x22a>
 8005348:	231f      	movs	r3, #31
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	2204      	movs	r2, #4
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	e03f      	b.n	80053d2 <UART_SetConfig+0x22a>
 8005352:	231f      	movs	r3, #31
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	2208      	movs	r2, #8
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e03a      	b.n	80053d2 <UART_SetConfig+0x22a>
 800535c:	231f      	movs	r3, #31
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	2210      	movs	r2, #16
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e035      	b.n	80053d2 <UART_SetConfig+0x22a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a60      	ldr	r2, [pc, #384]	; (80054ec <UART_SetConfig+0x344>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d104      	bne.n	800537a <UART_SetConfig+0x1d2>
 8005370:	231f      	movs	r3, #31
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e02b      	b.n	80053d2 <UART_SetConfig+0x22a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a5c      	ldr	r2, [pc, #368]	; (80054f0 <UART_SetConfig+0x348>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d104      	bne.n	800538e <UART_SetConfig+0x1e6>
 8005384:	231f      	movs	r3, #31
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e021      	b.n	80053d2 <UART_SetConfig+0x22a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a58      	ldr	r2, [pc, #352]	; (80054f4 <UART_SetConfig+0x34c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d104      	bne.n	80053a2 <UART_SetConfig+0x1fa>
 8005398:	231f      	movs	r3, #31
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e017      	b.n	80053d2 <UART_SetConfig+0x22a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a54      	ldr	r2, [pc, #336]	; (80054f8 <UART_SetConfig+0x350>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d104      	bne.n	80053b6 <UART_SetConfig+0x20e>
 80053ac:	231f      	movs	r3, #31
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e00d      	b.n	80053d2 <UART_SetConfig+0x22a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a50      	ldr	r2, [pc, #320]	; (80054fc <UART_SetConfig+0x354>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d104      	bne.n	80053ca <UART_SetConfig+0x222>
 80053c0:	231f      	movs	r3, #31
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e003      	b.n	80053d2 <UART_SetConfig+0x22a>
 80053ca:	231f      	movs	r3, #31
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2210      	movs	r2, #16
 80053d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	429a      	cmp	r2, r3
 80053dc:	d15d      	bne.n	800549a <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80053de:	231f      	movs	r3, #31
 80053e0:	18fb      	adds	r3, r7, r3
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d015      	beq.n	8005414 <UART_SetConfig+0x26c>
 80053e8:	dc18      	bgt.n	800541c <UART_SetConfig+0x274>
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d00d      	beq.n	800540a <UART_SetConfig+0x262>
 80053ee:	dc15      	bgt.n	800541c <UART_SetConfig+0x274>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <UART_SetConfig+0x252>
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d005      	beq.n	8005404 <UART_SetConfig+0x25c>
 80053f8:	e010      	b.n	800541c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fa:	f7fe fb53 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]
        break;
 8005402:	e012      	b.n	800542a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005404:	4b3e      	ldr	r3, [pc, #248]	; (8005500 <UART_SetConfig+0x358>)
 8005406:	61bb      	str	r3, [r7, #24]
        break;
 8005408:	e00f      	b.n	800542a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540a:	f7fe fac1 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800540e:	0003      	movs	r3, r0
 8005410:	61bb      	str	r3, [r7, #24]
        break;
 8005412:	e00a      	b.n	800542a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	61bb      	str	r3, [r7, #24]
        break;
 800541a:	e006      	b.n	800542a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005420:	231e      	movs	r3, #30
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
        break;
 8005428:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d100      	bne.n	8005432 <UART_SetConfig+0x28a>
 8005430:	e095      	b.n	800555e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	005a      	lsls	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	18d2      	adds	r2, r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0019      	movs	r1, r3
 8005444:	0010      	movs	r0, r2
 8005446:	f7fa fe5f 	bl	8000108 <__udivsi3>
 800544a:	0003      	movs	r3, r0
 800544c:	b29b      	uxth	r3, r3
 800544e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b0f      	cmp	r3, #15
 8005454:	d91c      	bls.n	8005490 <UART_SetConfig+0x2e8>
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	025b      	lsls	r3, r3, #9
 800545c:	429a      	cmp	r2, r3
 800545e:	d217      	bcs.n	8005490 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	b29a      	uxth	r2, r3
 8005464:	200e      	movs	r0, #14
 8005466:	183b      	adds	r3, r7, r0
 8005468:	210f      	movs	r1, #15
 800546a:	438a      	bics	r2, r1
 800546c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	b29b      	uxth	r3, r3
 8005474:	2207      	movs	r2, #7
 8005476:	4013      	ands	r3, r2
 8005478:	b299      	uxth	r1, r3
 800547a:	183b      	adds	r3, r7, r0
 800547c:	183a      	adds	r2, r7, r0
 800547e:	8812      	ldrh	r2, [r2, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	183a      	adds	r2, r7, r0
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	e066      	b.n	800555e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005490:	231e      	movs	r3, #30
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	2201      	movs	r2, #1
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e061      	b.n	800555e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800549a:	231f      	movs	r3, #31
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d02f      	beq.n	8005504 <UART_SetConfig+0x35c>
 80054a4:	dc32      	bgt.n	800550c <UART_SetConfig+0x364>
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d00d      	beq.n	80054c6 <UART_SetConfig+0x31e>
 80054aa:	dc2f      	bgt.n	800550c <UART_SetConfig+0x364>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <UART_SetConfig+0x30e>
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d005      	beq.n	80054c0 <UART_SetConfig+0x318>
 80054b4:	e02a      	b.n	800550c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b6:	f7fe faf5 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 80054ba:	0003      	movs	r3, r0
 80054bc:	61bb      	str	r3, [r7, #24]
        break;
 80054be:	e02c      	b.n	800551a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <UART_SetConfig+0x358>)
 80054c2:	61bb      	str	r3, [r7, #24]
        break;
 80054c4:	e029      	b.n	800551a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7fe fa63 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80054ca:	0003      	movs	r3, r0
 80054cc:	61bb      	str	r3, [r7, #24]
        break;
 80054ce:	e024      	b.n	800551a <UART_SetConfig+0x372>
 80054d0:	efff69f3 	.word	0xefff69f3
 80054d4:	ffffcfff 	.word	0xffffcfff
 80054d8:	fffff4ff 	.word	0xfffff4ff
 80054dc:	40013800 	.word	0x40013800
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40004400 	.word	0x40004400
 80054e8:	40004800 	.word	0x40004800
 80054ec:	40004c00 	.word	0x40004c00
 80054f0:	40005000 	.word	0x40005000
 80054f4:	40011400 	.word	0x40011400
 80054f8:	40011800 	.word	0x40011800
 80054fc:	40011c00 	.word	0x40011c00
 8005500:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	61bb      	str	r3, [r7, #24]
        break;
 800550a:	e006      	b.n	800551a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005510:	231e      	movs	r3, #30
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	2201      	movs	r2, #1
 8005516:	701a      	strb	r2, [r3, #0]
        break;
 8005518:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	085a      	lsrs	r2, r3, #1
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	18d2      	adds	r2, r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	0019      	movs	r1, r3
 8005530:	0010      	movs	r0, r2
 8005532:	f7fa fde9 	bl	8000108 <__udivsi3>
 8005536:	0003      	movs	r3, r0
 8005538:	b29b      	uxth	r3, r3
 800553a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b0f      	cmp	r3, #15
 8005540:	d909      	bls.n	8005556 <UART_SetConfig+0x3ae>
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	025b      	lsls	r3, r3, #9
 8005548:	429a      	cmp	r2, r3
 800554a:	d204      	bcs.n	8005556 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	60da      	str	r2, [r3, #12]
 8005554:	e003      	b.n	800555e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005556:	231e      	movs	r3, #30
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800556a:	231e      	movs	r3, #30
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	781b      	ldrb	r3, [r3, #0]
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b008      	add	sp, #32
 8005576:	bd80      	pop	{r7, pc}

08005578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2201      	movs	r2, #1
 8005586:	4013      	ands	r3, r2
 8005588:	d00b      	beq.n	80055a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a4a      	ldr	r2, [pc, #296]	; (80056bc <UART_AdvFeatureConfig+0x144>)
 8005592:	4013      	ands	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2202      	movs	r2, #2
 80055a8:	4013      	ands	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4a43      	ldr	r2, [pc, #268]	; (80056c0 <UART_AdvFeatureConfig+0x148>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	0019      	movs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2204      	movs	r2, #4
 80055ca:	4013      	ands	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a3b      	ldr	r2, [pc, #236]	; (80056c4 <UART_AdvFeatureConfig+0x14c>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	0019      	movs	r1, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2208      	movs	r2, #8
 80055ec:	4013      	ands	r3, r2
 80055ee:	d00b      	beq.n	8005608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4a34      	ldr	r2, [pc, #208]	; (80056c8 <UART_AdvFeatureConfig+0x150>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	0019      	movs	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2210      	movs	r2, #16
 800560e:	4013      	ands	r3, r2
 8005610:	d00b      	beq.n	800562a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a2c      	ldr	r2, [pc, #176]	; (80056cc <UART_AdvFeatureConfig+0x154>)
 800561a:	4013      	ands	r3, r2
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2220      	movs	r2, #32
 8005630:	4013      	ands	r3, r2
 8005632:	d00b      	beq.n	800564c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <UART_AdvFeatureConfig+0x158>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	4013      	ands	r3, r2
 8005654:	d01d      	beq.n	8005692 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <UART_AdvFeatureConfig+0x15c>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	035b      	lsls	r3, r3, #13
 8005676:	429a      	cmp	r2, r3
 8005678:	d10b      	bne.n	8005692 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <UART_AdvFeatureConfig+0x160>)
 8005682:	4013      	ands	r3, r2
 8005684:	0019      	movs	r1, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	4013      	ands	r3, r2
 800569a:	d00b      	beq.n	80056b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <UART_AdvFeatureConfig+0x164>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	0019      	movs	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
  }
}
 80056b4:	46c0      	nop			; (mov r8, r8)
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b002      	add	sp, #8
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	fffdffff 	.word	0xfffdffff
 80056c0:	fffeffff 	.word	0xfffeffff
 80056c4:	fffbffff 	.word	0xfffbffff
 80056c8:	ffff7fff 	.word	0xffff7fff
 80056cc:	ffffefff 	.word	0xffffefff
 80056d0:	ffffdfff 	.word	0xffffdfff
 80056d4:	ffefffff 	.word	0xffefffff
 80056d8:	ff9fffff 	.word	0xff9fffff
 80056dc:	fff7ffff 	.word	0xfff7ffff

080056e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2280      	movs	r2, #128	; 0x80
 80056ec:	2100      	movs	r1, #0
 80056ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056f0:	f7fc fca6 	bl	8002040 <HAL_GetTick>
 80056f4:	0003      	movs	r3, r0
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2208      	movs	r2, #8
 8005700:	4013      	ands	r3, r2
 8005702:	2b08      	cmp	r3, #8
 8005704:	d10c      	bne.n	8005720 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	0391      	lsls	r1, r2, #14
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4a17      	ldr	r2, [pc, #92]	; (800576c <UART_CheckIdleState+0x8c>)
 8005710:	9200      	str	r2, [sp, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	f000 f82c 	bl	8005770 <UART_WaitOnFlagUntilTimeout>
 8005718:	1e03      	subs	r3, r0, #0
 800571a:	d001      	beq.n	8005720 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e021      	b.n	8005764 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2204      	movs	r2, #4
 8005728:	4013      	ands	r3, r2
 800572a:	2b04      	cmp	r3, #4
 800572c:	d10c      	bne.n	8005748 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	03d1      	lsls	r1, r2, #15
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	4a0d      	ldr	r2, [pc, #52]	; (800576c <UART_CheckIdleState+0x8c>)
 8005738:	9200      	str	r2, [sp, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	f000 f818 	bl	8005770 <UART_WaitOnFlagUntilTimeout>
 8005740:	1e03      	subs	r3, r0, #0
 8005742:	d001      	beq.n	8005748 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e00d      	b.n	8005764 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2274      	movs	r2, #116	; 0x74
 800575e:	2100      	movs	r1, #0
 8005760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	0018      	movs	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	b004      	add	sp, #16
 800576a:	bd80      	pop	{r7, pc}
 800576c:	01ffffff 	.word	0x01ffffff

08005770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b094      	sub	sp, #80	; 0x50
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	1dfb      	adds	r3, r7, #7
 800577e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005780:	e0a3      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005784:	3301      	adds	r3, #1
 8005786:	d100      	bne.n	800578a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005788:	e09f      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578a:	f7fc fc59 	bl	8002040 <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800579a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800579c:	2b00      	cmp	r3, #0
 800579e:	d13d      	bne.n	800581c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a0:	f3ef 8310 	mrs	r3, PRIMASK
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a8:	647b      	str	r3, [r7, #68]	; 0x44
 80057aa:	2301      	movs	r3, #1
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	f383 8810 	msr	PRIMASK, r3
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	494c      	ldr	r1, [pc, #304]	; (80058f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80057c2:	400a      	ands	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d2:	f3ef 8310 	mrs	r3, PRIMASK
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	643b      	str	r3, [r7, #64]	; 0x40
 80057dc:	2301      	movs	r3, #1
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	f383 8810 	msr	PRIMASK, r3
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2101      	movs	r1, #1
 80057f4:	438a      	bics	r2, r1
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fe:	f383 8810 	msr	PRIMASK, r3
}
 8005802:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2274      	movs	r2, #116	; 0x74
 8005814:	2100      	movs	r1, #0
 8005816:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e067      	b.n	80058ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2204      	movs	r2, #4
 8005824:	4013      	ands	r3, r2
 8005826:	d050      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	401a      	ands	r2, r3
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	429a      	cmp	r2, r3
 800583a:	d146      	bne.n	80058ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005846:	f3ef 8310 	mrs	r3, PRIMASK
 800584a:	613b      	str	r3, [r7, #16]
  return(result);
 800584c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800584e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f383 8810 	msr	PRIMASK, r3
}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4923      	ldr	r1, [pc, #140]	; (80058f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005868:	400a      	ands	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005878:	f3ef 8310 	mrs	r3, PRIMASK
 800587c:	61fb      	str	r3, [r7, #28]
  return(result);
 800587e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005880:	64bb      	str	r3, [r7, #72]	; 0x48
 8005882:	2301      	movs	r3, #1
 8005884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f383 8810 	msr	PRIMASK, r3
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2101      	movs	r1, #1
 800589a:	438a      	bics	r2, r1
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f383 8810 	msr	PRIMASK, r3
}
 80058a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	2120      	movs	r1, #32
 80058bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2274      	movs	r2, #116	; 0x74
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e010      	b.n	80058ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	425a      	negs	r2, r3
 80058da:	4153      	adcs	r3, r2
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	001a      	movs	r2, r3
 80058e0:	1dfb      	adds	r3, r7, #7
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d100      	bne.n	80058ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80058e8:	e74b      	b.n	8005782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b014      	add	sp, #80	; 0x50
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	fffffe5f 	.word	0xfffffe5f

080058f8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	60bb      	str	r3, [r7, #8]
  return(result);
 8005904:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590a:	f3ef 8310 	mrs	r3, PRIMASK
 800590e:	607b      	str	r3, [r7, #4]
  return(result);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <osKernelInitialize+0x2e>
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <osKernelInitialize+0x54>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d103      	bne.n	8005926 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800591e:	2306      	movs	r3, #6
 8005920:	425b      	negs	r3, r3
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e00c      	b.n	8005940 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <osKernelInitialize+0x54>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <osKernelInitialize+0x54>)
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e002      	b.n	8005940 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800593a:	2301      	movs	r3, #1
 800593c:	425b      	negs	r3, r3
 800593e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005940:	68fb      	ldr	r3, [r7, #12]
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	b004      	add	sp, #16
 8005948:	bd80      	pop	{r7, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	20002aec 	.word	0x20002aec

08005950 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005956:	f3ef 8305 	mrs	r3, IPSR
 800595a:	60bb      	str	r3, [r7, #8]
  return(result);
 800595c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005962:	f3ef 8310 	mrs	r3, PRIMASK
 8005966:	607b      	str	r3, [r7, #4]
  return(result);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <osKernelStart+0x2e>
 800596e:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <osKernelStart+0x58>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d103      	bne.n	800597e <osKernelStart+0x2e>
    stat = osErrorISR;
 8005976:	2306      	movs	r3, #6
 8005978:	425b      	negs	r3, r3
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	e00e      	b.n	800599c <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <osKernelStart+0x58>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d107      	bne.n	8005996 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005986:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <osKernelStart+0x58>)
 8005988:	2202      	movs	r2, #2
 800598a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800598c:	f000 ff94 	bl	80068b8 <vTaskStartScheduler>
      stat = osOK;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e002      	b.n	800599c <osKernelStart+0x4c>
    } else {
      stat = osError;
 8005996:	2301      	movs	r3, #1
 8005998:	425b      	negs	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800599c:	68fb      	ldr	r3, [r7, #12]
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b004      	add	sp, #16
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	20002aec 	.word	0x20002aec

080059ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059ac:	b5b0      	push	{r4, r5, r7, lr}
 80059ae:	b090      	sub	sp, #64	; 0x40
 80059b0:	af04      	add	r7, sp, #16
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059bc:	f3ef 8305 	mrs	r3, IPSR
 80059c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80059c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d000      	beq.n	80059ca <osThreadNew+0x1e>
 80059c8:	e090      	b.n	8005aec <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ca:	f3ef 8310 	mrs	r3, PRIMASK
 80059ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <osThreadNew+0x34>
 80059d6:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <osThreadNew+0x14c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d100      	bne.n	80059e0 <osThreadNew+0x34>
 80059de:	e085      	b.n	8005aec <osThreadNew+0x140>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d100      	bne.n	80059e8 <osThreadNew+0x3c>
 80059e6:	e081      	b.n	8005aec <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80059ec:	2318      	movs	r3, #24
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80059f0:	2117      	movs	r1, #23
 80059f2:	187b      	adds	r3, r7, r1
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80059f8:	187b      	adds	r3, r7, r1
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80059fc:	2301      	movs	r3, #1
 80059fe:	425b      	negs	r3, r3
 8005a00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d044      	beq.n	8005a92 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <osThreadNew+0x6a>
        name = attr->name;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <osThreadNew+0x8e>
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	2b38      	cmp	r3, #56	; 0x38
 8005a2e:	d804      	bhi.n	8005a3a <osThreadNew+0x8e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	4013      	ands	r3, r2
 8005a38:	d001      	beq.n	8005a3e <osThreadNew+0x92>
        return (NULL);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e057      	b.n	8005aee <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <osThreadNew+0xc8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2bbb      	cmp	r3, #187	; 0xbb
 8005a5c:	d90a      	bls.n	8005a74 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d006      	beq.n	8005a74 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <osThreadNew+0xc8>
        mem = 1;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	e010      	b.n	8005a96 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10c      	bne.n	8005a96 <osThreadNew+0xea>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d108      	bne.n	8005a96 <osThreadNew+0xea>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <osThreadNew+0xea>
          mem = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	623b      	str	r3, [r7, #32]
 8005a90:	e001      	b.n	8005a96 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d112      	bne.n	8005ac2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005aa4:	68bd      	ldr	r5, [r7, #8]
 8005aa6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005aa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	9201      	str	r2, [sp, #4]
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	002b      	movs	r3, r5
 8005ab6:	0022      	movs	r2, r4
 8005ab8:	f000 fd49 	bl	800654e <xTaskCreateStatic>
 8005abc:	0003      	movs	r3, r0
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	e014      	b.n	8005aec <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d111      	bne.n	8005aec <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68bc      	ldr	r4, [r7, #8]
 8005ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	0023      	movs	r3, r4
 8005ade:	f000 fd79 	bl	80065d4 <xTaskCreate>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d001      	beq.n	8005aec <osThreadNew+0x140>
          hTask = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005aec:	693b      	ldr	r3, [r7, #16]
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b00c      	add	sp, #48	; 0x30
 8005af4:	bdb0      	pop	{r4, r5, r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	20002aec 	.word	0x20002aec

08005afc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b04:	f3ef 8305 	mrs	r3, IPSR
 8005b08:	613b      	str	r3, [r7, #16]
  return(result);
 8005b0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b10:	f3ef 8310 	mrs	r3, PRIMASK
 8005b14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <osDelay+0x30>
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <osDelay+0x4c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d103      	bne.n	8005b2c <osDelay+0x30>
    stat = osErrorISR;
 8005b24:	2306      	movs	r3, #6
 8005b26:	425b      	negs	r3, r3
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e008      	b.n	8005b3e <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <osDelay+0x42>
      vTaskDelay(ticks);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 fe97 	bl	800686c <vTaskDelay>
    }
  }

  return (stat);
 8005b3e:	697b      	ldr	r3, [r7, #20]
}
 8005b40:	0018      	movs	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b006      	add	sp, #24
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20002aec 	.word	0x20002aec

08005b4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a06      	ldr	r2, [pc, #24]	; (8005b74 <vApplicationGetIdleTaskMemory+0x28>)
 8005b5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4a05      	ldr	r2, [pc, #20]	; (8005b78 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2280      	movs	r2, #128	; 0x80
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20002af0 	.word	0x20002af0
 8005b78:	20002bac 	.word	0x20002bac

08005b7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a06      	ldr	r2, [pc, #24]	; (8005ba4 <vApplicationGetTimerTaskMemory+0x28>)
 8005b8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4a05      	ldr	r2, [pc, #20]	; (8005ba8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	0052      	lsls	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b004      	add	sp, #16
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20002dac 	.word	0x20002dac
 8005ba8:	20002e68 	.word	0x20002e68

08005bac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	001a      	movs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	4252      	negs	r2, r2
 8005bc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	001a      	movs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	001a      	movs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005be0:	46c0      	nop			; (mov r8, r8)
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b002      	add	sp, #8
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b002      	add	sp, #8
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b004      	add	sp, #16
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3301      	adds	r3, #1
 8005c56:	d103      	bne.n	8005c60 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e00c      	b.n	8005c7a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3308      	adds	r3, #8
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e002      	b.n	8005c6e <vListInsert+0x2c>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d2f6      	bcs.n	8005c68 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b004      	add	sp, #16
 8005cac:	bd80      	pop	{r7, pc}

08005cae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6892      	ldr	r2, [r2, #8]
 8005cc4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6852      	ldr	r2, [r2, #4]
 8005cce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d103      	bne.n	8005ce2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
}
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b004      	add	sp, #16
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueGenericReset+0x18>
 8005d12:	b672      	cpsid	i
 8005d14:	e7fe      	b.n	8005d14 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005d16:	f001 fdfb 	bl	8007910 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	434b      	muls	r3, r1
 8005d28:	18d2      	adds	r2, r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d44:	1e59      	subs	r1, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	434b      	muls	r3, r1
 8005d4c:	18d2      	adds	r2, r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2244      	movs	r2, #68	; 0x44
 8005d56:	21ff      	movs	r1, #255	; 0xff
 8005d58:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2245      	movs	r2, #69	; 0x45
 8005d5e:	21ff      	movs	r1, #255	; 0xff
 8005d60:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d013      	beq.n	8005d98 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3310      	adds	r3, #16
 8005d74:	0018      	movs	r0, r3
 8005d76:	f000 fff5 	bl	8006d64 <xTaskRemoveFromEventList>
 8005d7a:	1e03      	subs	r3, r0, #0
 8005d7c:	d00c      	beq.n	8005d98 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d7e:	f001 fdb7 	bl	80078f0 <vPortYield>
 8005d82:	e009      	b.n	8005d98 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3310      	adds	r3, #16
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f7ff ff0f 	bl	8005bac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3324      	adds	r3, #36	; 0x24
 8005d92:	0018      	movs	r0, r3
 8005d94:	f7ff ff0a 	bl	8005bac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d98:	f001 fdcc 	bl	8007934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d9c:	2301      	movs	r3, #1
}
 8005d9e:	0018      	movs	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b004      	add	sp, #16
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005da6:	b590      	push	{r4, r7, lr}
 8005da8:	b089      	sub	sp, #36	; 0x24
 8005daa:	af02      	add	r7, sp, #8
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <xQueueGenericCreateStatic+0x18>
 8005dba:	b672      	cpsid	i
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <xQueueGenericCreateStatic+0x22>
 8005dc4:	b672      	cpsid	i
 8005dc6:	e7fe      	b.n	8005dc6 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <xQueueGenericCreateStatic+0x2e>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <xQueueGenericCreateStatic+0x32>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <xQueueGenericCreateStatic+0x34>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <xQueueGenericCreateStatic+0x3c>
 8005dde:	b672      	cpsid	i
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <xQueueGenericCreateStatic+0x48>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <xQueueGenericCreateStatic+0x4c>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <xQueueGenericCreateStatic+0x4e>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <xQueueGenericCreateStatic+0x56>
 8005df8:	b672      	cpsid	i
 8005dfa:	e7fe      	b.n	8005dfa <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dfc:	2350      	movs	r3, #80	; 0x50
 8005dfe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b50      	cmp	r3, #80	; 0x50
 8005e04:	d001      	beq.n	8005e0a <xQueueGenericCreateStatic+0x64>
 8005e06:	b672      	cpsid	i
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00e      	beq.n	8005e32 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2246      	movs	r2, #70	; 0x46
 8005e18:	2101      	movs	r1, #1
 8005e1a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e1c:	2328      	movs	r3, #40	; 0x28
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	781c      	ldrb	r4, [r3, #0]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	0023      	movs	r3, r4
 8005e2e:	f000 f805 	bl	8005e3c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e32:	697b      	ldr	r3, [r7, #20]
	}
 8005e34:	0018      	movs	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b007      	add	sp, #28
 8005e3a:	bd90      	pop	{r4, r7, pc}

08005e3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	001a      	movs	r2, r3
 8005e4a:	1cfb      	adds	r3, r7, #3
 8005e4c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2101      	movs	r1, #1
 8005e72:	0018      	movs	r0, r3
 8005e74:	f7ff ff43 	bl	8005cfe <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	1cfa      	adds	r2, r7, #3
 8005e7c:	214c      	movs	r1, #76	; 0x4c
 8005e7e:	7812      	ldrb	r2, [r2, #0]
 8005e80:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b004      	add	sp, #16
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08a      	sub	sp, #40	; 0x28
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSend+0x20>
 8005ea6:	b672      	cpsid	i
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <xQueueGenericSend+0x2e>
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <xQueueGenericSend+0x32>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <xQueueGenericSend+0x34>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <xQueueGenericSend+0x3c>
 8005ec2:	b672      	cpsid	i
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d103      	bne.n	8005ed4 <xQueueGenericSend+0x4a>
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <xQueueGenericSend+0x4e>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <xQueueGenericSend+0x50>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <xQueueGenericSend+0x58>
 8005ede:	b672      	cpsid	i
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ee2:	f001 f8dd 	bl	80070a0 <xTaskGetSchedulerState>
 8005ee6:	1e03      	subs	r3, r0, #0
 8005ee8:	d102      	bne.n	8005ef0 <xQueueGenericSend+0x66>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <xQueueGenericSend+0x6a>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <xQueueGenericSend+0x6c>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <xQueueGenericSend+0x74>
 8005efa:	b672      	cpsid	i
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005efe:	f001 fd07 	bl	8007910 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <xQueueGenericSend+0x8a>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d11e      	bne.n	8005f52 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f000 f99f 	bl	800625e <prvCopyDataToQueue>
 8005f20:	0003      	movs	r3, r0
 8005f22:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	3324      	adds	r3, #36	; 0x24
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 ff17 	bl	8006d64 <xTaskRemoveFromEventList>
 8005f36:	1e03      	subs	r3, r0, #0
 8005f38:	d007      	beq.n	8005f4a <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f3a:	f001 fcd9 	bl	80078f0 <vPortYield>
 8005f3e:	e004      	b.n	8005f4a <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f46:	f001 fcd3 	bl	80078f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f4a:	f001 fcf3 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e05b      	b.n	800600a <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f58:	f001 fcec 	bl	8007934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e054      	b.n	800600a <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f66:	2314      	movs	r3, #20
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f000 ff56 	bl	8006e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f70:	2301      	movs	r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f74:	f001 fcde 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f78:	f000 fcfc 	bl	8006974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f7c:	f001 fcc8 	bl	8007910 <vPortEnterCritical>
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	2244      	movs	r2, #68	; 0x44
 8005f84:	5c9b      	ldrb	r3, [r3, r2]
 8005f86:	b25b      	sxtb	r3, r3
 8005f88:	3301      	adds	r3, #1
 8005f8a:	d103      	bne.n	8005f94 <xQueueGenericSend+0x10a>
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2244      	movs	r2, #68	; 0x44
 8005f90:	2100      	movs	r1, #0
 8005f92:	5499      	strb	r1, [r3, r2]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	2245      	movs	r2, #69	; 0x45
 8005f98:	5c9b      	ldrb	r3, [r3, r2]
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	d103      	bne.n	8005fa8 <xQueueGenericSend+0x11e>
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	2245      	movs	r2, #69	; 0x45
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]
 8005fa8:	f001 fcc4 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fac:	1d3a      	adds	r2, r7, #4
 8005fae:	2314      	movs	r3, #20
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	0011      	movs	r1, r2
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f000 ff45 	bl	8006e44 <xTaskCheckForTimeOut>
 8005fba:	1e03      	subs	r3, r0, #0
 8005fbc:	d11e      	bne.n	8005ffc <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f000 fa51 	bl	8006468 <prvIsQueueFull>
 8005fc6:	1e03      	subs	r3, r0, #0
 8005fc8:	d011      	beq.n	8005fee <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	3310      	adds	r3, #16
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	0011      	movs	r1, r2
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 fe82 	bl	8006cdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 f9d0 	bl	8006380 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fe0:	f000 fcd4 	bl	800698c <xTaskResumeAll>
 8005fe4:	1e03      	subs	r3, r0, #0
 8005fe6:	d18a      	bne.n	8005efe <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005fe8:	f001 fc82 	bl	80078f0 <vPortYield>
 8005fec:	e787      	b.n	8005efe <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 f9c5 	bl	8006380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ff6:	f000 fcc9 	bl	800698c <xTaskResumeAll>
 8005ffa:	e780      	b.n	8005efe <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	0018      	movs	r0, r3
 8006000:	f000 f9be 	bl	8006380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006004:	f000 fcc2 	bl	800698c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006008:	2300      	movs	r3, #0
		}
	}
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b00a      	add	sp, #40	; 0x28
 8006010:	bd80      	pop	{r7, pc}

08006012 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006012:	b590      	push	{r4, r7, lr}
 8006014:	b089      	sub	sp, #36	; 0x24
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <xQueueGenericSendFromISR+0x1c>
 800602a:	b672      	cpsid	i
 800602c:	e7fe      	b.n	800602c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <xQueueGenericSendFromISR+0x2a>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xQueueGenericSendFromISR+0x2e>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <xQueueGenericSendFromISR+0x30>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <xQueueGenericSendFromISR+0x38>
 8006046:	b672      	cpsid	i
 8006048:	e7fe      	b.n	8006048 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d103      	bne.n	8006058 <xQueueGenericSendFromISR+0x46>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <xQueueGenericSendFromISR+0x4a>
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <xQueueGenericSendFromISR+0x4c>
 800605c:	2300      	movs	r3, #0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <xQueueGenericSendFromISR+0x54>
 8006062:	b672      	cpsid	i
 8006064:	e7fe      	b.n	8006064 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006066:	f001 fc7d 	bl	8007964 <ulSetInterruptMaskFromISR>
 800606a:	0003      	movs	r3, r0
 800606c:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <xQueueGenericSendFromISR+0x6e>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d12e      	bne.n	80060de <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006080:	2413      	movs	r4, #19
 8006082:	193b      	adds	r3, r7, r4
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	2145      	movs	r1, #69	; 0x45
 8006088:	5c52      	ldrb	r2, [r2, r1]
 800608a:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	0018      	movs	r0, r3
 8006094:	f000 f8e3 	bl	800625e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006098:	193b      	adds	r3, r7, r4
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b25b      	sxtb	r3, r3
 800609e:	3301      	adds	r3, #1
 80060a0:	d111      	bne.n	80060c6 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	3324      	adds	r3, #36	; 0x24
 80060ae:	0018      	movs	r0, r3
 80060b0:	f000 fe58 	bl	8006d64 <xTaskRemoveFromEventList>
 80060b4:	1e03      	subs	r3, r0, #0
 80060b6:	d00f      	beq.n	80060d8 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e008      	b.n	80060d8 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060c6:	2313      	movs	r3, #19
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	b259      	sxtb	r1, r3
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2245      	movs	r2, #69	; 0x45
 80060d6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80060d8:	2301      	movs	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]
		{
 80060dc:	e001      	b.n	80060e2 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f001 fc43 	bl	8007970 <vClearInterruptMaskFromISR>

	return xReturn;
 80060ea:	69fb      	ldr	r3, [r7, #28]
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b009      	add	sp, #36	; 0x24
 80060f2:	bd90      	pop	{r4, r7, pc}

080060f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	; 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <xQueueReceive+0x1e>
 800610e:	b672      	cpsid	i
 8006110:	e7fe      	b.n	8006110 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <xQueueReceive+0x2c>
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <xQueueReceive+0x30>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <xQueueReceive+0x32>
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <xQueueReceive+0x3a>
 800612a:	b672      	cpsid	i
 800612c:	e7fe      	b.n	800612c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800612e:	f000 ffb7 	bl	80070a0 <xTaskGetSchedulerState>
 8006132:	1e03      	subs	r3, r0, #0
 8006134:	d102      	bne.n	800613c <xQueueReceive+0x48>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <xQueueReceive+0x4c>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <xQueueReceive+0x4e>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <xQueueReceive+0x56>
 8006146:	b672      	cpsid	i
 8006148:	e7fe      	b.n	8006148 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800614a:	f001 fbe1 	bl	8007910 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01a      	beq.n	8006190 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f000 f8e7 	bl	8006334 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d008      	beq.n	8006188 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	3310      	adds	r3, #16
 800617a:	0018      	movs	r0, r3
 800617c:	f000 fdf2 	bl	8006d64 <xTaskRemoveFromEventList>
 8006180:	1e03      	subs	r3, r0, #0
 8006182:	d001      	beq.n	8006188 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006184:	f001 fbb4 	bl	80078f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006188:	f001 fbd4 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 800618c:	2301      	movs	r3, #1
 800618e:	e062      	b.n	8006256 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006196:	f001 fbcd 	bl	8007934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800619a:	2300      	movs	r3, #0
 800619c:	e05b      	b.n	8006256 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061a4:	2314      	movs	r3, #20
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 fe37 	bl	8006e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061ae:	2301      	movs	r3, #1
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061b2:	f001 fbbf 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061b6:	f000 fbdd 	bl	8006974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ba:	f001 fba9 	bl	8007910 <vPortEnterCritical>
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2244      	movs	r2, #68	; 0x44
 80061c2:	5c9b      	ldrb	r3, [r3, r2]
 80061c4:	b25b      	sxtb	r3, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	d103      	bne.n	80061d2 <xQueueReceive+0xde>
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	2244      	movs	r2, #68	; 0x44
 80061ce:	2100      	movs	r1, #0
 80061d0:	5499      	strb	r1, [r3, r2]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	2245      	movs	r2, #69	; 0x45
 80061d6:	5c9b      	ldrb	r3, [r3, r2]
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	3301      	adds	r3, #1
 80061dc:	d103      	bne.n	80061e6 <xQueueReceive+0xf2>
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	2245      	movs	r2, #69	; 0x45
 80061e2:	2100      	movs	r1, #0
 80061e4:	5499      	strb	r1, [r3, r2]
 80061e6:	f001 fba5 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ea:	1d3a      	adds	r2, r7, #4
 80061ec:	2314      	movs	r3, #20
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	0011      	movs	r1, r2
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 fe26 	bl	8006e44 <xTaskCheckForTimeOut>
 80061f8:	1e03      	subs	r3, r0, #0
 80061fa:	d11e      	bne.n	800623a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 f91c 	bl	800643c <prvIsQueueEmpty>
 8006204:	1e03      	subs	r3, r0, #0
 8006206:	d011      	beq.n	800622c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	0011      	movs	r1, r2
 8006210:	0018      	movs	r0, r3
 8006212:	f000 fd63 	bl	8006cdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	0018      	movs	r0, r3
 800621a:	f000 f8b1 	bl	8006380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800621e:	f000 fbb5 	bl	800698c <xTaskResumeAll>
 8006222:	1e03      	subs	r3, r0, #0
 8006224:	d191      	bne.n	800614a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006226:	f001 fb63 	bl	80078f0 <vPortYield>
 800622a:	e78e      	b.n	800614a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	0018      	movs	r0, r3
 8006230:	f000 f8a6 	bl	8006380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006234:	f000 fbaa 	bl	800698c <xTaskResumeAll>
 8006238:	e787      	b.n	800614a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	0018      	movs	r0, r3
 800623e:	f000 f89f 	bl	8006380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006242:	f000 fba3 	bl	800698c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	0018      	movs	r0, r3
 800624a:	f000 f8f7 	bl	800643c <prvIsQueueEmpty>
 800624e:	1e03      	subs	r3, r0, #0
 8006250:	d100      	bne.n	8006254 <xQueueReceive+0x160>
 8006252:	e77a      	b.n	800614a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006256:	0018      	movs	r0, r3
 8006258:	46bd      	mov	sp, r7
 800625a:	b00a      	add	sp, #40	; 0x28
 800625c:	bd80      	pop	{r7, pc}

0800625e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b086      	sub	sp, #24
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10e      	bne.n	800629a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d14e      	bne.n	8006322 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 ff25 	bl	80070d8 <xTaskPriorityDisinherit>
 800628e:	0003      	movs	r3, r0
 8006290:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	e043      	b.n	8006322 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d119      	bne.n	80062d4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6898      	ldr	r0, [r3, #8]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	0019      	movs	r1, r3
 80062ac:	f001 fd94 	bl	8007dd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	18d2      	adds	r2, r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d32b      	bcc.n	8006322 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	e026      	b.n	8006322 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68d8      	ldr	r0, [r3, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	0019      	movs	r1, r3
 80062e0:	f001 fd7a 	bl	8007dd8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	425b      	negs	r3, r3
 80062ee:	18d2      	adds	r2, r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d207      	bcs.n	8006310 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	425b      	negs	r3, r3
 800630a:	18d2      	adds	r2, r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d105      	bne.n	8006322 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	3b01      	subs	r3, #1
 8006320:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800632a:	697b      	ldr	r3, [r7, #20]
}
 800632c:	0018      	movs	r0, r3
 800632e:	46bd      	mov	sp, r7
 8006330:	b006      	add	sp, #24
 8006332:	bd80      	pop	{r7, pc}

08006334 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d018      	beq.n	8006378 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	18d2      	adds	r2, r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d303      	bcc.n	8006368 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68d9      	ldr	r1, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	0018      	movs	r0, r3
 8006374:	f001 fd30 	bl	8007dd8 <memcpy>
	}
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b002      	add	sp, #8
 800637e:	bd80      	pop	{r7, pc}

08006380 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006388:	f001 fac2 	bl	8007910 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800638c:	230f      	movs	r3, #15
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	2145      	movs	r1, #69	; 0x45
 8006394:	5c52      	ldrb	r2, [r2, r1]
 8006396:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006398:	e013      	b.n	80063c2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d016      	beq.n	80063d0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3324      	adds	r3, #36	; 0x24
 80063a6:	0018      	movs	r0, r3
 80063a8:	f000 fcdc 	bl	8006d64 <xTaskRemoveFromEventList>
 80063ac:	1e03      	subs	r3, r0, #0
 80063ae:	d001      	beq.n	80063b4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063b0:	f000 fd98 	bl	8006ee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063b4:	210f      	movs	r1, #15
 80063b6:	187b      	adds	r3, r7, r1
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	187b      	adds	r3, r7, r1
 80063c0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063c2:	230f      	movs	r3, #15
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	b25b      	sxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	dce5      	bgt.n	800639a <prvUnlockQueue+0x1a>
 80063ce:	e000      	b.n	80063d2 <prvUnlockQueue+0x52>
					break;
 80063d0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2245      	movs	r2, #69	; 0x45
 80063d6:	21ff      	movs	r1, #255	; 0xff
 80063d8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80063da:	f001 faab 	bl	8007934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063de:	f001 fa97 	bl	8007910 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063e2:	230e      	movs	r3, #14
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	2144      	movs	r1, #68	; 0x44
 80063ea:	5c52      	ldrb	r2, [r2, r1]
 80063ec:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ee:	e013      	b.n	8006418 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d016      	beq.n	8006426 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3310      	adds	r3, #16
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 fcb1 	bl	8006d64 <xTaskRemoveFromEventList>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d001      	beq.n	800640a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006406:	f000 fd6d 	bl	8006ee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800640a:	210e      	movs	r1, #14
 800640c:	187b      	adds	r3, r7, r1
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	3b01      	subs	r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	187b      	adds	r3, r7, r1
 8006416:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006418:	230e      	movs	r3, #14
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	b25b      	sxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	dce5      	bgt.n	80063f0 <prvUnlockQueue+0x70>
 8006424:	e000      	b.n	8006428 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006426:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2244      	movs	r2, #68	; 0x44
 800642c:	21ff      	movs	r1, #255	; 0xff
 800642e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006430:	f001 fa80 	bl	8007934 <vPortExitCritical>
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b004      	add	sp, #16
 800643a:	bd80      	pop	{r7, pc}

0800643c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006444:	f001 fa64 	bl	8007910 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e001      	b.n	800645a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800645a:	f001 fa6b 	bl	8007934 <vPortExitCritical>

	return xReturn;
 800645e:	68fb      	ldr	r3, [r7, #12]
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b004      	add	sp, #16
 8006466:	bd80      	pop	{r7, pc}

08006468 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006470:	f001 fa4e 	bl	8007910 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	429a      	cmp	r2, r3
 800647e:	d102      	bne.n	8006486 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800648a:	f001 fa53 	bl	8007934 <vPortExitCritical>

	return xReturn;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	0018      	movs	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	b004      	add	sp, #16
 8006496:	bd80      	pop	{r7, pc}

08006498 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e015      	b.n	80064d4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064a8:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <vQueueAddToRegistry+0x4c>)
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	00d2      	lsls	r2, r2, #3
 80064ae:	58d3      	ldr	r3, [r2, r3]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10c      	bne.n	80064ce <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <vQueueAddToRegistry+0x4c>)
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	00d2      	lsls	r2, r2, #3
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064be:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <vQueueAddToRegistry+0x4c>)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	18d3      	adds	r3, r2, r3
 80064c6:	3304      	adds	r3, #4
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064cc:	e006      	b.n	80064dc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b07      	cmp	r3, #7
 80064d8:	d9e6      	bls.n	80064a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	46c0      	nop			; (mov r8, r8)
 80064de:	46bd      	mov	sp, r7
 80064e0:	b004      	add	sp, #16
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20003268 	.word	0x20003268

080064e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064f8:	f001 fa0a 	bl	8007910 <vPortEnterCritical>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2244      	movs	r2, #68	; 0x44
 8006500:	5c9b      	ldrb	r3, [r3, r2]
 8006502:	b25b      	sxtb	r3, r3
 8006504:	3301      	adds	r3, #1
 8006506:	d103      	bne.n	8006510 <vQueueWaitForMessageRestricted+0x28>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2244      	movs	r2, #68	; 0x44
 800650c:	2100      	movs	r1, #0
 800650e:	5499      	strb	r1, [r3, r2]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2245      	movs	r2, #69	; 0x45
 8006514:	5c9b      	ldrb	r3, [r3, r2]
 8006516:	b25b      	sxtb	r3, r3
 8006518:	3301      	adds	r3, #1
 800651a:	d103      	bne.n	8006524 <vQueueWaitForMessageRestricted+0x3c>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2245      	movs	r2, #69	; 0x45
 8006520:	2100      	movs	r1, #0
 8006522:	5499      	strb	r1, [r3, r2]
 8006524:	f001 fa06 	bl	8007934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3324      	adds	r3, #36	; 0x24
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 fbed 	bl	8006d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	0018      	movs	r0, r3
 8006542:	f7ff ff1d 	bl	8006380 <prvUnlockQueue>
	}
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	46bd      	mov	sp, r7
 800654a:	b006      	add	sp, #24
 800654c:	bd80      	pop	{r7, pc}

0800654e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800654e:	b590      	push	{r4, r7, lr}
 8006550:	b08d      	sub	sp, #52	; 0x34
 8006552:	af04      	add	r7, sp, #16
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800655c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <xTaskCreateStatic+0x18>
 8006562:	b672      	cpsid	i
 8006564:	e7fe      	b.n	8006564 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <xTaskCreateStatic+0x22>
 800656c:	b672      	cpsid	i
 800656e:	e7fe      	b.n	800656e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006570:	23bc      	movs	r3, #188	; 0xbc
 8006572:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2bbc      	cmp	r3, #188	; 0xbc
 8006578:	d001      	beq.n	800657e <xTaskCreateStatic+0x30>
 800657a:	b672      	cpsid	i
 800657c:	e7fe      	b.n	800657c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	2b00      	cmp	r3, #0
 8006582:	d020      	beq.n	80065c6 <xTaskCreateStatic+0x78>
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01d      	beq.n	80065c6 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006592:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	22b9      	movs	r2, #185	; 0xb9
 8006598:	2102      	movs	r1, #2
 800659a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800659c:	683c      	ldr	r4, [r7, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	2300      	movs	r3, #0
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	9302      	str	r3, [sp, #8]
 80065ac:	2318      	movs	r3, #24
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	0023      	movs	r3, r4
 80065b8:	f000 f858 	bl	800666c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 f8ec 	bl	800679c <prvAddNewTaskToReadyList>
 80065c4:	e001      	b.n	80065ca <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065ca:	69bb      	ldr	r3, [r7, #24]
	}
 80065cc:	0018      	movs	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b009      	add	sp, #36	; 0x24
 80065d2:	bd90      	pop	{r4, r7, pc}

080065d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b08d      	sub	sp, #52	; 0x34
 80065d8:	af04      	add	r7, sp, #16
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	1dbb      	adds	r3, r7, #6
 80065e2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e4:	1dbb      	adds	r3, r7, #6
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f001 fa28 	bl	8007a40 <pvPortMalloc>
 80065f0:	0003      	movs	r3, r0
 80065f2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d010      	beq.n	800661c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80065fa:	20bc      	movs	r0, #188	; 0xbc
 80065fc:	f001 fa20 	bl	8007a40 <pvPortMalloc>
 8006600:	0003      	movs	r3, r0
 8006602:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
 8006610:	e006      	b.n	8006620 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	0018      	movs	r0, r3
 8006616:	f001 fab9 	bl	8007b8c <vPortFree>
 800661a:	e001      	b.n	8006620 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01a      	beq.n	800665c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	22b9      	movs	r2, #185	; 0xb9
 800662a:	2100      	movs	r1, #0
 800662c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800662e:	1dbb      	adds	r3, r7, #6
 8006630:	881a      	ldrh	r2, [r3, #0]
 8006632:	683c      	ldr	r4, [r7, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	2300      	movs	r3, #0
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	0023      	movs	r3, r4
 800664a:	f000 f80f 	bl	800666c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f8a3 	bl	800679c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006656:	2301      	movs	r3, #1
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	e002      	b.n	8006662 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800665c:	2301      	movs	r3, #1
 800665e:	425b      	negs	r3, r3
 8006660:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006662:	69bb      	ldr	r3, [r7, #24]
	}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	b009      	add	sp, #36	; 0x24
 800666a:	bd90      	pop	{r4, r7, pc}

0800666c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	001a      	movs	r2, r3
 8006684:	21a5      	movs	r1, #165	; 0xa5
 8006686:	f001 fbb0 	bl	8007dea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	493e      	ldr	r1, [pc, #248]	; (800678c <prvInitialiseNewTask+0x120>)
 8006692:	468c      	mov	ip, r1
 8006694:	4463      	add	r3, ip
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	18d3      	adds	r3, r2, r3
 800669a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2207      	movs	r2, #7
 80066a0:	4393      	bics	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2207      	movs	r2, #7
 80066a8:	4013      	ands	r3, r2
 80066aa:	d001      	beq.n	80066b0 <prvInitialiseNewTask+0x44>
 80066ac:	b672      	cpsid	i
 80066ae:	e7fe      	b.n	80066ae <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e013      	b.n	80066de <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	18d3      	adds	r3, r2, r3
 80066bc:	7818      	ldrb	r0, [r3, #0]
 80066be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c0:	2134      	movs	r1, #52	; 0x34
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	18d3      	adds	r3, r2, r3
 80066c6:	185b      	adds	r3, r3, r1
 80066c8:	1c02      	adds	r2, r0, #0
 80066ca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	18d3      	adds	r3, r2, r3
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3301      	adds	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d9e8      	bls.n	80066b6 <prvInitialiseNewTask+0x4a>
 80066e4:	e000      	b.n	80066e8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80066e6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	2243      	movs	r2, #67	; 0x43
 80066ec:	2100      	movs	r1, #0
 80066ee:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	2b37      	cmp	r3, #55	; 0x37
 80066f4:	d901      	bls.n	80066fa <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066f6:	2337      	movs	r3, #55	; 0x37
 80066f8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	2200      	movs	r2, #0
 800670a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	3304      	adds	r3, #4
 8006710:	0018      	movs	r0, r3
 8006712:	f7ff fa69 	bl	8005be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	3318      	adds	r3, #24
 800671a:	0018      	movs	r0, r3
 800671c:	f7ff fa64 	bl	8005be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006724:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	2238      	movs	r2, #56	; 0x38
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006734:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	22b4      	movs	r2, #180	; 0xb4
 800673a:	2100      	movs	r1, #0
 800673c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	22b8      	movs	r2, #184	; 0xb8
 8006742:	2100      	movs	r1, #0
 8006744:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	3354      	adds	r3, #84	; 0x54
 800674a:	2260      	movs	r2, #96	; 0x60
 800674c:	2100      	movs	r1, #0
 800674e:	0018      	movs	r0, r3
 8006750:	f001 fb4b 	bl	8007dea <memset>
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	4a0e      	ldr	r2, [pc, #56]	; (8006790 <prvInitialiseNewTask+0x124>)
 8006758:	659a      	str	r2, [r3, #88]	; 0x58
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	4a0d      	ldr	r2, [pc, #52]	; (8006794 <prvInitialiseNewTask+0x128>)
 800675e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	4a0d      	ldr	r2, [pc, #52]	; (8006798 <prvInitialiseNewTask+0x12c>)
 8006764:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	0018      	movs	r0, r3
 800676e:	f001 f833 	bl	80077d8 <pxPortInitialiseStack>
 8006772:	0002      	movs	r2, r0
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006782:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b006      	add	sp, #24
 800678a:	bd80      	pop	{r7, pc}
 800678c:	3fffffff 	.word	0x3fffffff
 8006790:	08008158 	.word	0x08008158
 8006794:	08008178 	.word	0x08008178
 8006798:	08008138 	.word	0x08008138

0800679c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067a4:	f001 f8b4 	bl	8007910 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067a8:	4b2a      	ldr	r3, [pc, #168]	; (8006854 <prvAddNewTaskToReadyList+0xb8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	4b29      	ldr	r3, [pc, #164]	; (8006854 <prvAddNewTaskToReadyList+0xb8>)
 80067b0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80067b2:	4b29      	ldr	r3, [pc, #164]	; (8006858 <prvAddNewTaskToReadyList+0xbc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067ba:	4b27      	ldr	r3, [pc, #156]	; (8006858 <prvAddNewTaskToReadyList+0xbc>)
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067c0:	4b24      	ldr	r3, [pc, #144]	; (8006854 <prvAddNewTaskToReadyList+0xb8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d110      	bne.n	80067ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067c8:	f000 fba6 	bl	8006f18 <prvInitialiseTaskLists>
 80067cc:	e00d      	b.n	80067ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ce:	4b23      	ldr	r3, [pc, #140]	; (800685c <prvAddNewTaskToReadyList+0xc0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067d6:	4b20      	ldr	r3, [pc, #128]	; (8006858 <prvAddNewTaskToReadyList+0xbc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d802      	bhi.n	80067ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067e4:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <prvAddNewTaskToReadyList+0xbc>)
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <prvAddNewTaskToReadyList+0xc4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <prvAddNewTaskToReadyList+0xc4>)
 80067f2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067f4:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <prvAddNewTaskToReadyList+0xc4>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4b18      	ldr	r3, [pc, #96]	; (8006864 <prvAddNewTaskToReadyList+0xc8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d903      	bls.n	8006810 <prvAddNewTaskToReadyList+0x74>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4b15      	ldr	r3, [pc, #84]	; (8006864 <prvAddNewTaskToReadyList+0xc8>)
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	0013      	movs	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	189b      	adds	r3, r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4a12      	ldr	r2, [pc, #72]	; (8006868 <prvAddNewTaskToReadyList+0xcc>)
 800681e:	189a      	adds	r2, r3, r2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	0019      	movs	r1, r3
 8006826:	0010      	movs	r0, r2
 8006828:	f7ff f9e9 	bl	8005bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800682c:	f001 f882 	bl	8007934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <prvAddNewTaskToReadyList+0xc0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <prvAddNewTaskToReadyList+0xbc>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	429a      	cmp	r2, r3
 8006844:	d201      	bcs.n	800684a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006846:	f001 f853 	bl	80078f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b002      	add	sp, #8
 8006850:	bd80      	pop	{r7, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	2000377c 	.word	0x2000377c
 8006858:	200032a8 	.word	0x200032a8
 800685c:	20003788 	.word	0x20003788
 8006860:	20003798 	.word	0x20003798
 8006864:	20003784 	.word	0x20003784
 8006868:	200032ac 	.word	0x200032ac

0800686c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d010      	beq.n	80068a0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <vTaskDelay+0x48>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <vTaskDelay+0x1e>
 8006886:	b672      	cpsid	i
 8006888:	e7fe      	b.n	8006888 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800688a:	f000 f873 	bl	8006974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2100      	movs	r1, #0
 8006892:	0018      	movs	r0, r3
 8006894:	f000 fc7c 	bl	8007190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006898:	f000 f878 	bl	800698c <xTaskResumeAll>
 800689c:	0003      	movs	r3, r0
 800689e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80068a6:	f001 f823 	bl	80078f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b004      	add	sp, #16
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	200037a4 	.word	0x200037a4

080068b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b089      	sub	sp, #36	; 0x24
 80068bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068c6:	003a      	movs	r2, r7
 80068c8:	1d39      	adds	r1, r7, #4
 80068ca:	2308      	movs	r3, #8
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	0018      	movs	r0, r3
 80068d0:	f7ff f93c 	bl	8005b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068d4:	683c      	ldr	r4, [r7, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	491e      	ldr	r1, [pc, #120]	; (8006954 <vTaskStartScheduler+0x9c>)
 80068dc:	481e      	ldr	r0, [pc, #120]	; (8006958 <vTaskStartScheduler+0xa0>)
 80068de:	9202      	str	r2, [sp, #8]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	0022      	movs	r2, r4
 80068ea:	f7ff fe30 	bl	800654e <xTaskCreateStatic>
 80068ee:	0002      	movs	r2, r0
 80068f0:	4b1a      	ldr	r3, [pc, #104]	; (800695c <vTaskStartScheduler+0xa4>)
 80068f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068f4:	4b19      	ldr	r3, [pc, #100]	; (800695c <vTaskStartScheduler+0xa4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e001      	b.n	8006906 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d103      	bne.n	8006914 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800690c:	f000 fc94 	bl	8007238 <xTimerCreateTimerTask>
 8006910:	0003      	movs	r3, r0
 8006912:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d113      	bne.n	8006942 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800691a:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800691c:	4b10      	ldr	r3, [pc, #64]	; (8006960 <vTaskStartScheduler+0xa8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3354      	adds	r3, #84	; 0x54
 8006922:	001a      	movs	r2, r3
 8006924:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <vTaskStartScheduler+0xac>)
 8006926:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006928:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <vTaskStartScheduler+0xb0>)
 800692a:	2201      	movs	r2, #1
 800692c:	4252      	negs	r2, r2
 800692e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <vTaskStartScheduler+0xb4>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <vTaskStartScheduler+0xb8>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800693c:	f000 ffb4 	bl	80078a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006940:	e004      	b.n	800694c <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	d101      	bne.n	800694c <vTaskStartScheduler+0x94>
 8006948:	b672      	cpsid	i
 800694a:	e7fe      	b.n	800694a <vTaskStartScheduler+0x92>
}
 800694c:	46c0      	nop			; (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b005      	add	sp, #20
 8006952:	bd90      	pop	{r4, r7, pc}
 8006954:	08007fec 	.word	0x08007fec
 8006958:	08006ef9 	.word	0x08006ef9
 800695c:	200037a0 	.word	0x200037a0
 8006960:	200032a8 	.word	0x200032a8
 8006964:	20002820 	.word	0x20002820
 8006968:	2000379c 	.word	0x2000379c
 800696c:	20003788 	.word	0x20003788
 8006970:	20003780 	.word	0x20003780

08006974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006978:	4b03      	ldr	r3, [pc, #12]	; (8006988 <vTaskSuspendAll+0x14>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	4b02      	ldr	r3, [pc, #8]	; (8006988 <vTaskSuspendAll+0x14>)
 8006980:	601a      	str	r2, [r3, #0]
}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	200037a4 	.word	0x200037a4

0800698c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800699a:	4b3a      	ldr	r3, [pc, #232]	; (8006a84 <xTaskResumeAll+0xf8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <xTaskResumeAll+0x1a>
 80069a2:	b672      	cpsid	i
 80069a4:	e7fe      	b.n	80069a4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069a6:	f000 ffb3 	bl	8007910 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <xTaskResumeAll+0xf8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	1e5a      	subs	r2, r3, #1
 80069b0:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <xTaskResumeAll+0xf8>)
 80069b2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b4:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <xTaskResumeAll+0xf8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d15b      	bne.n	8006a74 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069bc:	4b32      	ldr	r3, [pc, #200]	; (8006a88 <xTaskResumeAll+0xfc>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d057      	beq.n	8006a74 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c4:	e02f      	b.n	8006a26 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069c6:	4b31      	ldr	r3, [pc, #196]	; (8006a8c <xTaskResumeAll+0x100>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3318      	adds	r3, #24
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff f96b 	bl	8005cae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3304      	adds	r3, #4
 80069dc:	0018      	movs	r0, r3
 80069de:	f7ff f966 	bl	8005cae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <xTaskResumeAll+0x104>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d903      	bls.n	80069f6 <xTaskResumeAll+0x6a>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f2:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <xTaskResumeAll+0x104>)
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fa:	0013      	movs	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4a24      	ldr	r2, [pc, #144]	; (8006a94 <xTaskResumeAll+0x108>)
 8006a04:	189a      	adds	r2, r3, r2
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	0010      	movs	r0, r2
 8006a0e:	f7ff f8f6 	bl	8005bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a16:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <xTaskResumeAll+0x10c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006a20:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <xTaskResumeAll+0x110>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a26:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <xTaskResumeAll+0x100>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1cb      	bne.n	80069c6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a34:	f000 fb10 	bl	8007058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a38:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <xTaskResumeAll+0x114>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00f      	beq.n	8006a64 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a44:	f000 f83c 	bl	8006ac0 <xTaskIncrementTick>
 8006a48:	1e03      	subs	r3, r0, #0
 8006a4a:	d002      	beq.n	8006a52 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006a4c:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <xTaskResumeAll+0x110>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f2      	bne.n	8006a44 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006a5e:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <xTaskResumeAll+0x114>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a64:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <xTaskResumeAll+0x110>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a70:	f000 ff3e 	bl	80078f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a74:	f000 ff5e 	bl	8007934 <vPortExitCritical>

	return xAlreadyYielded;
 8006a78:	68bb      	ldr	r3, [r7, #8]
}
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	b004      	add	sp, #16
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	200037a4 	.word	0x200037a4
 8006a88:	2000377c 	.word	0x2000377c
 8006a8c:	2000373c 	.word	0x2000373c
 8006a90:	20003784 	.word	0x20003784
 8006a94:	200032ac 	.word	0x200032ac
 8006a98:	200032a8 	.word	0x200032a8
 8006a9c:	20003790 	.word	0x20003790
 8006aa0:	2000378c 	.word	0x2000378c

08006aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006aaa:	4b04      	ldr	r3, [pc, #16]	; (8006abc <xTaskGetTickCount+0x18>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ab0:	687b      	ldr	r3, [r7, #4]
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b002      	add	sp, #8
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	20003780 	.word	0x20003780

08006ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b4c      	ldr	r3, [pc, #304]	; (8006bfc <xTaskIncrementTick+0x13c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d000      	beq.n	8006ad4 <xTaskIncrementTick+0x14>
 8006ad2:	e083      	b.n	8006bdc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ad4:	4b4a      	ldr	r3, [pc, #296]	; (8006c00 <xTaskIncrementTick+0x140>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006adc:	4b48      	ldr	r3, [pc, #288]	; (8006c00 <xTaskIncrementTick+0x140>)
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d117      	bne.n	8006b18 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ae8:	4b46      	ldr	r3, [pc, #280]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <xTaskIncrementTick+0x36>
 8006af2:	b672      	cpsid	i
 8006af4:	e7fe      	b.n	8006af4 <xTaskIncrementTick+0x34>
 8006af6:	4b43      	ldr	r3, [pc, #268]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	4b40      	ldr	r3, [pc, #256]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	4b40      	ldr	r3, [pc, #256]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	f000 faa0 	bl	8007058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b18:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d34e      	bcc.n	8006bc0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b22:	4b38      	ldr	r3, [pc, #224]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <xTaskIncrementTick+0x70>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <xTaskIncrementTick+0x72>
 8006b30:	2300      	movs	r3, #0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b36:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4252      	negs	r2, r2
 8006b3c:	601a      	str	r2, [r3, #0]
					break;
 8006b3e:	e03f      	b.n	8006bc0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b40:	4b30      	ldr	r3, [pc, #192]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d203      	bcs.n	8006b60 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b58:	4b2d      	ldr	r3, [pc, #180]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
						break;
 8006b5e:	e02f      	b.n	8006bc0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3304      	adds	r3, #4
 8006b64:	0018      	movs	r0, r3
 8006b66:	f7ff f8a2 	bl	8005cae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	3318      	adds	r3, #24
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7ff f899 	bl	8005cae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d903      	bls.n	8006b90 <xTaskIncrementTick+0xd0>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	0013      	movs	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b9e:	189a      	adds	r2, r3, r2
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	0019      	movs	r1, r3
 8006ba6:	0010      	movs	r0, r2
 8006ba8:	f7ff f829 	bl	8005bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d3b3      	bcc.n	8006b22 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bbe:	e7b0      	b.n	8006b22 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bc0:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc6:	4914      	ldr	r1, [pc, #80]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006bc8:	0013      	movs	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	189b      	adds	r3, r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	585b      	ldr	r3, [r3, r1]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d907      	bls.n	8006be6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e004      	b.n	8006be6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006be4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bf2:	697b      	ldr	r3, [r7, #20]
}
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	b006      	add	sp, #24
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200037a4 	.word	0x200037a4
 8006c00:	20003780 	.word	0x20003780
 8006c04:	20003734 	.word	0x20003734
 8006c08:	20003738 	.word	0x20003738
 8006c0c:	20003794 	.word	0x20003794
 8006c10:	2000379c 	.word	0x2000379c
 8006c14:	20003784 	.word	0x20003784
 8006c18:	200032ac 	.word	0x200032ac
 8006c1c:	200032a8 	.word	0x200032a8
 8006c20:	2000378c 	.word	0x2000378c
 8006c24:	20003790 	.word	0x20003790

08006c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c2e:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <vTaskSwitchContext+0x9c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c36:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <vTaskSwitchContext+0xa0>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c3c:	e03d      	b.n	8006cba <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <vTaskSwitchContext+0xa0>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <vTaskSwitchContext+0xa4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	e007      	b.n	8006c5c <vTaskSwitchContext+0x34>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <vTaskSwitchContext+0x2e>
 8006c52:	b672      	cpsid	i
 8006c54:	e7fe      	b.n	8006c54 <vTaskSwitchContext+0x2c>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	607b      	str	r3, [r7, #4]
 8006c5c:	491c      	ldr	r1, [pc, #112]	; (8006cd0 <vTaskSwitchContext+0xa8>)
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	0013      	movs	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	189b      	adds	r3, r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	585b      	ldr	r3, [r3, r1]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0ee      	beq.n	8006c4c <vTaskSwitchContext+0x24>
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	0013      	movs	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <vTaskSwitchContext+0xa8>)
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	605a      	str	r2, [r3, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d104      	bne.n	8006c9e <vTaskSwitchContext+0x76>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <vTaskSwitchContext+0xac>)
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <vTaskSwitchContext+0xa4>)
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <vTaskSwitchContext+0xac>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3354      	adds	r3, #84	; 0x54
 8006cb4:	001a      	movs	r2, r3
 8006cb6:	4b08      	ldr	r3, [pc, #32]	; (8006cd8 <vTaskSwitchContext+0xb0>)
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b002      	add	sp, #8
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	200037a4 	.word	0x200037a4
 8006cc8:	20003790 	.word	0x20003790
 8006ccc:	20003784 	.word	0x20003784
 8006cd0:	200032ac 	.word	0x200032ac
 8006cd4:	200032a8 	.word	0x200032a8
 8006cd8:	20002820 	.word	0x20002820

08006cdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <vTaskPlaceOnEventList+0x14>
 8006cec:	b672      	cpsid	i
 8006cee:	e7fe      	b.n	8006cee <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf0:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <vTaskPlaceOnEventList+0x38>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7fe ffa0 	bl	8005c42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2101      	movs	r1, #1
 8006d06:	0018      	movs	r0, r3
 8006d08:	f000 fa42 	bl	8007190 <prvAddCurrentTaskToDelayedList>
}
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b002      	add	sp, #8
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	200032a8 	.word	0x200032a8

08006d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <vTaskPlaceOnEventListRestricted+0x16>
 8006d2a:	b672      	cpsid	i
 8006d2c:	e7fe      	b.n	8006d2c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <vTaskPlaceOnEventListRestricted+0x48>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3318      	adds	r3, #24
 8006d34:	001a      	movs	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	0011      	movs	r1, r2
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f7fe ff5f 	bl	8005bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006d46:	2301      	movs	r3, #1
 8006d48:	425b      	negs	r3, r3
 8006d4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	0011      	movs	r1, r2
 8006d52:	0018      	movs	r0, r3
 8006d54:	f000 fa1c 	bl	8007190 <prvAddCurrentTaskToDelayedList>
	}
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b004      	add	sp, #16
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200032a8 	.word	0x200032a8

08006d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <xTaskRemoveFromEventList+0x1a>
 8006d7a:	b672      	cpsid	i
 8006d7c:	e7fe      	b.n	8006d7c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	3318      	adds	r3, #24
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7fe ff93 	bl	8005cae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d88:	4b1e      	ldr	r3, [pc, #120]	; (8006e04 <xTaskRemoveFromEventList+0xa0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d11d      	bne.n	8006dcc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	3304      	adds	r3, #4
 8006d94:	0018      	movs	r0, r3
 8006d96:	f7fe ff8a 	bl	8005cae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <xTaskRemoveFromEventList+0xa4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d903      	bls.n	8006dae <xTaskRemoveFromEventList+0x4a>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	4b17      	ldr	r3, [pc, #92]	; (8006e08 <xTaskRemoveFromEventList+0xa4>)
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db2:	0013      	movs	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	189b      	adds	r3, r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4a14      	ldr	r2, [pc, #80]	; (8006e0c <xTaskRemoveFromEventList+0xa8>)
 8006dbc:	189a      	adds	r2, r3, r2
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	0010      	movs	r0, r2
 8006dc6:	f7fe ff1a 	bl	8005bfe <vListInsertEnd>
 8006dca:	e007      	b.n	8006ddc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	3318      	adds	r3, #24
 8006dd0:	001a      	movs	r2, r3
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <xTaskRemoveFromEventList+0xac>)
 8006dd4:	0011      	movs	r1, r2
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f7fe ff11 	bl	8005bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <xTaskRemoveFromEventList+0xb0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d905      	bls.n	8006df6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dee:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <xTaskRemoveFromEventList+0xb4>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e001      	b.n	8006dfa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b004      	add	sp, #16
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	200037a4 	.word	0x200037a4
 8006e08:	20003784 	.word	0x20003784
 8006e0c:	200032ac 	.word	0x200032ac
 8006e10:	2000373c 	.word	0x2000373c
 8006e14:	200032a8 	.word	0x200032a8
 8006e18:	20003790 	.word	0x20003790

08006e1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <vTaskInternalSetTimeOutState+0x20>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e2c:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <vTaskInternalSetTimeOutState+0x24>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	605a      	str	r2, [r3, #4]
}
 8006e34:	46c0      	nop			; (mov r8, r8)
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b002      	add	sp, #8
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20003794 	.word	0x20003794
 8006e40:	20003780 	.word	0x20003780

08006e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <xTaskCheckForTimeOut+0x14>
 8006e54:	b672      	cpsid	i
 8006e56:	e7fe      	b.n	8006e56 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <xTaskCheckForTimeOut+0x1e>
 8006e5e:	b672      	cpsid	i
 8006e60:	e7fe      	b.n	8006e60 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006e62:	f000 fd55 	bl	8007910 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <xTaskCheckForTimeOut+0x98>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	d102      	bne.n	8006e84 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e024      	b.n	8006ece <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <xTaskCheckForTimeOut+0x9c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d007      	beq.n	8006ea0 <xTaskCheckForTimeOut+0x5c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e016      	b.n	8006ece <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d20c      	bcs.n	8006ec4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1ad2      	subs	r2, r2, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f7ff ffaf 	bl	8006e1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	e004      	b.n	8006ece <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006ece:	f000 fd31 	bl	8007934 <vPortExitCritical>

	return xReturn;
 8006ed2:	697b      	ldr	r3, [r7, #20]
}
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b006      	add	sp, #24
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20003780 	.word	0x20003780
 8006ee0:	20003794 	.word	0x20003794

08006ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ee8:	4b02      	ldr	r3, [pc, #8]	; (8006ef4 <vTaskMissedYield+0x10>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20003790 	.word	0x20003790

08006ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f00:	f000 f84e 	bl	8006fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f04:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <prvIdleTask+0x1c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d9f9      	bls.n	8006f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f0c:	f000 fcf0 	bl	80078f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006f10:	e7f6      	b.n	8006f00 <prvIdleTask+0x8>
 8006f12:	46c0      	nop			; (mov r8, r8)
 8006f14:	200032ac 	.word	0x200032ac

08006f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f1e:	2300      	movs	r3, #0
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	e00c      	b.n	8006f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	0013      	movs	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	189b      	adds	r3, r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a14      	ldr	r2, [pc, #80]	; (8006f80 <prvInitialiseTaskLists+0x68>)
 8006f30:	189b      	adds	r3, r3, r2
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7fe fe3a 	bl	8005bac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b37      	cmp	r3, #55	; 0x37
 8006f42:	d9ef      	bls.n	8006f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f44:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <prvInitialiseTaskLists+0x6c>)
 8006f46:	0018      	movs	r0, r3
 8006f48:	f7fe fe30 	bl	8005bac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <prvInitialiseTaskLists+0x70>)
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7fe fe2c 	bl	8005bac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <prvInitialiseTaskLists+0x74>)
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7fe fe28 	bl	8005bac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <prvInitialiseTaskLists+0x78>)
 8006f5e:	0018      	movs	r0, r3
 8006f60:	f7fe fe24 	bl	8005bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <prvInitialiseTaskLists+0x7c>)
 8006f66:	0018      	movs	r0, r3
 8006f68:	f7fe fe20 	bl	8005bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <prvInitialiseTaskLists+0x80>)
 8006f6e:	4a05      	ldr	r2, [pc, #20]	; (8006f84 <prvInitialiseTaskLists+0x6c>)
 8006f70:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f72:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <prvInitialiseTaskLists+0x84>)
 8006f74:	4a04      	ldr	r2, [pc, #16]	; (8006f88 <prvInitialiseTaskLists+0x70>)
 8006f76:	601a      	str	r2, [r3, #0]
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b002      	add	sp, #8
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200032ac 	.word	0x200032ac
 8006f84:	2000370c 	.word	0x2000370c
 8006f88:	20003720 	.word	0x20003720
 8006f8c:	2000373c 	.word	0x2000373c
 8006f90:	20003750 	.word	0x20003750
 8006f94:	20003768 	.word	0x20003768
 8006f98:	20003734 	.word	0x20003734
 8006f9c:	20003738 	.word	0x20003738

08006fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa6:	e01a      	b.n	8006fde <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006fa8:	f000 fcb2 	bl	8007910 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006fac:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <prvCheckTasksWaitingTermination+0x50>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7fe fe78 	bl	8005cae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <prvCheckTasksWaitingTermination+0x54>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	1e5a      	subs	r2, r3, #1
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <prvCheckTasksWaitingTermination+0x54>)
 8006fc6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	1e5a      	subs	r2, r3, #1
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fd0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006fd2:	f000 fcaf 	bl	8007934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 f80f 	bl	8006ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fde:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e0      	bne.n	8006fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	46c0      	nop			; (mov r8, r8)
 8006fea:	46bd      	mov	sp, r7
 8006fec:	b002      	add	sp, #8
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20003750 	.word	0x20003750
 8006ff4:	2000377c 	.word	0x2000377c
 8006ff8:	20003764 	.word	0x20003764

08006ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3354      	adds	r3, #84	; 0x54
 8007008:	0018      	movs	r0, r3
 800700a:	f000 ff03 	bl	8007e14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	22b9      	movs	r2, #185	; 0xb9
 8007012:	5c9b      	ldrb	r3, [r3, r2]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fdb5 	bl	8007b8c <vPortFree>
				vPortFree( pxTCB );
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	0018      	movs	r0, r3
 8007026:	f000 fdb1 	bl	8007b8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800702a:	e010      	b.n	800704e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	22b9      	movs	r2, #185	; 0xb9
 8007030:	5c9b      	ldrb	r3, [r3, r2]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d104      	bne.n	8007040 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	0018      	movs	r0, r3
 800703a:	f000 fda7 	bl	8007b8c <vPortFree>
	}
 800703e:	e006      	b.n	800704e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	22b9      	movs	r2, #185	; 0xb9
 8007044:	5c9b      	ldrb	r3, [r3, r2]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d001      	beq.n	800704e <prvDeleteTCB+0x52>
 800704a:	b672      	cpsid	i
 800704c:	e7fe      	b.n	800704c <prvDeleteTCB+0x50>
	}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	46bd      	mov	sp, r7
 8007052:	b002      	add	sp, #8
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800705e:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <prvResetNextTaskUnblockTime+0x40>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <prvResetNextTaskUnblockTime+0x14>
 8007068:	2301      	movs	r3, #1
 800706a:	e000      	b.n	800706e <prvResetNextTaskUnblockTime+0x16>
 800706c:	2300      	movs	r3, #0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007072:	4b0a      	ldr	r3, [pc, #40]	; (800709c <prvResetNextTaskUnblockTime+0x44>)
 8007074:	2201      	movs	r2, #1
 8007076:	4252      	negs	r2, r2
 8007078:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800707a:	e008      	b.n	800708e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <prvResetNextTaskUnblockTime+0x40>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	4b04      	ldr	r3, [pc, #16]	; (800709c <prvResetNextTaskUnblockTime+0x44>)
 800708c:	601a      	str	r2, [r3, #0]
}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	46bd      	mov	sp, r7
 8007092:	b002      	add	sp, #8
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	20003734 	.word	0x20003734
 800709c:	2000379c 	.word	0x2000379c

080070a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070a6:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <xTaskGetSchedulerState+0x30>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070ae:	2301      	movs	r3, #1
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	e008      	b.n	80070c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <xTaskGetSchedulerState+0x34>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070bc:	2302      	movs	r3, #2
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	e001      	b.n	80070c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070c2:	2300      	movs	r3, #0
 80070c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070c6:	687b      	ldr	r3, [r7, #4]
	}
 80070c8:	0018      	movs	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b002      	add	sp, #8
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20003788 	.word	0x20003788
 80070d4:	200037a4 	.word	0x200037a4

080070d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d044      	beq.n	8007178 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070ee:	4b25      	ldr	r3, [pc, #148]	; (8007184 <xTaskPriorityDisinherit+0xac>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d001      	beq.n	80070fc <xTaskPriorityDisinherit+0x24>
 80070f8:	b672      	cpsid	i
 80070fa:	e7fe      	b.n	80070fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <xTaskPriorityDisinherit+0x30>
 8007104:	b672      	cpsid	i
 8007106:	e7fe      	b.n	8007106 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710c:	1e5a      	subs	r2, r3, #1
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711a:	429a      	cmp	r2, r3
 800711c:	d02c      	beq.n	8007178 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007122:	2b00      	cmp	r3, #0
 8007124:	d128      	bne.n	8007178 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	3304      	adds	r3, #4
 800712a:	0018      	movs	r0, r3
 800712c:	f7fe fdbf 	bl	8005cae <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	2238      	movs	r2, #56	; 0x38
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <xTaskPriorityDisinherit+0xb0>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d903      	bls.n	8007158 <xTaskPriorityDisinherit+0x80>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <xTaskPriorityDisinherit+0xb0>)
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	0013      	movs	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	189b      	adds	r3, r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a09      	ldr	r2, [pc, #36]	; (800718c <xTaskPriorityDisinherit+0xb4>)
 8007166:	189a      	adds	r2, r3, r2
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	3304      	adds	r3, #4
 800716c:	0019      	movs	r1, r3
 800716e:	0010      	movs	r0, r2
 8007170:	f7fe fd45 	bl	8005bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007178:	68fb      	ldr	r3, [r7, #12]
	}
 800717a:	0018      	movs	r0, r3
 800717c:	46bd      	mov	sp, r7
 800717e:	b004      	add	sp, #16
 8007180:	bd80      	pop	{r7, pc}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	200032a8 	.word	0x200032a8
 8007188:	20003784 	.word	0x20003784
 800718c:	200032ac 	.word	0x200032ac

08007190 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800719a:	4b21      	ldr	r3, [pc, #132]	; (8007220 <prvAddCurrentTaskToDelayedList+0x90>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071a0:	4b20      	ldr	r3, [pc, #128]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3304      	adds	r3, #4
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7fe fd81 	bl	8005cae <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3301      	adds	r3, #1
 80071b0:	d10b      	bne.n	80071ca <prvAddCurrentTaskToDelayedList+0x3a>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	1d1a      	adds	r2, r3, #4
 80071be:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <prvAddCurrentTaskToDelayedList+0x98>)
 80071c0:	0011      	movs	r1, r2
 80071c2:	0018      	movs	r0, r3
 80071c4:	f7fe fd1b 	bl	8005bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071c8:	e026      	b.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	18d3      	adds	r3, r2, r3
 80071d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071d2:	4b14      	ldr	r3, [pc, #80]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d209      	bcs.n	80071f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <prvAddCurrentTaskToDelayedList+0x9c>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	0019      	movs	r1, r3
 80071ee:	0010      	movs	r0, r2
 80071f0:	f7fe fd27 	bl	8005c42 <vListInsert>
}
 80071f4:	e010      	b.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3304      	adds	r3, #4
 8007200:	0019      	movs	r1, r3
 8007202:	0010      	movs	r0, r2
 8007204:	f7fe fd1d 	bl	8005c42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	d202      	bcs.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	601a      	str	r2, [r3, #0]
}
 8007218:	46c0      	nop			; (mov r8, r8)
 800721a:	46bd      	mov	sp, r7
 800721c:	b004      	add	sp, #16
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20003780 	.word	0x20003780
 8007224:	200032a8 	.word	0x200032a8
 8007228:	20003768 	.word	0x20003768
 800722c:	20003738 	.word	0x20003738
 8007230:	20003734 	.word	0x20003734
 8007234:	2000379c 	.word	0x2000379c

08007238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007238:	b590      	push	{r4, r7, lr}
 800723a:	b089      	sub	sp, #36	; 0x24
 800723c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007242:	f000 fa87 	bl	8007754 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007246:	4b17      	ldr	r3, [pc, #92]	; (80072a4 <xTimerCreateTimerTask+0x6c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d020      	beq.n	8007290 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007256:	003a      	movs	r2, r7
 8007258:	1d39      	adds	r1, r7, #4
 800725a:	2308      	movs	r3, #8
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	0018      	movs	r0, r3
 8007260:	f7fe fc8c 	bl	8005b7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007264:	683c      	ldr	r4, [r7, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	490f      	ldr	r1, [pc, #60]	; (80072a8 <xTimerCreateTimerTask+0x70>)
 800726c:	480f      	ldr	r0, [pc, #60]	; (80072ac <xTimerCreateTimerTask+0x74>)
 800726e:	9202      	str	r2, [sp, #8]
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	2306      	movs	r3, #6
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	2300      	movs	r3, #0
 8007278:	0022      	movs	r2, r4
 800727a:	f7ff f968 	bl	800654e <xTaskCreateStatic>
 800727e:	0002      	movs	r2, r0
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <xTimerCreateTimerTask+0x78>)
 8007282:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007284:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <xTimerCreateTimerTask+0x78>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800728c:	2301      	movs	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <xTimerCreateTimerTask+0x62>
 8007296:	b672      	cpsid	i
 8007298:	e7fe      	b.n	8007298 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	0018      	movs	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	b005      	add	sp, #20
 80072a2:	bd90      	pop	{r4, r7, pc}
 80072a4:	200037d8 	.word	0x200037d8
 80072a8:	08007ff4 	.word	0x08007ff4
 80072ac:	080073b9 	.word	0x080073b9
 80072b0:	200037dc 	.word	0x200037dc

080072b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b08b      	sub	sp, #44	; 0x2c
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <xTimerGenericCommand+0x1c>
 80072cc:	b672      	cpsid	i
 80072ce:	e7fe      	b.n	80072ce <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072d0:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <xTimerGenericCommand+0x90>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d030      	beq.n	800733a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072d8:	2414      	movs	r4, #20
 80072da:	193b      	adds	r3, r7, r4
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072e0:	193b      	adds	r3, r7, r4
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80072e6:	193b      	adds	r3, r7, r4
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	dc19      	bgt.n	8007326 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072f2:	f7ff fed5 	bl	80070a0 <xTaskGetSchedulerState>
 80072f6:	0003      	movs	r3, r0
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d109      	bne.n	8007310 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072fc:	4b11      	ldr	r3, [pc, #68]	; (8007344 <xTimerGenericCommand+0x90>)
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007302:	1939      	adds	r1, r7, r4
 8007304:	2300      	movs	r3, #0
 8007306:	f7fe fdc0 	bl	8005e8a <xQueueGenericSend>
 800730a:	0003      	movs	r3, r0
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
 800730e:	e014      	b.n	800733a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <xTimerGenericCommand+0x90>)
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	2314      	movs	r3, #20
 8007316:	18f9      	adds	r1, r7, r3
 8007318:	2300      	movs	r3, #0
 800731a:	2200      	movs	r2, #0
 800731c:	f7fe fdb5 	bl	8005e8a <xQueueGenericSend>
 8007320:	0003      	movs	r3, r0
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
 8007324:	e009      	b.n	800733a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <xTimerGenericCommand+0x90>)
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	2314      	movs	r3, #20
 800732e:	18f9      	adds	r1, r7, r3
 8007330:	2300      	movs	r3, #0
 8007332:	f7fe fe6e 	bl	8006012 <xQueueGenericSendFromISR>
 8007336:	0003      	movs	r3, r0
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800733c:	0018      	movs	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	b00b      	add	sp, #44	; 0x2c
 8007342:	bd90      	pop	{r4, r7, pc}
 8007344:	200037d8 	.word	0x200037d8

08007348 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af02      	add	r7, sp, #8
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007352:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <prvProcessExpiredTimer+0x6c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3304      	adds	r3, #4
 8007360:	0018      	movs	r0, r3
 8007362:	f7fe fca4 	bl	8005cae <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d119      	bne.n	80073a2 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	18d1      	adds	r1, r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f8b6 	bl	80074ec <prvInsertTimerInActiveList>
 8007380:	1e03      	subs	r3, r0, #0
 8007382:	d00e      	beq.n	80073a2 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	2300      	movs	r3, #0
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	2300      	movs	r3, #0
 800738e:	2100      	movs	r1, #0
 8007390:	f7ff ff90 	bl	80072b4 <xTimerGenericCommand>
 8007394:	0003      	movs	r3, r0
 8007396:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <prvProcessExpiredTimer+0x5a>
 800739e:	b672      	cpsid	i
 80073a0:	e7fe      	b.n	80073a0 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	0010      	movs	r0, r2
 80073aa:	4798      	blx	r3
}
 80073ac:	46c0      	nop			; (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b004      	add	sp, #16
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	200037d0 	.word	0x200037d0

080073b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073c0:	2308      	movs	r3, #8
 80073c2:	18fb      	adds	r3, r7, r3
 80073c4:	0018      	movs	r0, r3
 80073c6:	f000 f851 	bl	800746c <prvGetNextExpireTime>
 80073ca:	0003      	movs	r3, r0
 80073cc:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	0011      	movs	r1, r2
 80073d4:	0018      	movs	r0, r3
 80073d6:	f000 f803 	bl	80073e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073da:	f000 f8c9 	bl	8007570 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073de:	e7ef      	b.n	80073c0 <prvTimerTask+0x8>

080073e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073ea:	f7ff fac3 	bl	8006974 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073ee:	2308      	movs	r3, #8
 80073f0:	18fb      	adds	r3, r7, r3
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 f85a 	bl	80074ac <prvSampleTimeNow>
 80073f8:	0003      	movs	r3, r0
 80073fa:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d129      	bne.n	8007456 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10c      	bne.n	8007422 <prvProcessTimerOrBlockTask+0x42>
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d808      	bhi.n	8007422 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007410:	f7ff fabc 	bl	800698c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	0011      	movs	r1, r2
 800741a:	0018      	movs	r0, r3
 800741c:	f7ff ff94 	bl	8007348 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007420:	e01b      	b.n	800745a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007428:	4b0e      	ldr	r3, [pc, #56]	; (8007464 <prvProcessTimerOrBlockTask+0x84>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	425a      	negs	r2, r3
 8007430:	4153      	adcs	r3, r2
 8007432:	b2db      	uxtb	r3, r3
 8007434:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <prvProcessTimerOrBlockTask+0x88>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	0019      	movs	r1, r3
 8007444:	f7ff f850 	bl	80064e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007448:	f7ff faa0 	bl	800698c <xTaskResumeAll>
 800744c:	1e03      	subs	r3, r0, #0
 800744e:	d104      	bne.n	800745a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007450:	f000 fa4e 	bl	80078f0 <vPortYield>
}
 8007454:	e001      	b.n	800745a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007456:	f7ff fa99 	bl	800698c <xTaskResumeAll>
}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	46bd      	mov	sp, r7
 800745e:	b004      	add	sp, #16
 8007460:	bd80      	pop	{r7, pc}
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	200037d4 	.word	0x200037d4
 8007468:	200037d8 	.word	0x200037d8

0800746c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <prvGetNextExpireTime+0x3c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	425a      	negs	r2, r3
 800747c:	4153      	adcs	r3, r2
 800747e:	b2db      	uxtb	r3, r3
 8007480:	001a      	movs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <prvGetNextExpireTime+0x3c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e001      	b.n	800749e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	0018      	movs	r0, r3
 80074a2:	46bd      	mov	sp, r7
 80074a4:	b004      	add	sp, #16
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	200037d0 	.word	0x200037d0

080074ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074b4:	f7ff faf6 	bl	8006aa4 <xTaskGetTickCount>
 80074b8:	0003      	movs	r3, r0
 80074ba:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <prvSampleTimeNow+0x3c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d205      	bcs.n	80074d2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80074c6:	f000 f8eb 	bl	80076a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	e002      	b.n	80074d8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074d8:	4b03      	ldr	r3, [pc, #12]	; (80074e8 <prvSampleTimeNow+0x3c>)
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	0018      	movs	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b004      	add	sp, #16
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	200037e0 	.word	0x200037e0

080074ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d812      	bhi.n	8007538 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d302      	bcc.n	8007526 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e01b      	b.n	800755e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007526:	4b10      	ldr	r3, [pc, #64]	; (8007568 <prvInsertTimerInActiveList+0x7c>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3304      	adds	r3, #4
 800752e:	0019      	movs	r1, r3
 8007530:	0010      	movs	r0, r2
 8007532:	f7fe fb86 	bl	8005c42 <vListInsert>
 8007536:	e012      	b.n	800755e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d206      	bcs.n	800754e <prvInsertTimerInActiveList+0x62>
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d302      	bcc.n	800754e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e007      	b.n	800755e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <prvInsertTimerInActiveList+0x80>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3304      	adds	r3, #4
 8007556:	0019      	movs	r1, r3
 8007558:	0010      	movs	r0, r2
 800755a:	f7fe fb72 	bl	8005c42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800755e:	697b      	ldr	r3, [r7, #20]
}
 8007560:	0018      	movs	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	b006      	add	sp, #24
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200037d4 	.word	0x200037d4
 800756c:	200037d0 	.word	0x200037d0

08007570 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b08d      	sub	sp, #52	; 0x34
 8007574:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007576:	e07f      	b.n	8007678 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007578:	2208      	movs	r2, #8
 800757a:	18bb      	adds	r3, r7, r2
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	da0f      	bge.n	80075a2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007582:	18bb      	adds	r3, r7, r2
 8007584:	3304      	adds	r3, #4
 8007586:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <prvProcessReceivedCommands+0x22>
 800758e:	b672      	cpsid	i
 8007590:	e7fe      	b.n	8007590 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	6858      	ldr	r0, [r3, #4]
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	0019      	movs	r1, r3
 80075a0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075a2:	2208      	movs	r2, #8
 80075a4:	18bb      	adds	r3, r7, r2
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	db64      	blt.n	8007676 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075ac:	18bb      	adds	r3, r7, r2
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	3304      	adds	r3, #4
 80075be:	0018      	movs	r0, r3
 80075c0:	f7fe fb75 	bl	8005cae <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075c4:	1d3b      	adds	r3, r7, #4
 80075c6:	0018      	movs	r0, r3
 80075c8:	f7ff ff70 	bl	80074ac <prvSampleTimeNow>
 80075cc:	0003      	movs	r3, r0
 80075ce:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80075d0:	2308      	movs	r3, #8
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b09      	cmp	r3, #9
 80075d8:	d84e      	bhi.n	8007678 <prvProcessReceivedCommands+0x108>
 80075da:	009a      	lsls	r2, r3, #2
 80075dc:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <prvProcessReceivedCommands+0x128>)
 80075de:	18d3      	adds	r3, r2, r3
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075e4:	2408      	movs	r4, #8
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	18d1      	adds	r1, r2, r3
 80075f0:	193b      	adds	r3, r7, r4
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	6a38      	ldr	r0, [r7, #32]
 80075f8:	f7ff ff78 	bl	80074ec <prvInsertTimerInActiveList>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d03b      	beq.n	8007678 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	6a3a      	ldr	r2, [r7, #32]
 8007606:	0010      	movs	r0, r2
 8007608:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d132      	bne.n	8007678 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007612:	193b      	adds	r3, r7, r4
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	18d2      	adds	r2, r2, r3
 800761c:	6a38      	ldr	r0, [r7, #32]
 800761e:	2300      	movs	r3, #0
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	2300      	movs	r3, #0
 8007624:	2100      	movs	r1, #0
 8007626:	f7ff fe45 	bl	80072b4 <xTimerGenericCommand>
 800762a:	0003      	movs	r3, r0
 800762c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d121      	bne.n	8007678 <prvProcessReceivedCommands+0x108>
 8007634:	b672      	cpsid	i
 8007636:	e7fe      	b.n	8007636 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007638:	2308      	movs	r3, #8
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <prvProcessReceivedCommands+0xde>
 800764a:	b672      	cpsid	i
 800764c:	e7fe      	b.n	800764c <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	18d1      	adds	r1, r2, r3
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	6a38      	ldr	r0, [r7, #32]
 800765c:	f7ff ff46 	bl	80074ec <prvInsertTimerInActiveList>
					break;
 8007660:	e00a      	b.n	8007678 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	222c      	movs	r2, #44	; 0x2c
 8007666:	5c9b      	ldrb	r3, [r3, r2]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	0018      	movs	r0, r3
 8007670:	f000 fa8c 	bl	8007b8c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007674:	e000      	b.n	8007678 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007676:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007678:	4b08      	ldr	r3, [pc, #32]	; (800769c <prvProcessReceivedCommands+0x12c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2208      	movs	r2, #8
 800767e:	18b9      	adds	r1, r7, r2
 8007680:	2200      	movs	r2, #0
 8007682:	0018      	movs	r0, r3
 8007684:	f7fe fd36 	bl	80060f4 <xQueueReceive>
 8007688:	1e03      	subs	r3, r0, #0
 800768a:	d000      	beq.n	800768e <prvProcessReceivedCommands+0x11e>
 800768c:	e774      	b.n	8007578 <prvProcessReceivedCommands+0x8>
	}
}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	46c0      	nop			; (mov r8, r8)
 8007692:	46bd      	mov	sp, r7
 8007694:	b00b      	add	sp, #44	; 0x2c
 8007696:	bd90      	pop	{r4, r7, pc}
 8007698:	08008110 	.word	0x08008110
 800769c:	200037d8 	.word	0x200037d8

080076a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076a6:	e03e      	b.n	8007726 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076a8:	4b28      	ldr	r3, [pc, #160]	; (800774c <prvSwitchTimerLists+0xac>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076b2:	4b26      	ldr	r3, [pc, #152]	; (800774c <prvSwitchTimerLists+0xac>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3304      	adds	r3, #4
 80076c0:	0018      	movs	r0, r3
 80076c2:	f7fe faf4 	bl	8005cae <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	0010      	movs	r0, r2
 80076ce:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d126      	bne.n	8007726 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	18d3      	adds	r3, r2, r3
 80076e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d90e      	bls.n	8007708 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <prvSwitchTimerLists+0xac>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3304      	adds	r3, #4
 80076fe:	0019      	movs	r1, r3
 8007700:	0010      	movs	r0, r2
 8007702:	f7fe fa9e 	bl	8005c42 <vListInsert>
 8007706:	e00e      	b.n	8007726 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	2300      	movs	r3, #0
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	2300      	movs	r3, #0
 8007712:	2100      	movs	r1, #0
 8007714:	f7ff fdce 	bl	80072b4 <xTimerGenericCommand>
 8007718:	0003      	movs	r3, r0
 800771a:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <prvSwitchTimerLists+0x86>
 8007722:	b672      	cpsid	i
 8007724:	e7fe      	b.n	8007724 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <prvSwitchTimerLists+0xac>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1bb      	bne.n	80076a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007730:	4b06      	ldr	r3, [pc, #24]	; (800774c <prvSwitchTimerLists+0xac>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007736:	4b06      	ldr	r3, [pc, #24]	; (8007750 <prvSwitchTimerLists+0xb0>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	4b04      	ldr	r3, [pc, #16]	; (800774c <prvSwitchTimerLists+0xac>)
 800773c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <prvSwitchTimerLists+0xb0>)
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	46c0      	nop			; (mov r8, r8)
 8007746:	46bd      	mov	sp, r7
 8007748:	b006      	add	sp, #24
 800774a:	bd80      	pop	{r7, pc}
 800774c:	200037d0 	.word	0x200037d0
 8007750:	200037d4 	.word	0x200037d4

08007754 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800775a:	f000 f8d9 	bl	8007910 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800775e:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <prvCheckForValidListAndQueue+0x64>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d123      	bne.n	80077ae <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8007766:	4b15      	ldr	r3, [pc, #84]	; (80077bc <prvCheckForValidListAndQueue+0x68>)
 8007768:	0018      	movs	r0, r3
 800776a:	f7fe fa1f 	bl	8005bac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800776e:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <prvCheckForValidListAndQueue+0x6c>)
 8007770:	0018      	movs	r0, r3
 8007772:	f7fe fa1b 	bl	8005bac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007776:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <prvCheckForValidListAndQueue+0x70>)
 8007778:	4a10      	ldr	r2, [pc, #64]	; (80077bc <prvCheckForValidListAndQueue+0x68>)
 800777a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800777c:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <prvCheckForValidListAndQueue+0x74>)
 800777e:	4a10      	ldr	r2, [pc, #64]	; (80077c0 <prvCheckForValidListAndQueue+0x6c>)
 8007780:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <prvCheckForValidListAndQueue+0x78>)
 8007784:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <prvCheckForValidListAndQueue+0x7c>)
 8007786:	2100      	movs	r1, #0
 8007788:	9100      	str	r1, [sp, #0]
 800778a:	2110      	movs	r1, #16
 800778c:	200a      	movs	r0, #10
 800778e:	f7fe fb0a 	bl	8005da6 <xQueueGenericCreateStatic>
 8007792:	0002      	movs	r2, r0
 8007794:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <prvCheckForValidListAndQueue+0x64>)
 8007796:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007798:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <prvCheckForValidListAndQueue+0x64>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <prvCheckForValidListAndQueue+0x64>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a0b      	ldr	r2, [pc, #44]	; (80077d4 <prvCheckForValidListAndQueue+0x80>)
 80077a6:	0011      	movs	r1, r2
 80077a8:	0018      	movs	r0, r3
 80077aa:	f7fe fe75 	bl	8006498 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077ae:	f000 f8c1 	bl	8007934 <vPortExitCritical>
}
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	200037d8 	.word	0x200037d8
 80077bc:	200037a8 	.word	0x200037a8
 80077c0:	200037bc 	.word	0x200037bc
 80077c4:	200037d0 	.word	0x200037d0
 80077c8:	200037d4 	.word	0x200037d4
 80077cc:	20003884 	.word	0x20003884
 80077d0:	200037e4 	.word	0x200037e4
 80077d4:	08007ffc 	.word	0x08007ffc

080077d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3b04      	subs	r3, #4
 80077e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2280      	movs	r2, #128	; 0x80
 80077ee:	0452      	lsls	r2, r2, #17
 80077f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3b04      	subs	r3, #4
 8007802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007804:	4a08      	ldr	r2, [pc, #32]	; (8007828 <pxPortInitialiseStack+0x50>)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3b14      	subs	r3, #20
 800780e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3b20      	subs	r3, #32
 800781a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800781c:	68fb      	ldr	r3, [r7, #12]
}
 800781e:	0018      	movs	r0, r3
 8007820:	46bd      	mov	sp, r7
 8007822:	b004      	add	sp, #16
 8007824:	bd80      	pop	{r7, pc}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	0800782d 	.word	0x0800782d

0800782c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007836:	4b08      	ldr	r3, [pc, #32]	; (8007858 <prvTaskExitError+0x2c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	d001      	beq.n	8007842 <prvTaskExitError+0x16>
 800783e:	b672      	cpsid	i
 8007840:	e7fe      	b.n	8007840 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007842:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007844:	46c0      	nop			; (mov r8, r8)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0fc      	beq.n	8007846 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800784c:	46c0      	nop			; (mov r8, r8)
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	46bd      	mov	sp, r7
 8007852:	b002      	add	sp, #8
 8007854:	bd80      	pop	{r7, pc}
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	2000281c 	.word	0x2000281c

0800785c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007870 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007870:	4a0b      	ldr	r2, [pc, #44]	; (80078a0 <pxCurrentTCBConst2>)
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	3020      	adds	r0, #32
 8007878:	f380 8809 	msr	PSP, r0
 800787c:	2002      	movs	r0, #2
 800787e:	f380 8814 	msr	CONTROL, r0
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007888:	46ae      	mov	lr, r5
 800788a:	bc08      	pop	{r3}
 800788c:	bc04      	pop	{r2}
 800788e:	b662      	cpsie	i
 8007890:	4718      	bx	r3
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	46c0      	nop			; (mov r8, r8)
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	46c0      	nop			; (mov r8, r8)
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46c0      	nop			; (mov r8, r8)

080078a0 <pxCurrentTCBConst2>:
 80078a0:	200032a8 	.word	0x200032a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80078a4:	46c0      	nop			; (mov r8, r8)
 80078a6:	46c0      	nop			; (mov r8, r8)

080078a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <xPortStartScheduler+0x40>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <xPortStartScheduler+0x40>)
 80078b2:	21ff      	movs	r1, #255	; 0xff
 80078b4:	0409      	lsls	r1, r1, #16
 80078b6:	430a      	orrs	r2, r1
 80078b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80078ba:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <xPortStartScheduler+0x40>)
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <xPortStartScheduler+0x40>)
 80078c0:	21ff      	movs	r1, #255	; 0xff
 80078c2:	0609      	lsls	r1, r1, #24
 80078c4:	430a      	orrs	r2, r1
 80078c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80078c8:	f000 f898 	bl	80079fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078cc:	4b07      	ldr	r3, [pc, #28]	; (80078ec <xPortStartScheduler+0x44>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80078d2:	f7ff ffcd 	bl	8007870 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078d6:	f7ff f9a7 	bl	8006c28 <vTaskSwitchContext>
	prvTaskExitError();
 80078da:	f7ff ffa7 	bl	800782c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	0018      	movs	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	e000ed20 	.word	0xe000ed20
 80078ec:	2000281c 	.word	0x2000281c

080078f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <vPortYield+0x1c>)
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	0552      	lsls	r2, r2, #21
 80078fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80078fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007900:	f3bf 8f6f 	isb	sy
}
 8007904:	46c0      	nop			; (mov r8, r8)
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007914:	b672      	cpsid	i
    uxCriticalNesting++;
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <vPortEnterCritical+0x20>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	4b04      	ldr	r3, [pc, #16]	; (8007930 <vPortEnterCritical+0x20>)
 800791e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007920:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007924:	f3bf 8f6f 	isb	sy
}
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	2000281c 	.word	0x2000281c

08007934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007938:	4b09      	ldr	r3, [pc, #36]	; (8007960 <vPortExitCritical+0x2c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <vPortExitCritical+0x10>
 8007940:	b672      	cpsid	i
 8007942:	e7fe      	b.n	8007942 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <vPortExitCritical+0x2c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	1e5a      	subs	r2, r3, #1
 800794a:	4b05      	ldr	r3, [pc, #20]	; (8007960 <vPortExitCritical+0x2c>)
 800794c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <vPortExitCritical+0x2c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d100      	bne.n	8007958 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007956:	b662      	cpsie	i
    }
}
 8007958:	46c0      	nop			; (mov r8, r8)
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	2000281c 	.word	0x2000281c

08007964 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007964:	f3ef 8010 	mrs	r0, PRIMASK
 8007968:	b672      	cpsid	i
 800796a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800796c:	46c0      	nop			; (mov r8, r8)
 800796e:	0018      	movs	r0, r3

08007970 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007970:	f380 8810 	msr	PRIMASK, r0
 8007974:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007976:	46c0      	nop			; (mov r8, r8)
	...

08007980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007980:	f3ef 8009 	mrs	r0, PSP
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <pxCurrentTCBConst>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	3820      	subs	r0, #32
 800798a:	6010      	str	r0, [r2, #0]
 800798c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800798e:	4644      	mov	r4, r8
 8007990:	464d      	mov	r5, r9
 8007992:	4656      	mov	r6, sl
 8007994:	465f      	mov	r7, fp
 8007996:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007998:	b508      	push	{r3, lr}
 800799a:	b672      	cpsid	i
 800799c:	f7ff f944 	bl	8006c28 <vTaskSwitchContext>
 80079a0:	b662      	cpsie	i
 80079a2:	bc0c      	pop	{r2, r3}
 80079a4:	6811      	ldr	r1, [r2, #0]
 80079a6:	6808      	ldr	r0, [r1, #0]
 80079a8:	3010      	adds	r0, #16
 80079aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80079ac:	46a0      	mov	r8, r4
 80079ae:	46a9      	mov	r9, r5
 80079b0:	46b2      	mov	sl, r6
 80079b2:	46bb      	mov	fp, r7
 80079b4:	f380 8809 	msr	PSP, r0
 80079b8:	3820      	subs	r0, #32
 80079ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80079bc:	4718      	bx	r3
 80079be:	46c0      	nop			; (mov r8, r8)

080079c0 <pxCurrentTCBConst>:
 80079c0:	200032a8 	.word	0x200032a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46c0      	nop			; (mov r8, r8)

080079c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80079ce:	f7ff ffc9 	bl	8007964 <ulSetInterruptMaskFromISR>
 80079d2:	0003      	movs	r3, r0
 80079d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079d6:	f7ff f873 	bl	8006ac0 <xTaskIncrementTick>
 80079da:	1e03      	subs	r3, r0, #0
 80079dc:	d003      	beq.n	80079e6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <xPortSysTickHandler+0x30>)
 80079e0:	2280      	movs	r2, #128	; 0x80
 80079e2:	0552      	lsls	r2, r2, #21
 80079e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	0018      	movs	r0, r3
 80079ea:	f7ff ffc1 	bl	8007970 <vClearInterruptMaskFromISR>
}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	46bd      	mov	sp, r7
 80079f2:	b002      	add	sp, #8
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <prvSetupTimerInterrupt+0x34>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <prvSetupTimerInterrupt+0x38>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <prvSetupTimerInterrupt+0x3c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	22fa      	movs	r2, #250	; 0xfa
 8007a12:	0091      	lsls	r1, r2, #2
 8007a14:	0018      	movs	r0, r3
 8007a16:	f7f8 fb77 	bl	8000108 <__udivsi3>
 8007a1a:	0003      	movs	r3, r0
 8007a1c:	001a      	movs	r2, r3
 8007a1e:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <prvSetupTimerInterrupt+0x40>)
 8007a20:	3a01      	subs	r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007a24:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <prvSetupTimerInterrupt+0x34>)
 8007a26:	2207      	movs	r2, #7
 8007a28:	601a      	str	r2, [r3, #0]
}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	e000e010 	.word	0xe000e010
 8007a34:	e000e018 	.word	0xe000e018
 8007a38:	20002810 	.word	0x20002810
 8007a3c:	e000e014 	.word	0xe000e014

08007a40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007a4c:	f7fe ff92 	bl	8006974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a50:	4b49      	ldr	r3, [pc, #292]	; (8007b78 <pvPortMalloc+0x138>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a58:	f000 f8e0 	bl	8007c1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a5c:	4b47      	ldr	r3, [pc, #284]	; (8007b7c <pvPortMalloc+0x13c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	4013      	ands	r3, r2
 8007a64:	d000      	beq.n	8007a68 <pvPortMalloc+0x28>
 8007a66:	e079      	b.n	8007b5c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d012      	beq.n	8007a94 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007a6e:	2208      	movs	r2, #8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	189b      	adds	r3, r3, r2
 8007a74:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2207      	movs	r2, #7
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d00a      	beq.n	8007a94 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2207      	movs	r2, #7
 8007a82:	4393      	bics	r3, r2
 8007a84:	3308      	adds	r3, #8
 8007a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2207      	movs	r2, #7
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	d001      	beq.n	8007a94 <pvPortMalloc+0x54>
 8007a90:	b672      	cpsid	i
 8007a92:	e7fe      	b.n	8007a92 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d060      	beq.n	8007b5c <pvPortMalloc+0x11c>
 8007a9a:	4b39      	ldr	r3, [pc, #228]	; (8007b80 <pvPortMalloc+0x140>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d85b      	bhi.n	8007b5c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aa4:	4b37      	ldr	r3, [pc, #220]	; (8007b84 <pvPortMalloc+0x144>)
 8007aa6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007aa8:	4b36      	ldr	r3, [pc, #216]	; (8007b84 <pvPortMalloc+0x144>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aae:	e004      	b.n	8007aba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <pvPortMalloc+0x8c>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f1      	bne.n	8007ab0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007acc:	4b2a      	ldr	r3, [pc, #168]	; (8007b78 <pvPortMalloc+0x138>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d042      	beq.n	8007b5c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2208      	movs	r2, #8
 8007adc:	189b      	adds	r3, r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	2308      	movs	r3, #8
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d916      	bls.n	8007b26 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	18d3      	adds	r3, r2, r3
 8007afe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2207      	movs	r2, #7
 8007b04:	4013      	ands	r3, r2
 8007b06:	d001      	beq.n	8007b0c <pvPortMalloc+0xcc>
 8007b08:	b672      	cpsid	i
 8007b0a:	e7fe      	b.n	8007b0a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	0018      	movs	r0, r3
 8007b22:	f000 f8db 	bl	8007cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b26:	4b16      	ldr	r3, [pc, #88]	; (8007b80 <pvPortMalloc+0x140>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <pvPortMalloc+0x140>)
 8007b32:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b34:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <pvPortMalloc+0x140>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4b13      	ldr	r3, [pc, #76]	; (8007b88 <pvPortMalloc+0x148>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d203      	bcs.n	8007b48 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <pvPortMalloc+0x140>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <pvPortMalloc+0x148>)
 8007b46:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <pvPortMalloc+0x13c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b5c:	f7fe ff16 	bl	800698c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2207      	movs	r2, #7
 8007b64:	4013      	ands	r3, r2
 8007b66:	d001      	beq.n	8007b6c <pvPortMalloc+0x12c>
 8007b68:	b672      	cpsid	i
 8007b6a:	e7fe      	b.n	8007b6a <pvPortMalloc+0x12a>
	return pvReturn;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	0018      	movs	r0, r3
 8007b70:	46bd      	mov	sp, r7
 8007b72:	b006      	add	sp, #24
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	200044dc 	.word	0x200044dc
 8007b7c:	200044e8 	.word	0x200044e8
 8007b80:	200044e0 	.word	0x200044e0
 8007b84:	200044d4 	.word	0x200044d4
 8007b88:	200044e4 	.word	0x200044e4

08007b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d035      	beq.n	8007c0a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	425b      	negs	r3, r3
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	18d3      	adds	r3, r2, r3
 8007ba6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	4b18      	ldr	r3, [pc, #96]	; (8007c14 <vPortFree+0x88>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	d101      	bne.n	8007bbc <vPortFree+0x30>
 8007bb8:	b672      	cpsid	i
 8007bba:	e7fe      	b.n	8007bba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <vPortFree+0x3c>
 8007bc4:	b672      	cpsid	i
 8007bc6:	e7fe      	b.n	8007bc6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <vPortFree+0x88>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	d01a      	beq.n	8007c0a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d116      	bne.n	8007c0a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <vPortFree+0x88>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	401a      	ands	r2, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bec:	f7fe fec2 	bl	8006974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <vPortFree+0x8c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	18d2      	adds	r2, r2, r3
 8007bfa:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <vPortFree+0x8c>)
 8007bfc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	0018      	movs	r0, r3
 8007c02:	f000 f86b 	bl	8007cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c06:	f7fe fec1 	bl	800698c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	200044e8 	.word	0x200044e8
 8007c18:	200044e0 	.word	0x200044e0

08007c1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c22:	23c0      	movs	r3, #192	; 0xc0
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c28:	4b26      	ldr	r3, [pc, #152]	; (8007cc4 <prvHeapInit+0xa8>)
 8007c2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2207      	movs	r2, #7
 8007c30:	4013      	ands	r3, r2
 8007c32:	d00c      	beq.n	8007c4e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3307      	adds	r3, #7
 8007c38:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	4393      	bics	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	1ad2      	subs	r2, r2, r3
 8007c48:	4b1e      	ldr	r3, [pc, #120]	; (8007cc4 <prvHeapInit+0xa8>)
 8007c4a:	18d3      	adds	r3, r2, r3
 8007c4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c52:	4b1d      	ldr	r3, [pc, #116]	; (8007cc8 <prvHeapInit+0xac>)
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c58:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <prvHeapInit+0xac>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	18d3      	adds	r3, r2, r3
 8007c64:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c66:	2208      	movs	r2, #8
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2207      	movs	r2, #7
 8007c72:	4393      	bics	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <prvHeapInit+0xb0>)
 8007c7a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007c7c:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <prvHeapInit+0xb0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2200      	movs	r2, #0
 8007c82:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c84:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <prvHeapInit+0xb0>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	1ad2      	subs	r2, r2, r3
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <prvHeapInit+0xb0>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <prvHeapInit+0xb4>)
 8007ca8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <prvHeapInit+0xb8>)
 8007cb0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <prvHeapInit+0xbc>)
 8007cb4:	2280      	movs	r2, #128	; 0x80
 8007cb6:	0612      	lsls	r2, r2, #24
 8007cb8:	601a      	str	r2, [r3, #0]
}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	b004      	add	sp, #16
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	200038d4 	.word	0x200038d4
 8007cc8:	200044d4 	.word	0x200044d4
 8007ccc:	200044dc 	.word	0x200044dc
 8007cd0:	200044e4 	.word	0x200044e4
 8007cd4:	200044e0 	.word	0x200044e0
 8007cd8:	200044e8 	.word	0x200044e8

08007cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ce4:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <prvInsertBlockIntoFreeList+0xa8>)
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e002      	b.n	8007cf0 <prvInsertBlockIntoFreeList+0x14>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d8f7      	bhi.n	8007cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	18d3      	adds	r3, r2, r3
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d108      	bne.n	8007d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	18d2      	adds	r2, r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	18d2      	adds	r2, r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d118      	bne.n	8007d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <prvInsertBlockIntoFreeList+0xac>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d00d      	beq.n	8007d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	18d2      	adds	r2, r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	e008      	b.n	8007d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <prvInsertBlockIntoFreeList+0xac>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e003      	b.n	8007d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d002      	beq.n	8007d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b004      	add	sp, #16
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	46c0      	nop			; (mov r8, r8)
 8007d84:	200044d4 	.word	0x200044d4
 8007d88:	200044dc 	.word	0x200044dc

08007d8c <__libc_init_array>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	2600      	movs	r6, #0
 8007d90:	4d0c      	ldr	r5, [pc, #48]	; (8007dc4 <__libc_init_array+0x38>)
 8007d92:	4c0d      	ldr	r4, [pc, #52]	; (8007dc8 <__libc_init_array+0x3c>)
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	d109      	bne.n	8007db0 <__libc_init_array+0x24>
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	f000 f8f9 	bl	8007f94 <_init>
 8007da2:	4d0a      	ldr	r5, [pc, #40]	; (8007dcc <__libc_init_array+0x40>)
 8007da4:	4c0a      	ldr	r4, [pc, #40]	; (8007dd0 <__libc_init_array+0x44>)
 8007da6:	1b64      	subs	r4, r4, r5
 8007da8:	10a4      	asrs	r4, r4, #2
 8007daa:	42a6      	cmp	r6, r4
 8007dac:	d105      	bne.n	8007dba <__libc_init_array+0x2e>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	00b3      	lsls	r3, r6, #2
 8007db2:	58eb      	ldr	r3, [r5, r3]
 8007db4:	4798      	blx	r3
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7ee      	b.n	8007d98 <__libc_init_array+0xc>
 8007dba:	00b3      	lsls	r3, r6, #2
 8007dbc:	58eb      	ldr	r3, [r5, r3]
 8007dbe:	4798      	blx	r3
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	e7f2      	b.n	8007daa <__libc_init_array+0x1e>
 8007dc4:	08008198 	.word	0x08008198
 8007dc8:	08008198 	.word	0x08008198
 8007dcc:	08008198 	.word	0x08008198
 8007dd0:	0800819c 	.word	0x0800819c

08007dd4 <__retarget_lock_acquire_recursive>:
 8007dd4:	4770      	bx	lr

08007dd6 <__retarget_lock_release_recursive>:
 8007dd6:	4770      	bx	lr

08007dd8 <memcpy>:
 8007dd8:	2300      	movs	r3, #0
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d100      	bne.n	8007de2 <memcpy+0xa>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	5ccc      	ldrb	r4, [r1, r3]
 8007de4:	54c4      	strb	r4, [r0, r3]
 8007de6:	3301      	adds	r3, #1
 8007de8:	e7f8      	b.n	8007ddc <memcpy+0x4>

08007dea <memset>:
 8007dea:	0003      	movs	r3, r0
 8007dec:	1882      	adds	r2, r0, r2
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d100      	bne.n	8007df4 <memset+0xa>
 8007df2:	4770      	bx	lr
 8007df4:	7019      	strb	r1, [r3, #0]
 8007df6:	3301      	adds	r3, #1
 8007df8:	e7f9      	b.n	8007dee <memset+0x4>

08007dfa <cleanup_glue>:
 8007dfa:	b570      	push	{r4, r5, r6, lr}
 8007dfc:	000d      	movs	r5, r1
 8007dfe:	6809      	ldr	r1, [r1, #0]
 8007e00:	0004      	movs	r4, r0
 8007e02:	2900      	cmp	r1, #0
 8007e04:	d001      	beq.n	8007e0a <cleanup_glue+0x10>
 8007e06:	f7ff fff8 	bl	8007dfa <cleanup_glue>
 8007e0a:	0029      	movs	r1, r5
 8007e0c:	0020      	movs	r0, r4
 8007e0e:	f000 f877 	bl	8007f00 <_free_r>
 8007e12:	bd70      	pop	{r4, r5, r6, pc}

08007e14 <_reclaim_reent>:
 8007e14:	4b31      	ldr	r3, [pc, #196]	; (8007edc <_reclaim_reent+0xc8>)
 8007e16:	b570      	push	{r4, r5, r6, lr}
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	0004      	movs	r4, r0
 8007e1c:	4283      	cmp	r3, r0
 8007e1e:	d049      	beq.n	8007eb4 <_reclaim_reent+0xa0>
 8007e20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <_reclaim_reent+0x28>
 8007e26:	2500      	movs	r5, #0
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	42ab      	cmp	r3, r5
 8007e2c:	d147      	bne.n	8007ebe <_reclaim_reent+0xaa>
 8007e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e30:	6819      	ldr	r1, [r3, #0]
 8007e32:	2900      	cmp	r1, #0
 8007e34:	d002      	beq.n	8007e3c <_reclaim_reent+0x28>
 8007e36:	0020      	movs	r0, r4
 8007e38:	f000 f862 	bl	8007f00 <_free_r>
 8007e3c:	6961      	ldr	r1, [r4, #20]
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d002      	beq.n	8007e48 <_reclaim_reent+0x34>
 8007e42:	0020      	movs	r0, r4
 8007e44:	f000 f85c 	bl	8007f00 <_free_r>
 8007e48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e4a:	2900      	cmp	r1, #0
 8007e4c:	d002      	beq.n	8007e54 <_reclaim_reent+0x40>
 8007e4e:	0020      	movs	r0, r4
 8007e50:	f000 f856 	bl	8007f00 <_free_r>
 8007e54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d002      	beq.n	8007e60 <_reclaim_reent+0x4c>
 8007e5a:	0020      	movs	r0, r4
 8007e5c:	f000 f850 	bl	8007f00 <_free_r>
 8007e60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e62:	2900      	cmp	r1, #0
 8007e64:	d002      	beq.n	8007e6c <_reclaim_reent+0x58>
 8007e66:	0020      	movs	r0, r4
 8007e68:	f000 f84a 	bl	8007f00 <_free_r>
 8007e6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	d002      	beq.n	8007e78 <_reclaim_reent+0x64>
 8007e72:	0020      	movs	r0, r4
 8007e74:	f000 f844 	bl	8007f00 <_free_r>
 8007e78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	d002      	beq.n	8007e84 <_reclaim_reent+0x70>
 8007e7e:	0020      	movs	r0, r4
 8007e80:	f000 f83e 	bl	8007f00 <_free_r>
 8007e84:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e86:	2900      	cmp	r1, #0
 8007e88:	d002      	beq.n	8007e90 <_reclaim_reent+0x7c>
 8007e8a:	0020      	movs	r0, r4
 8007e8c:	f000 f838 	bl	8007f00 <_free_r>
 8007e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e92:	2900      	cmp	r1, #0
 8007e94:	d002      	beq.n	8007e9c <_reclaim_reent+0x88>
 8007e96:	0020      	movs	r0, r4
 8007e98:	f000 f832 	bl	8007f00 <_free_r>
 8007e9c:	69a3      	ldr	r3, [r4, #24]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d008      	beq.n	8007eb4 <_reclaim_reent+0xa0>
 8007ea2:	0020      	movs	r0, r4
 8007ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ea6:	4798      	blx	r3
 8007ea8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d002      	beq.n	8007eb4 <_reclaim_reent+0xa0>
 8007eae:	0020      	movs	r0, r4
 8007eb0:	f7ff ffa3 	bl	8007dfa <cleanup_glue>
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	5949      	ldr	r1, [r1, r5]
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d108      	bne.n	8007ece <_reclaim_reent+0xba>
 8007ebc:	3504      	adds	r5, #4
 8007ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec0:	68d9      	ldr	r1, [r3, #12]
 8007ec2:	2d80      	cmp	r5, #128	; 0x80
 8007ec4:	d1f7      	bne.n	8007eb6 <_reclaim_reent+0xa2>
 8007ec6:	0020      	movs	r0, r4
 8007ec8:	f000 f81a 	bl	8007f00 <_free_r>
 8007ecc:	e7af      	b.n	8007e2e <_reclaim_reent+0x1a>
 8007ece:	680e      	ldr	r6, [r1, #0]
 8007ed0:	0020      	movs	r0, r4
 8007ed2:	f000 f815 	bl	8007f00 <_free_r>
 8007ed6:	0031      	movs	r1, r6
 8007ed8:	e7ee      	b.n	8007eb8 <_reclaim_reent+0xa4>
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	20002820 	.word	0x20002820

08007ee0 <__malloc_lock>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	4802      	ldr	r0, [pc, #8]	; (8007eec <__malloc_lock+0xc>)
 8007ee4:	f7ff ff76 	bl	8007dd4 <__retarget_lock_acquire_recursive>
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	200044ec 	.word	0x200044ec

08007ef0 <__malloc_unlock>:
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	4802      	ldr	r0, [pc, #8]	; (8007efc <__malloc_unlock+0xc>)
 8007ef4:	f7ff ff6f 	bl	8007dd6 <__retarget_lock_release_recursive>
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	200044ec 	.word	0x200044ec

08007f00 <_free_r>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	0005      	movs	r5, r0
 8007f04:	2900      	cmp	r1, #0
 8007f06:	d010      	beq.n	8007f2a <_free_r+0x2a>
 8007f08:	1f0c      	subs	r4, r1, #4
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	da00      	bge.n	8007f12 <_free_r+0x12>
 8007f10:	18e4      	adds	r4, r4, r3
 8007f12:	0028      	movs	r0, r5
 8007f14:	f7ff ffe4 	bl	8007ee0 <__malloc_lock>
 8007f18:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <_free_r+0x90>)
 8007f1a:	6813      	ldr	r3, [r2, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d105      	bne.n	8007f2c <_free_r+0x2c>
 8007f20:	6063      	str	r3, [r4, #4]
 8007f22:	6014      	str	r4, [r2, #0]
 8007f24:	0028      	movs	r0, r5
 8007f26:	f7ff ffe3 	bl	8007ef0 <__malloc_unlock>
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d908      	bls.n	8007f42 <_free_r+0x42>
 8007f30:	6821      	ldr	r1, [r4, #0]
 8007f32:	1860      	adds	r0, r4, r1
 8007f34:	4283      	cmp	r3, r0
 8007f36:	d1f3      	bne.n	8007f20 <_free_r+0x20>
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	1841      	adds	r1, r0, r1
 8007f3e:	6021      	str	r1, [r4, #0]
 8007f40:	e7ee      	b.n	8007f20 <_free_r+0x20>
 8007f42:	001a      	movs	r2, r3
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <_free_r+0x4e>
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	d9f9      	bls.n	8007f42 <_free_r+0x42>
 8007f4e:	6811      	ldr	r1, [r2, #0]
 8007f50:	1850      	adds	r0, r2, r1
 8007f52:	42a0      	cmp	r0, r4
 8007f54:	d10b      	bne.n	8007f6e <_free_r+0x6e>
 8007f56:	6820      	ldr	r0, [r4, #0]
 8007f58:	1809      	adds	r1, r1, r0
 8007f5a:	1850      	adds	r0, r2, r1
 8007f5c:	6011      	str	r1, [r2, #0]
 8007f5e:	4283      	cmp	r3, r0
 8007f60:	d1e0      	bne.n	8007f24 <_free_r+0x24>
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	1841      	adds	r1, r0, r1
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	6053      	str	r3, [r2, #4]
 8007f6c:	e7da      	b.n	8007f24 <_free_r+0x24>
 8007f6e:	42a0      	cmp	r0, r4
 8007f70:	d902      	bls.n	8007f78 <_free_r+0x78>
 8007f72:	230c      	movs	r3, #12
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	e7d5      	b.n	8007f24 <_free_r+0x24>
 8007f78:	6821      	ldr	r1, [r4, #0]
 8007f7a:	1860      	adds	r0, r4, r1
 8007f7c:	4283      	cmp	r3, r0
 8007f7e:	d103      	bne.n	8007f88 <_free_r+0x88>
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	1841      	adds	r1, r0, r1
 8007f86:	6021      	str	r1, [r4, #0]
 8007f88:	6063      	str	r3, [r4, #4]
 8007f8a:	6054      	str	r4, [r2, #4]
 8007f8c:	e7ca      	b.n	8007f24 <_free_r+0x24>
 8007f8e:	46c0      	nop			; (mov r8, r8)
 8007f90:	200044f0 	.word	0x200044f0

08007f94 <_init>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_fini>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr
