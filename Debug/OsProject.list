
OsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000797c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c2c  08007c2c  00021d40  2**0
                  CONTENTS
  4 .ARM          00000000  08007c2c  08007c2c  00021d40  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c2c  08007c2c  00021d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001d40  20000000  08007c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  20001d40  08009974  00021d40  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000399c  08009974  0002399c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00021d40  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b565  00000000  00000000  00021d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f3  00000000  00000000  0003d2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00040bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  000423f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045c3  00000000  00000000  00043ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb4c  00000000  00000000  0004807b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b71ca  00000000  00000000  00063bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ad91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac8  00000000  00000000  0011ade4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20001d40 	.word	0x20001d40
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a24 	.word	0x08007a24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20001d44 	.word	0x20001d44
 8000104:	08007a24 	.word	0x08007a24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Display_master_function>:

int was_screen_cleared = 0; // Verifica daca ecranul a fost curatat. Se foloseste pentru treptele de viteza (functioneaza cu logica negativa)
int is_display_busy = 0;	// Verifica daca pe display este incarcat deja o matrice a evita suprapunerile de imagini

void Display_master_function(int mod_lucru_display) // Functia Master care primeste modul de lucru al display-ului si apeleaza functia corespunzatoare
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	switch (mod_lucru_display)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b06      	cmp	r3, #6
 800022c:	d820      	bhi.n	8000270 <Display_master_function+0x50>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	009a      	lsls	r2, r3, #2
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <Display_master_function+0x70>)
 8000234:	18d3      	adds	r3, r2, r3
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	469f      	mov	pc, r3
	{
	case 0:
		Icons_clear_screen(); // Apeleaza functia de curatare a ecranului
 800023a:	f000 f943 	bl	80004c4 <Icons_clear_screen>
		was_screen_cleared = 0;
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <Display_master_function+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
		is_display_busy = 0;
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <Display_master_function+0x78>)
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
		break;
 800024a:	e011      	b.n	8000270 <Display_master_function+0x50>
	case 1:
		Display_stergere_x1();
 800024c:	f000 f826 	bl	800029c <Display_stergere_x1>
		break;
 8000250:	e00e      	b.n	8000270 <Display_master_function+0x50>
	case 2:
		Display_treapta_1();
 8000252:	f000 f833 	bl	80002bc <Display_treapta_1>
		break;
 8000256:	e00b      	b.n	8000270 <Display_master_function+0x50>
	case 3:
		Display_treapta_2();
 8000258:	f000 f848 	bl	80002ec <Display_treapta_2>
		break;
 800025c:	e008      	b.n	8000270 <Display_master_function+0x50>
	case 4:
		Display_treapta_3();
 800025e:	f000 f85d 	bl	800031c <Display_treapta_3>
		break;
 8000262:	e005      	b.n	8000270 <Display_master_function+0x50>
	case 5:
		Display_spalare_parbriz();
 8000264:	f000 f872 	bl	800034c <Display_spalare_parbriz>
		break;
 8000268:	e002      	b.n	8000270 <Display_master_function+0x50>
	case 6:
		Display_spalare_luneta();
 800026a:	f000 f87f 	bl	800036c <Display_spalare_luneta>
		break;
 800026e:	46c0      	nop			; (mov r8, r8)
	}

	if (is_display_busy == 0) // Daca display-ul nu este incarcat atunci curata ecranul si reseteaza ambele variabile de control
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <Display_master_function+0x78>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d107      	bne.n	8000288 <Display_master_function+0x68>
	{
		Icons_clear_screen(); // Apeleaza functia de curatare a ecranului
 8000278:	f000 f924 	bl	80004c4 <Icons_clear_screen>
		was_screen_cleared = 0;
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <Display_master_function+0x74>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		is_display_busy = 0;
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <Display_master_function+0x78>)
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
	}
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	08007a94 	.word	0x08007a94
 8000294:	20001d5c 	.word	0x20001d5c
 8000298:	20001d60 	.word	0x20001d60

0800029c <Display_stergere_x1>:

// Functiile pentru afisat modul de lucru

void Display_stergere_x1()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if (is_display_busy == 0)
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <Display_stergere_x1+0x1c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d104      	bne.n	80002b2 <Display_stergere_x1+0x16>
	{
		is_display_busy = 1;
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <Display_stergere_x1+0x1c>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	601a      	str	r2, [r3, #0]
		Icons_load_x1();
 80002ae:	f000 f86d 	bl	800038c <Icons_load_x1>
	}
}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20001d60 	.word	0x20001d60

080002bc <Display_treapta_1>:

void Display_treapta_1()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	is_display_busy = 1;
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <Display_treapta_1+0x28>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]

	if (was_screen_cleared != 0)
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <Display_treapta_1+0x2c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d004      	beq.n	80002d8 <Display_treapta_1+0x1c>
	{						 // Verifica daca este nevoie sa curete ecranul pt afisaj
		Icons_clear_screen(); // (trecere de la o treapta la alta)
 80002ce:	f000 f8f9 	bl	80004c4 <Icons_clear_screen>
		was_screen_cleared = 0;
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <Display_treapta_1+0x2c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
	}

	Icons_load_treapta_1();
 80002d8:	f000 f872 	bl	80003c0 <Icons_load_treapta_1>
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	20001d60 	.word	0x20001d60
 80002e8:	20001d5c 	.word	0x20001d5c

080002ec <Display_treapta_2>:

void Display_treapta_2()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	is_display_busy = 1;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <Display_treapta_2+0x28>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]

	if (was_screen_cleared != 1)
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <Display_treapta_2+0x2c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d004      	beq.n	8000308 <Display_treapta_2+0x1c>
	{						 // Verifica daca este nevoie sa curete ecranul pt afisaj
		Icons_clear_screen(); // (trecere de la o treapta la alta)
 80002fe:	f000 f8e1 	bl	80004c4 <Icons_clear_screen>
		was_screen_cleared = 1;
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <Display_treapta_2+0x2c>)
 8000304:	2201      	movs	r2, #1
 8000306:	601a      	str	r2, [r3, #0]
	}

	Icons_load_treapta_2();
 8000308:	f000 f874 	bl	80003f4 <Icons_load_treapta_2>
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	20001d60 	.word	0x20001d60
 8000318:	20001d5c 	.word	0x20001d5c

0800031c <Display_treapta_3>:

void Display_treapta_3()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	is_display_busy = 1;
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <Display_treapta_3+0x28>)
 8000322:	2201      	movs	r2, #1
 8000324:	601a      	str	r2, [r3, #0]

	if (was_screen_cleared != 2)
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <Display_treapta_3+0x2c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d004      	beq.n	8000338 <Display_treapta_3+0x1c>
	{						 // Verifica daca este nevoie sa curete ecranul pt afisaj
		Icons_clear_screen(); // (trecere de la o treapta la alta)
 800032e:	f000 f8c9 	bl	80004c4 <Icons_clear_screen>
		was_screen_cleared = 2;
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <Display_treapta_3+0x2c>)
 8000334:	2202      	movs	r2, #2
 8000336:	601a      	str	r2, [r3, #0]
	}

	Icons_load_treapta_3();
 8000338:	f000 f876 	bl	8000428 <Icons_load_treapta_3>
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	20001d60 	.word	0x20001d60
 8000348:	20001d5c 	.word	0x20001d5c

0800034c <Display_spalare_parbriz>:

void Display_spalare_parbriz()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	if (is_display_busy == 0)
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <Display_spalare_parbriz+0x1c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d104      	bne.n	8000362 <Display_spalare_parbriz+0x16>
	{
		is_display_busy = 1;
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <Display_spalare_parbriz+0x1c>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
		Icons_load_spalare_parbriz();
 800035e:	f000 f87d 	bl	800045c <Icons_load_spalare_parbriz>
	}
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20001d60 	.word	0x20001d60

0800036c <Display_spalare_luneta>:

void Display_spalare_luneta()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	if (is_display_busy == 0)
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <Display_spalare_luneta+0x1c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d104      	bne.n	8000382 <Display_spalare_luneta+0x16>
	{
		is_display_busy = 1;
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <Display_spalare_luneta+0x1c>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
		Icons_load_spalare_luneta();
 800037e:	f000 f887 	bl	8000490 <Icons_load_spalare_luneta>
	}
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20001d60 	.word	0x20001d60

0800038c <Icons_load_x1>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////   Functiile de incarcat in buffer   ////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Icons_load_x1() // Functia de incarcare a matricei pentru Wipe x1
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_x1, 128, 64, 1); // Muta matricea in buffer
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <Icons_load_x1+0x2c>)
 8000394:	4809      	ldr	r0, [pc, #36]	; (80003bc <Icons_load_x1+0x30>)
 8000396:	2201      	movs	r2, #1
 8000398:	9202      	str	r2, [sp, #8]
 800039a:	2240      	movs	r2, #64	; 0x40
 800039c:	9201      	str	r2, [sp, #4]
 800039e:	2280      	movs	r2, #128	; 0x80
 80003a0:	9200      	str	r2, [sp, #0]
 80003a2:	2200      	movs	r2, #0
 80003a4:	2100      	movs	r1, #0
 80003a6:	f000 fbd1 	bl	8000b4c <st7565_drawbitmap>
	st7565_write_buffer(buffer);						 // Afiseaza pe ecran
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <Icons_load_x1+0x30>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 f98d 	bl	80006cc <st7565_write_buffer>
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000000 	.word	0x20000000
 80003bc:	200018c0 	.word	0x200018c0

080003c0 <Icons_load_treapta_1>:

void Icons_load_treapta_1() // Functia de incarcare a matricei pentru Treapta 1 de viteza
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_treapta_1, 128, 64, 1); // Muta matricea in buffer
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <Icons_load_treapta_1+0x2c>)
 80003c8:	4809      	ldr	r0, [pc, #36]	; (80003f0 <Icons_load_treapta_1+0x30>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	9202      	str	r2, [sp, #8]
 80003ce:	2240      	movs	r2, #64	; 0x40
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	2200      	movs	r2, #0
 80003d8:	2100      	movs	r1, #0
 80003da:	f000 fbb7 	bl	8000b4c <st7565_drawbitmap>
	st7565_write_buffer(buffer);							   // Afiseaza pe ecran
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <Icons_load_treapta_1+0x30>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 f973 	bl	80006cc <st7565_write_buffer>
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000400 	.word	0x20000400
 80003f0:	200018c0 	.word	0x200018c0

080003f4 <Icons_load_treapta_2>:

void Icons_load_treapta_2() // Functia de incarcare a matricei pentru Treapta 2 de viteza
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_treapta_2, 128, 64, 1); // Muta matricea in buffer
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <Icons_load_treapta_2+0x2c>)
 80003fc:	4809      	ldr	r0, [pc, #36]	; (8000424 <Icons_load_treapta_2+0x30>)
 80003fe:	2201      	movs	r2, #1
 8000400:	9202      	str	r2, [sp, #8]
 8000402:	2240      	movs	r2, #64	; 0x40
 8000404:	9201      	str	r2, [sp, #4]
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	9200      	str	r2, [sp, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	f000 fb9d 	bl	8000b4c <st7565_drawbitmap>
	st7565_write_buffer(buffer);							   // Afiseaza pe ecran
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <Icons_load_treapta_2+0x30>)
 8000414:	0018      	movs	r0, r3
 8000416:	f000 f959 	bl	80006cc <st7565_write_buffer>
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000800 	.word	0x20000800
 8000424:	200018c0 	.word	0x200018c0

08000428 <Icons_load_treapta_3>:

void Icons_load_treapta_3() // Functia de incarcare a matricei pentru Treapta 3 de viteza
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_treapta_3, 128, 64, 1); // Muta matricea in buffer
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <Icons_load_treapta_3+0x2c>)
 8000430:	4809      	ldr	r0, [pc, #36]	; (8000458 <Icons_load_treapta_3+0x30>)
 8000432:	2201      	movs	r2, #1
 8000434:	9202      	str	r2, [sp, #8]
 8000436:	2240      	movs	r2, #64	; 0x40
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	9200      	str	r2, [sp, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	f000 fb83 	bl	8000b4c <st7565_drawbitmap>
	st7565_write_buffer(buffer);							   // Afiseaza pe ecran
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <Icons_load_treapta_3+0x30>)
 8000448:	0018      	movs	r0, r3
 800044a:	f000 f93f 	bl	80006cc <st7565_write_buffer>
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000c00 	.word	0x20000c00
 8000458:	200018c0 	.word	0x200018c0

0800045c <Icons_load_spalare_parbriz>:

void Icons_load_spalare_parbriz() // Functia de incarcare a matricei pentru Spalare Parbriz
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_spalare_parbriz, 128, 64, 1); // Muta matricea in buffer
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <Icons_load_spalare_parbriz+0x2c>)
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <Icons_load_spalare_parbriz+0x30>)
 8000466:	2201      	movs	r2, #1
 8000468:	9202      	str	r2, [sp, #8]
 800046a:	2240      	movs	r2, #64	; 0x40
 800046c:	9201      	str	r2, [sp, #4]
 800046e:	2280      	movs	r2, #128	; 0x80
 8000470:	9200      	str	r2, [sp, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	2100      	movs	r1, #0
 8000476:	f000 fb69 	bl	8000b4c <st7565_drawbitmap>
	st7565_write_buffer(buffer);									 // Afiseaza pe ecran
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <Icons_load_spalare_parbriz+0x30>)
 800047c:	0018      	movs	r0, r3
 800047e:	f000 f925 	bl	80006cc <st7565_write_buffer>
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20001000 	.word	0x20001000
 800048c:	200018c0 	.word	0x200018c0

08000490 <Icons_load_spalare_luneta>:

void Icons_load_spalare_luneta() // Functia de incarcare a matricei pentru Spalare Luneta
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af04      	add	r7, sp, #16
	st7565_drawbitmap(buffer, 0, 0, icon_spalare_luneta, 128, 64, 1); // Muta matricea in buffer
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <Icons_load_spalare_luneta+0x2c>)
 8000498:	4809      	ldr	r0, [pc, #36]	; (80004c0 <Icons_load_spalare_luneta+0x30>)
 800049a:	2201      	movs	r2, #1
 800049c:	9202      	str	r2, [sp, #8]
 800049e:	2240      	movs	r2, #64	; 0x40
 80004a0:	9201      	str	r2, [sp, #4]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	9200      	str	r2, [sp, #0]
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	f000 fb4f 	bl	8000b4c <st7565_drawbitmap>
	st7565_write_buffer(buffer);									// Afiseaza pe ecran
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <Icons_load_spalare_luneta+0x30>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 f90b 	bl	80006cc <st7565_write_buffer>
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20001400 	.word	0x20001400
 80004c0:	200018c0 	.word	0x200018c0

080004c4 <Icons_clear_screen>:

void Icons_clear_screen() // Functia pentru curatat ecranul
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	st7565_clear_buffer(buffer); // Goleste buffer
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <Icons_clear_screen+0x1c>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fac4 	bl	8000a58 <st7565_clear_buffer>
	st7565_write_buffer(buffer); // Afiseaza pe ecran buffer-ul gol (clear screen)
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <Icons_clear_screen+0x1c>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f8fa 	bl	80006cc <st7565_write_buffer>
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	200018c0 	.word	0x200018c0

080004e4 <Servo_master_function>:
							 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 2500, 2500, 2500,
							 2500, 2500};

// Master function
int Servo_master_function(int modServo, int *timer, int *abort)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	int modLucruSistem = 1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
	switch (modServo)
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2b06      	cmp	r3, #6
 80004f8:	d856      	bhi.n	80005a8 <Servo_master_function+0xc4>
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	009a      	lsls	r2, r3, #2
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <Servo_master_function+0xd0>)
 8000500:	18d3      	adds	r3, r2, r3
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	469f      	mov	pc, r3
	{
	case 0:
		TIM3->CCR4 = 500; // 0%
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <Servo_master_function+0xd4>)
 8000508:	22fa      	movs	r2, #250	; 0xfa
 800050a:	0052      	lsls	r2, r2, #1
 800050c:	641a      	str	r2, [r3, #64]	; 0x40
		modLucruSistem = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
		break;
 8000512:	e049      	b.n	80005a8 <Servo_master_function+0xc4>
	case 1: // swipe x1
		Servo_up_movement(timer, 30, abort);
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	211e      	movs	r1, #30
 800051a:	0018      	movs	r0, r3
 800051c:	f000 f876 	bl	800060c <Servo_up_movement>
		modLucruSistem = Servo_down_movement(timer, 30, abort);
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	211e      	movs	r1, #30
 8000526:	0018      	movs	r0, r3
 8000528:	f000 f8a0 	bl	800066c <Servo_down_movement>
 800052c:	0003      	movs	r3, r0
 800052e:	617b      	str	r3, [r7, #20]
		break;
 8000530:	e03a      	b.n	80005a8 <Servo_master_function+0xc4>
	case 2: // treapta 1
		Servo_up_movement(timer, 15, abort);
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	210f      	movs	r1, #15
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f867 	bl	800060c <Servo_up_movement>
		modLucruSistem = Servo_down_movement(timer, 15, abort);
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	210f      	movs	r1, #15
 8000544:	0018      	movs	r0, r3
 8000546:	f000 f891 	bl	800066c <Servo_down_movement>
 800054a:	0003      	movs	r3, r0
 800054c:	617b      	str	r3, [r7, #20]
		break;
 800054e:	e02b      	b.n	80005a8 <Servo_master_function+0xc4>
	case 3: // treapta 2
		Servo_up_movement(timer, 10, abort);
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	210a      	movs	r1, #10
 8000556:	0018      	movs	r0, r3
 8000558:	f000 f858 	bl	800060c <Servo_up_movement>
		modLucruSistem = Servo_down_movement(timer, 10, abort);
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	210a      	movs	r1, #10
 8000562:	0018      	movs	r0, r3
 8000564:	f000 f882 	bl	800066c <Servo_down_movement>
 8000568:	0003      	movs	r3, r0
 800056a:	617b      	str	r3, [r7, #20]
		break;
 800056c:	e01c      	b.n	80005a8 <Servo_master_function+0xc4>
	case 4: // treapta 3
		Servo_up_movement(timer, 5, abort);
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	2105      	movs	r1, #5
 8000574:	0018      	movs	r0, r3
 8000576:	f000 f849 	bl	800060c <Servo_up_movement>
		modLucruSistem = Servo_down_movement(timer, 5, abort);
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	2105      	movs	r1, #5
 8000580:	0018      	movs	r0, r3
 8000582:	f000 f873 	bl	800066c <Servo_down_movement>
 8000586:	0003      	movs	r3, r0
 8000588:	617b      	str	r3, [r7, #20]
		break;
 800058a:	e00d      	b.n	80005a8 <Servo_master_function+0xc4>
	case 5: // spalare parbriz
		modLucruSistem = Servo_spalare_parbriz(timer);
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f814 	bl	80005bc <Servo_spalare_parbriz>
 8000594:	0003      	movs	r3, r0
 8000596:	617b      	str	r3, [r7, #20]
		break;
 8000598:	e006      	b.n	80005a8 <Servo_master_function+0xc4>
	case 6: // spalare luneta
		modLucruSistem = Servo_spalare_luneta(timer);
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	0018      	movs	r0, r3
 800059e:	f000 f821 	bl	80005e4 <Servo_spalare_luneta>
 80005a2:	0003      	movs	r3, r0
 80005a4:	617b      	str	r3, [r7, #20]
		break;
 80005a6:	46c0      	nop			; (mov r8, r8)
	}

	return modLucruSistem;
 80005a8:	697b      	ldr	r3, [r7, #20]
}
 80005aa:	0018      	movs	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b006      	add	sp, #24
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	08007ab0 	.word	0x08007ab0
 80005b8:	40000400 	.word	0x40000400

080005bc <Servo_spalare_parbriz>:

// Functiile pentru modul de lucru al servo motorului

int Servo_spalare_parbriz(int *timer)
{ // Reseteaza timer-ul si asteapta 2s
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	*timer = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
	while (1)
	{
		if (*timer == 2000)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	23fa      	movs	r3, #250	; 0xfa
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d000      	beq.n	80005d8 <Servo_spalare_parbriz+0x1c>
 80005d6:	e7f8      	b.n	80005ca <Servo_spalare_parbriz+0xe>
			break;
 80005d8:	46c0      	nop			; (mov r8, r8)
	}
	return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	0018      	movs	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	b002      	add	sp, #8
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <Servo_spalare_luneta>:

int Servo_spalare_luneta(int *timer)
{ // Reseteaza timer-ul si asteapta 2s
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	*timer = 0;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
	while (1)
	{
		if (*timer == 2000)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	23fa      	movs	r3, #250	; 0xfa
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d000      	beq.n	8000600 <Servo_spalare_luneta+0x1c>
 80005fe:	e7f8      	b.n	80005f2 <Servo_spalare_luneta+0xe>
			break;
 8000600:	46c0      	nop			; (mov r8, r8)
	}
	return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}

0800060c <Servo_up_movement>:

int Servo_up_movement(int *timer, int timeUnit, int *abort)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
	int i = 0;	// Initializeaza un index
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
	*timer = 0; // Reseteaza timer-ul
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
	while (1)
	{
		if (*timer == timeUnit)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	429a      	cmp	r2, r3
 800062a:	d10e      	bne.n	800064a <Servo_up_movement+0x3e>
		{							   // Cand timer-ul este egal cu unitatea de timp presetata
			TIM3->CCR4 = pasiServo[i]; // se trece la urmatorul pas al servomotorului
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <Servo_up_movement+0x58>)
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	58d2      	ldr	r2, [r2, r3]
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <Servo_up_movement+0x5c>)
 8000636:	641a      	str	r2, [r3, #64]	; 0x40
			i++;					   // se incrementeaza indexul
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
			if (i >= ARRAY_SIZE)	   // se verifica daca s-a ajuns la final si se iese (in caz true)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b2f      	cmp	r3, #47	; 0x2f
 8000642:	dc08      	bgt.n	8000656 <Servo_up_movement+0x4a>
			{
				break;
			}
			*timer = 0; // Se reseteaza timer-ul si se reia
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
		}

		if (*abort) // Daca se primeste semnalul de abort se iese fortat din functie
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0e7      	beq.n	8000622 <Servo_up_movement+0x16>
		{
			return 0;
 8000652:	2300      	movs	r3, #0
 8000654:	e001      	b.n	800065a <Servo_up_movement+0x4e>
				break;
 8000656:	46c0      	nop			; (mov r8, r8)
		}
	}
	return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	0018      	movs	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	b006      	add	sp, #24
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20001800 	.word	0x20001800
 8000668:	40000400 	.word	0x40000400

0800066c <Servo_down_movement>:
int Servo_down_movement(int *timer, int timeUnit, int *abort)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
	int i = 38; // Initializeazaun index
 8000678:	2326      	movs	r3, #38	; 0x26
 800067a:	617b      	str	r3, [r7, #20]
	*timer = 0; // Reseteaza timer-ul
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
	while (1)
	{
		if (*timer == timeUnit)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	429a      	cmp	r2, r3
 800068a:	d10e      	bne.n	80006aa <Servo_down_movement+0x3e>
		{							   // Cand timer-ul este egal cu unitatea de timp presetata
			TIM3->CCR4 = pasiServo[i]; // se trece la urmatorul pas
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <Servo_down_movement+0x58>)
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	58d2      	ldr	r2, [r2, r3]
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <Servo_down_movement+0x5c>)
 8000696:	641a      	str	r2, [r3, #64]	; 0x40
			i--;					   // se decrementeaza indexul
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3b01      	subs	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
			if (i < 0)				   // se verifica daca s-a ajuns la final si se iese (in caz true)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db08      	blt.n	80006b6 <Servo_down_movement+0x4a>
			{
				break;
			}
			*timer = 0; // Se reseteaza timer-ul si se reia
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
		}

		if (*abort) // Daca se primeste semnalul de abort se iese fortat din functie
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0e7      	beq.n	8000682 <Servo_down_movement+0x16>
		{
			return 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e001      	b.n	80006ba <Servo_down_movement+0x4e>
				break;
 80006b6:	46c0      	nop			; (mov r8, r8)
		}
	}
	return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b006      	add	sp, #24
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20001800 	.word	0x20001800
 80006c8:	40000400 	.word	0x40000400

080006cc <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80006d4:	230e      	movs	r3, #14
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e060      	b.n	80007a0 <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 80006de:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <st7565_write_buffer+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fa21 	bl	8002b2c <HAL_GPIO_WritePin>
 80006ea:	230e      	movs	r3, #14
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4a31      	ldr	r2, [pc, #196]	; (80007b8 <st7565_write_buffer+0xec>)
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	2250      	movs	r2, #80	; 0x50
 80006f6:	4252      	negs	r2, r2
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 f85d 	bl	80007bc <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <st7565_write_buffer+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0018      	movs	r0, r3
 800070a:	f002 fa0f 	bl	8002b2c <HAL_GPIO_WritePin>
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f854 	bl	80007bc <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <st7565_write_buffer+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0018      	movs	r0, r3
 800071c:	f002 fa06 	bl	8002b2c <HAL_GPIO_WritePin>
 8000720:	2010      	movs	r0, #16
 8000722:	f000 f84b 	bl	80007bc <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <st7565_write_buffer+0xe8>)
 8000728:	2200      	movs	r2, #0
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0018      	movs	r0, r3
 800072e:	f002 f9fd 	bl	8002b2c <HAL_GPIO_WritePin>
 8000732:	20e0      	movs	r0, #224	; 0xe0
 8000734:	f000 f842 	bl	80007bc <st7565_sendbyte>
		DATA(0xff);
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <st7565_write_buffer+0xe8>)
 800073a:	2201      	movs	r2, #1
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0018      	movs	r0, r3
 8000740:	f002 f9f4 	bl	8002b2c <HAL_GPIO_WritePin>
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	f000 f839 	bl	80007bc <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 800074a:	230f      	movs	r3, #15
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e019      	b.n	8000788 <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <st7565_write_buffer+0xe8>)
 8000756:	2201      	movs	r2, #1
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	0018      	movs	r0, r3
 800075c:	f002 f9e6 	bl	8002b2c <HAL_GPIO_WritePin>
 8000760:	230e      	movs	r3, #14
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	01da      	lsls	r2, r3, #7
 8000768:	240f      	movs	r4, #15
 800076a:	193b      	adds	r3, r7, r4
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	18d3      	adds	r3, r2, r3
 8000770:	001a      	movs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	189b      	adds	r3, r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	0018      	movs	r0, r3
 800077a:	f000 f81f 	bl	80007bc <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 800077e:	193b      	adds	r3, r7, r4
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	193b      	adds	r3, r7, r4
 8000784:	3201      	adds	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	dadf      	bge.n	8000754 <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 8000794:	210e      	movs	r1, #14
 8000796:	187b      	adds	r3, r7, r1
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	187b      	adds	r3, r7, r1
 800079c:	3201      	adds	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	230e      	movs	r3, #14
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	d999      	bls.n	80006de <st7565_write_buffer+0x12>
		}
	}
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b005      	add	sp, #20
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	48000800 	.word	0x48000800
 80007b8:	20001cc0 	.word	0x20001cc0

080007bc <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 80007c8:	1df9      	adds	r1, r7, #7
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <st7565_sendbyte+0x20>)
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2201      	movs	r2, #1
 80007d0:	f003 f882 	bl	80038d8 <HAL_SPI_Transmit>
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20001de8 	.word	0x20001de8

080007e0 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	0059      	lsls	r1, r3, #1
 80007e8:	2390      	movs	r3, #144	; 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2201      	movs	r2, #1
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 f99c 	bl	8002b2c <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 80007f4:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <st7565_init+0x150>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 f996 	bl	8002b2c <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	0099      	lsls	r1, r3, #2
 8000804:	2390      	movs	r3, #144	; 0x90
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	2201      	movs	r2, #1
 800080a:	0018      	movs	r0, r3
 800080c:	f002 f98e 	bl	8002b2c <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8000810:	4b48      	ldr	r3, [pc, #288]	; (8000934 <st7565_init+0x154>)
 8000812:	2201      	movs	r2, #1
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	0018      	movs	r0, r3
 8000818:	f002 f988 	bl	8002b2c <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 800081c:	4b45      	ldr	r3, [pc, #276]	; (8000934 <st7565_init+0x154>)
 800081e:	2200      	movs	r2, #0
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	0018      	movs	r0, r3
 8000824:	f002 f982 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	0099      	lsls	r1, r3, #2
 800082c:	2390      	movs	r3, #144	; 0x90
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2200      	movs	r2, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f002 f97a 	bl	8002b2c <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8000838:	23fa      	movs	r3, #250	; 0xfa
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	0018      	movs	r0, r3
 800083e:	f001 f955 	bl	8001aec <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	0099      	lsls	r1, r3, #2
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2201      	movs	r2, #1
 800084c:	0018      	movs	r0, r3
 800084e:	f002 f96d 	bl	8002b2c <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <st7565_init+0x150>)
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0018      	movs	r0, r3
 800085a:	f002 f967 	bl	8002b2c <HAL_GPIO_WritePin>
 800085e:	20a3      	movs	r0, #163	; 0xa3
 8000860:	f7ff ffac 	bl	80007bc <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <st7565_init+0x150>)
 8000866:	2200      	movs	r2, #0
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0018      	movs	r0, r3
 800086c:	f002 f95e 	bl	8002b2c <HAL_GPIO_WritePin>
 8000870:	20a0      	movs	r0, #160	; 0xa0
 8000872:	f7ff ffa3 	bl	80007bc <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <st7565_init+0x150>)
 8000878:	2200      	movs	r2, #0
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0018      	movs	r0, r3
 800087e:	f002 f955 	bl	8002b2c <HAL_GPIO_WritePin>
 8000882:	20c0      	movs	r0, #192	; 0xc0
 8000884:	f7ff ff9a 	bl	80007bc <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <st7565_init+0x150>)
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0018      	movs	r0, r3
 8000890:	f002 f94c 	bl	8002b2c <HAL_GPIO_WritePin>
 8000894:	2040      	movs	r0, #64	; 0x40
 8000896:	f7ff ff91 	bl	80007bc <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <st7565_init+0x150>)
 800089c:	2200      	movs	r2, #0
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 f943 	bl	8002b2c <HAL_GPIO_WritePin>
 80008a6:	202c      	movs	r0, #44	; 0x2c
 80008a8:	f7ff ff88 	bl	80007bc <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 80008ac:	2032      	movs	r0, #50	; 0x32
 80008ae:	f001 f91d 	bl	8001aec <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <st7565_init+0x150>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 f937 	bl	8002b2c <HAL_GPIO_WritePin>
 80008be:	202e      	movs	r0, #46	; 0x2e
 80008c0:	f7ff ff7c 	bl	80007bc <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 80008c4:	2032      	movs	r0, #50	; 0x32
 80008c6:	f001 f911 	bl	8001aec <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <st7565_init+0x150>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 f92b 	bl	8002b2c <HAL_GPIO_WritePin>
 80008d6:	202f      	movs	r0, #47	; 0x2f
 80008d8:	f7ff ff70 	bl	80007bc <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 80008dc:	200a      	movs	r0, #10
 80008de:	f001 f905 	bl	8001aec <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <st7565_init+0x150>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 f91f 	bl	8002b2c <HAL_GPIO_WritePin>
 80008ee:	2026      	movs	r0, #38	; 0x26
 80008f0:	f7ff ff64 	bl	80007bc <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <st7565_init+0x150>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 f916 	bl	8002b2c <HAL_GPIO_WritePin>
 8000900:	20af      	movs	r0, #175	; 0xaf
 8000902:	f7ff ff5b 	bl	80007bc <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <st7565_init+0x150>)
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	0018      	movs	r0, r3
 800090e:	f002 f90d 	bl	8002b2c <HAL_GPIO_WritePin>
 8000912:	20a4      	movs	r0, #164	; 0xa4
 8000914:	f7ff ff52 	bl	80007bc <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f81d 	bl	8000958 <st7565_set_brightness>
 	st7565_clear_screen();
 800091e:	f000 f83f 	bl	80009a0 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <st7565_init+0x158>)
 8000924:	0018      	movs	r0, r3
 8000926:	f000 f897 	bl	8000a58 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	48000800 	.word	0x48000800
 8000934:	48000400 	.word	0x48000400
 8000938:	200018c0 	.word	0x200018c0

0800093c <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	0059      	lsls	r1, r3, #1
 8000944:	2390      	movs	r3, #144	; 0x90
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	2201      	movs	r2, #1
 800094a:	0018      	movs	r0, r3
 800094c:	f002 f8ee 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <st7565_set_brightness>:
void st7565_backlight_disable(void) {
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
}

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	0002      	movs	r2, r0
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <st7565_set_brightness+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0018      	movs	r0, r3
 800096c:	f002 f8de 	bl	8002b2c <HAL_GPIO_WritePin>
 8000970:	2081      	movs	r0, #129	; 0x81
 8000972:	f7ff ff23 	bl	80007bc <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <st7565_set_brightness+0x44>)
 8000978:	2200      	movs	r2, #0
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0018      	movs	r0, r3
 800097e:	f002 f8d5 	bl	8002b2c <HAL_GPIO_WritePin>
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	223f      	movs	r2, #63	; 0x3f
 8000988:	4013      	ands	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ff15 	bl	80007bc <st7565_sendbyte>
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	48000800 	.word	0x48000800

080009a0 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	e049      	b.n	8000a42 <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <st7565_clear_screen+0xb4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 f8b9 	bl	8002b2c <HAL_GPIO_WritePin>
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2250      	movs	r2, #80	; 0x50
 80009c0:	4252      	negs	r2, r2
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	0018      	movs	r0, r3
 80009c8:	f7ff fef8 	bl	80007bc <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e02d      	b.n	8000a30 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <st7565_clear_screen+0xb4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0018      	movs	r0, r3
 80009dc:	f002 f8a6 	bl	8002b2c <HAL_GPIO_WritePin>
 80009e0:	1dbb      	adds	r3, r7, #6
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	220f      	movs	r2, #15
 80009e6:	4013      	ands	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fee6 	bl	80007bc <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <st7565_clear_screen+0xb4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 f898 	bl	8002b2c <HAL_GPIO_WritePin>
 80009fc:	1dbb      	adds	r3, r7, #6
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	091b      	lsrs	r3, r3, #4
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	2210      	movs	r2, #16
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fed4 	bl	80007bc <st7565_sendbyte>
			DATA(0x0);
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <st7565_clear_screen+0xb4>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 f886 	bl	8002b2c <HAL_GPIO_WritePin>
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fecb 	bl	80007bc <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	3201      	adds	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	1dbb      	adds	r3, r7, #6
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b80      	cmp	r3, #128	; 0x80
 8000a36:	d9cd      	bls.n	80009d4 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	3201      	adds	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d9b1      	bls.n	80009ae <st7565_clear_screen+0xe>
		}
	}
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	48000800 	.word	0x48000800

08000a58 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	00da      	lsls	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2100      	movs	r1, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f006 ff06 	bl	800787a <memset>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8000a76:	b590      	push	{r4, r7, lr}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0010      	movs	r0, r2
 8000a82:	0019      	movs	r1, r3
 8000a84:	1cfb      	adds	r3, r7, #3
 8000a86:	1c22      	adds	r2, r4, #0
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	1cbb      	adds	r3, r7, #2
 8000a8c:	1c02      	adds	r2, r0, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	1c7b      	adds	r3, r7, #1
 8000a92:	1c0a      	adds	r2, r1, #0
 8000a94:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8000a96:	1cfb      	adds	r3, r7, #3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db51      	blt.n	8000b44 <st7565_setpixel+0xce>
 8000aa0:	1cbb      	adds	r3, r7, #2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa6:	d84d      	bhi.n	8000b44 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 8000aa8:	1c7b      	adds	r3, r7, #1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d023      	beq.n	8000af8 <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8000ab0:	1cfb      	adds	r3, r7, #3
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	1cbb      	adds	r3, r7, #2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	08db      	lsrs	r3, r3, #3
 8000aba:	b2d8      	uxtb	r0, r3
 8000abc:	0003      	movs	r3, r0
 8000abe:	01db      	lsls	r3, r3, #7
 8000ac0:	18d3      	adds	r3, r2, r3
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	189b      	adds	r3, r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25a      	sxtb	r2, r3
 8000acc:	1cbb      	adds	r3, r7, #2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	400b      	ands	r3, r1
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4099      	lsls	r1, r3
 8000ada:	000b      	movs	r3, r1
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b259      	sxtb	r1, r3
 8000ae2:	1cfb      	adds	r3, r7, #3
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	01db      	lsls	r3, r3, #7
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	001a      	movs	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	189b      	adds	r3, r3, r2
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e026      	b.n	8000b46 <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8000af8:	1cfb      	adds	r3, r7, #3
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	1cbb      	adds	r3, r7, #2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	b2d8      	uxtb	r0, r3
 8000b04:	0003      	movs	r3, r0
 8000b06:	01db      	lsls	r3, r3, #7
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	189b      	adds	r3, r3, r2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	1cba      	adds	r2, r7, #2
 8000b16:	7812      	ldrb	r2, [r2, #0]
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	2107      	movs	r1, #7
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4091      	lsls	r1, r2
 8000b22:	000a      	movs	r2, r1
 8000b24:	b252      	sxtb	r2, r2
 8000b26:	43d2      	mvns	r2, r2
 8000b28:	b252      	sxtb	r2, r2
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	b259      	sxtb	r1, r3
 8000b2e:	1cfb      	adds	r3, r7, #3
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	0003      	movs	r3, r0
 8000b34:	01db      	lsls	r3, r3, #7
 8000b36:	18d3      	adds	r3, r2, r3
 8000b38:	001a      	movs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	189b      	adds	r3, r3, r2
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e000      	b.n	8000b46 <st7565_setpixel+0xd0>
		return;
 8000b44:	46c0      	nop			; (mov r8, r8)
}
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b003      	add	sp, #12
 8000b4a:	bd90      	pop	{r4, r7, pc}

08000b4c <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	0008      	movs	r0, r1
 8000b56:	0011      	movs	r1, r2
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	230b      	movs	r3, #11
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	1c02      	adds	r2, r0, #0
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	230a      	movs	r3, #10
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	1c0a      	adds	r2, r1, #0
 8000b68:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 8000b6a:	2317      	movs	r3, #23
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e04c      	b.n	8000c0e <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 8000b74:	2316      	movs	r3, #22
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e037      	b.n	8000bee <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 8000b7e:	2416      	movs	r4, #22
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	2017      	movs	r0, #23
 8000b86:	183b      	adds	r3, r7, r0
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	0019      	movs	r1, r3
 8000b90:	2320      	movs	r3, #32
 8000b92:	2508      	movs	r5, #8
 8000b94:	195b      	adds	r3, r3, r5
 8000b96:	19db      	adds	r3, r3, r7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	434b      	muls	r3, r1
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	18d3      	adds	r3, r2, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	183b      	adds	r3, r7, r0
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2207      	movs	r2, #7
 8000bac:	4013      	ands	r3, r2
 8000bae:	4119      	asrs	r1, r3
 8000bb0:	000b      	movs	r3, r1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d014      	beq.n	8000be2 <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 8000bb8:	230b      	movs	r3, #11
 8000bba:	18fa      	adds	r2, r7, r3
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	18d3      	adds	r3, r2, r3
 8000bc4:	b2d9      	uxtb	r1, r3
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	18fa      	adds	r2, r7, r3
 8000bca:	183b      	adds	r3, r7, r0
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	2328      	movs	r3, #40	; 0x28
 8000bd6:	195b      	adds	r3, r3, r5
 8000bd8:	19db      	adds	r3, r3, r7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff ff4a 	bl	8000a76 <st7565_setpixel>
		for (i = 0; i < w; i++) {
 8000be2:	2116      	movs	r1, #22
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	3201      	adds	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	2316      	movs	r3, #22
 8000bf0:	18fa      	adds	r2, r7, r3
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	185b      	adds	r3, r3, r1
 8000bf8:	19db      	adds	r3, r3, r7
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d3bd      	bcc.n	8000b7e <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 8000c02:	2117      	movs	r1, #23
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	3201      	adds	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	2317      	movs	r3, #23
 8000c10:	18fa      	adds	r2, r7, r3
 8000c12:	2324      	movs	r3, #36	; 0x24
 8000c14:	2108      	movs	r1, #8
 8000c16:	185b      	adds	r3, r3, r1
 8000c18:	19db      	adds	r3, r3, r7
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d3a8      	bcc.n	8000b74 <st7565_drawbitmap+0x28>
			}
		}
	}
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b006      	add	sp, #24
 8000c2a:	bdb0      	pop	{r4, r5, r7, pc}

08000c2c <is_system_initialized>:
int timer = 0;				// Timer incrementat in Task-ul TimerUp pentru diferitele moduri de lucru cu servomotorul
int timer_trepte = 0;		// Timer incrementat in Task-ul TimerUp pentru blocarea/stoparea incrementarii/decrementarii accidentale a treptelor de viteza
int abort_signal = 0;		// Semanl de abort folosit pentru oprirea fortata a modurilor de lucru

void is_system_initialized() // Functie care verifica daca sistemul s-a initializat (prin verificarea daca adc-ul a citit sau nu valori)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	if (instant_ADC_Values[0] > 1900 && instant_ADC_Values[1] > 1900 && instant_ADC_Values[2] > 1900) // Daca ADC a putut citii valori de la Joystick
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <is_system_initialized+0x30>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <is_system_initialized+0x34>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d90c      	bls.n	8000c54 <is_system_initialized+0x28>
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <is_system_initialized+0x30>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <is_system_initialized+0x34>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d907      	bls.n	8000c54 <is_system_initialized+0x28>
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <is_system_initialized+0x30>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <is_system_initialized+0x34>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d902      	bls.n	8000c54 <is_system_initialized+0x28>
		sistem_initializat = 1;																		  // sistemul se considera initializat si se poate incepe functionarea normala
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <is_system_initialized+0x38>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20001f70 	.word	0x20001f70
 8000c60:	0000076c 	.word	0x0000076c
 8000c64:	20001f80 	.word	0x20001f80

08000c68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c6c:	f000 feda 	bl	8001a24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c70:	f000 f84e 	bl	8000d10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c74:	f000 fa3a 	bl	80010ec <MX_GPIO_Init>
	MX_DMA_Init();
 8000c78:	f000 fa12 	bl	80010a0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000c7c:	f000 f9e0 	bl	8001040 <MX_USART2_UART_Init>
	MX_ADC_Init();
 8000c80:	f000 f8ac 	bl	8000ddc <MX_ADC_Init>
	MX_TIM3_Init();
 8000c84:	f000 f95c 	bl	8000f40 <MX_TIM3_Init>
	MX_SPI1_Init();
 8000c88:	f000 f91c 	bl	8000ec4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000c8c:	f004 fb80 	bl	8005390 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Servo */
	ServoHandle = osThreadNew(Task_Servo, NULL, &Servo_attributes);
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <main+0x78>)
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <main+0x7c>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f004 fbd4 	bl	8005444 <osThreadNew>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <main+0x80>)
 8000ca0:	601a      	str	r2, [r3, #0]

	/* creation of Joystick */
	JoystickHandle = osThreadNew(Task_Joystick, NULL, &Joystick_attributes);
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <main+0x84>)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <main+0x88>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f004 fbcb 	bl	8005444 <osThreadNew>
 8000cae:	0002      	movs	r2, r0
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <main+0x8c>)
 8000cb2:	601a      	str	r2, [r3, #0]

	/* creation of LCD */
	LCDHandle = osThreadNew(Task_LCD, NULL, &LCD_attributes);
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <main+0x90>)
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <main+0x94>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f004 fbc2 	bl	8005444 <osThreadNew>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <main+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]

	/* creation of Counter */
	CounterHandle = osThreadNew(Task_CounterUp, NULL, &Counter_attributes);
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <main+0x9c>)
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <main+0xa0>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f004 fbb9 	bl	8005444 <osThreadNew>
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <main+0xa4>)
 8000cd6:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000cd8:	f004 fb86 	bl	80053e8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0x74>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	08007acc 	.word	0x08007acc
 8000ce4:	080012a1 	.word	0x080012a1
 8000ce8:	20001f5c 	.word	0x20001f5c
 8000cec:	08007af0 	.word	0x08007af0
 8000cf0:	080013a9 	.word	0x080013a9
 8000cf4:	20001f60 	.word	0x20001f60
 8000cf8:	08007b14 	.word	0x08007b14
 8000cfc:	080014f1 	.word	0x080014f1
 8000d00:	20001f64 	.word	0x20001f64
 8000d04:	08007b38 	.word	0x08007b38
 8000d08:	08001561 	.word	0x08001561
 8000d0c:	20001f68 	.word	0x20001f68

08000d10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b099      	sub	sp, #100	; 0x64
 8000d14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	242c      	movs	r4, #44	; 0x2c
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2334      	movs	r3, #52	; 0x34
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f006 fdaa 	bl	800787a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d26:	231c      	movs	r3, #28
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f006 fda2 	bl	800787a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d36:	003b      	movs	r3, r7
 8000d38:	0018      	movs	r0, r3
 8000d3a:	231c      	movs	r3, #28
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f006 fd9b 	bl	800787a <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14 | RCC_OSCILLATORTYPE_HSE;
 8000d44:	0021      	movs	r1, r4
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2211      	movs	r2, #17
 8000d4a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2201      	movs	r2, #1
 8000d50:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2201      	movs	r2, #1
 8000d56:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2202      	movs	r2, #2
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	0252      	lsls	r2, r2, #9
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	22a0      	movs	r2, #160	; 0xa0
 8000d70:	0392      	lsls	r2, r2, #14
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2201      	movs	r2, #1
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fef3 	bl	8002b68 <HAL_RCC_OscConfig>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x7a>
	{
		Error_Handler();
 8000d86:	f000 fc01 	bl	800158c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000d8a:	211c      	movs	r1, #28
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2207      	movs	r2, #7
 8000d90:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2202      	movs	r2, #2
 8000d96:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2101      	movs	r1, #1
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fa63 	bl	8003274 <HAL_RCC_ClockConfig>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000db2:	f000 fbeb 	bl	800158c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db6:	003b      	movs	r3, r7
 8000db8:	2202      	movs	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dbc:	003b      	movs	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 fbcf 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000dce:	f000 fbdd 	bl	800158c <Error_Handler>
	}
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b019      	add	sp, #100	; 0x64
 8000dd8:	bd90      	pop	{r4, r7, pc}
	...

08000ddc <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	0018      	movs	r0, r3
 8000de6:	230c      	movs	r3, #12
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f006 fd45 	bl	800787a <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000df0:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000df2:	4a33      	ldr	r2, [pc, #204]	; (8000ec0 <MX_ADC_Init+0xe4>)
 8000df4:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e2e:	22c2      	movs	r2, #194	; 0xc2
 8000e30:	32ff      	adds	r2, #255	; 0xff
 8000e32:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = ENABLE;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e3c:	2224      	movs	r2, #36	; 0x24
 8000e3e:	2101      	movs	r1, #1
 8000e40:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fe72 	bl	8001b34 <HAL_ADC_Init>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC_Init+0x7c>
	{
		Error_Handler();
 8000e54:	f000 fb9a 	bl	800158c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0152      	lsls	r2, r2, #5
 8000e64:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2207      	movs	r2, #7
 8000e6a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e6c:	1d3a      	adds	r2, r7, #4
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 f838 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC_Init+0xa4>
	{
		Error_Handler();
 8000e7c:	f000 fb86 	bl	800158c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	220d      	movs	r2, #13
 8000e84:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e86:	1d3a      	adds	r2, r7, #4
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 f82b 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC_Init+0xbe>
	{
		Error_Handler();
 8000e96:	f000 fb79 	bl	800158c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	220e      	movs	r2, #14
 8000e9e:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ea0:	1d3a      	adds	r2, r7, #4
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_ADC_Init+0xe0>)
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 f81e 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC_Init+0xd8>
	{
		Error_Handler();
 8000eb0:	f000 fb6c 	bl	800158c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b004      	add	sp, #16
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20001d64 	.word	0x20001d64
 8000ec0:	40012400 	.word	0x40012400

08000ec4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <MX_SPI1_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ed0:	2282      	movs	r2, #130	; 0x82
 8000ed2:	0052      	lsls	r2, r2, #1
 8000ed4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ede:	22e0      	movs	r2, #224	; 0xe0
 8000ee0:	00d2      	lsls	r2, r2, #3
 8000ee2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000efa:	2230      	movs	r2, #48	; 0x30
 8000efc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f1e:	2208      	movs	r2, #8
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <MX_SPI1_Init+0x74>)
 8000f24:	0018      	movs	r0, r3
 8000f26:	f002 fc1f 	bl	8003768 <HAL_SPI_Init>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000f2e:	f000 fb2d 	bl	800158c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20001de8 	.word	0x20001de8
 8000f3c:	40013000 	.word	0x40013000

08000f40 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	2328      	movs	r3, #40	; 0x28
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	001a      	movs	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	f006 fc92 	bl	800787a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f56:	2320      	movs	r3, #32
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	001a      	movs	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	f006 fc8a 	bl	800787a <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	231c      	movs	r3, #28
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f006 fc83 	bl	800787a <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f76:	4a30      	ldr	r2, [pc, #192]	; (8001038 <MX_TIM3_Init+0xf8>)
 8000f78:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 48 - 1;
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f7c:	222f      	movs	r2, #47	; 0x2f
 8000f7e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20000 - 1;
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f88:	4a2c      	ldr	r2, [pc, #176]	; (800103c <MX_TIM3_Init+0xfc>)
 8000f8a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f002 ff6a 	bl	8003e74 <HAL_TIM_Base_Init>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8000fa4:	f000 faf2 	bl	800158c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	2128      	movs	r1, #40	; 0x28
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0152      	lsls	r2, r2, #5
 8000fb0:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f003 f981 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 8000fc2:	f000 fae3 	bl	800158c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f002 ffa3 	bl	8003f14 <HAL_TIM_PWM_Init>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 8000fd2:	f000 fadb 	bl	800158c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fe4:	187a      	adds	r2, r7, r1
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f003 fd76 	bl	8004adc <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0xb8>
	{
		Error_Handler();
 8000ff4:	f000 faca 	bl	800158c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2260      	movs	r2, #96	; 0x60
 8000ffc:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001010:	1d39      	adds	r1, r7, #4
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_TIM3_Init+0xf4>)
 8001014:	220c      	movs	r2, #12
 8001016:	0018      	movs	r0, r3
 8001018:	f003 f88c 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0xe4>
	{
		Error_Handler();
 8001020:	f000 fab4 	bl	800158c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <MX_TIM3_Init+0xf4>)
 8001026:	0018      	movs	r0, r3
 8001028:	f000 fc14 	bl	8001854 <HAL_TIM_MspPostInit>
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b00e      	add	sp, #56	; 0x38
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20001e4c 	.word	0x20001e4c
 8001038:	40000400 	.word	0x40000400
 800103c:	00004e1f 	.word	0x00004e1f

08001040 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <MX_USART2_UART_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800104c:	22e1      	movs	r2, #225	; 0xe1
 800104e:	0252      	lsls	r2, r2, #9
 8001050:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <MX_USART2_UART_Init+0x58>)
 8001084:	0018      	movs	r0, r3
 8001086:	f003 fd87 	bl	8004b98 <HAL_UART_Init>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800108e:	f000 fa7d 	bl	800158c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20001ed8 	.word	0x20001ed8
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_DMA_Init+0x48>)
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_DMA_Init+0x48>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	430a      	orrs	r2, r1
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_DMA_Init+0x48>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4013      	ands	r3, r2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Ch1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2103      	movs	r1, #3
 80010c2:	2009      	movs	r0, #9
 80010c4:	f001 f9d2 	bl	800246c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80010c8:	2009      	movs	r0, #9
 80010ca:	f001 f9e4 	bl	8002496 <HAL_NVIC_EnableIRQ>
	/* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2103      	movs	r1, #3
 80010d2:	200a      	movs	r0, #10
 80010d4:	f001 f9ca 	bl	800246c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80010d8:	200a      	movs	r0, #10
 80010da:	f001 f9dc 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40021000 	.word	0x40021000

080010ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b08b      	sub	sp, #44	; 0x2c
 80010f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	2414      	movs	r4, #20
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	0018      	movs	r0, r3
 80010f8:	2314      	movs	r3, #20
 80010fa:	001a      	movs	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	f006 fbbc 	bl	800787a <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b45      	ldr	r3, [pc, #276]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	4b44      	ldr	r3, [pc, #272]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0309      	lsls	r1, r1, #12
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	4b41      	ldr	r3, [pc, #260]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	031b      	lsls	r3, r3, #12
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800111e:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	03c9      	lsls	r1, r1, #15
 8001128:	430a      	orrs	r2, r1
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <MX_GPIO_Init+0x12c>)
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	03db      	lsls	r3, r3, #15
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <MX_GPIO_Init+0x12c>)
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0289      	lsls	r1, r1, #10
 8001144:	430a      	orrs	r2, r1
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <MX_GPIO_Init+0x12c>)
 800114a:	695a      	ldr	r2, [r3, #20]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <MX_GPIO_Init+0x12c>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	02c9      	lsls	r1, r1, #11
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	02db      	lsls	r3, r3, #11
 800116c:	4013      	ands	r3, r2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <MX_GPIO_Init+0x130>)
 8001174:	2201      	movs	r2, #1
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	0018      	movs	r0, r3
 800117a:	f001 fcd7 	bl	8002b2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BL_Pin | SPIRST_Pin, GPIO_PIN_RESET);
 800117e:	23c0      	movs	r3, #192	; 0xc0
 8001180:	0099      	lsls	r1, r3, #2
 8001182:	2390      	movs	r3, #144	; 0x90
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	2200      	movs	r2, #0
 8001188:	0018      	movs	r0, r3
 800118a:	f001 fccf 	bl	8002b2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_GPIO_Init+0x134>)
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	0018      	movs	r0, r3
 8001196:	f001 fcc9 	bl	8002b2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPICD_Pin */
	GPIO_InitStruct.Pin = SPICD_Pin;
 800119a:	193b      	adds	r3, r7, r4
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2201      	movs	r2, #1
 80011a4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <MX_GPIO_Init+0x130>)
 80011b6:	0019      	movs	r1, r3
 80011b8:	0010      	movs	r0, r2
 80011ba:	f001 fb3f 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pins : BL_Pin SPIRST_Pin */
	GPIO_InitStruct.Pin = BL_Pin | SPIRST_Pin;
 80011be:	0021      	movs	r1, r4
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	22c0      	movs	r2, #192	; 0xc0
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	000c      	movs	r4, r1
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	2201      	movs	r2, #1
 80011ce:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	193a      	adds	r2, r7, r4
 80011de:	2390      	movs	r3, #144	; 0x90
 80011e0:	05db      	lsls	r3, r3, #23
 80011e2:	0011      	movs	r1, r2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 fb29 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPICS_Pin */
	GPIO_InitStruct.Pin = SPICS_Pin;
 80011ea:	0021      	movs	r1, r4
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2240      	movs	r2, #64	; 0x40
 80011f0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2201      	movs	r2, #1
 80011f6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8001204:	187b      	adds	r3, r7, r1
 8001206:	4a06      	ldr	r2, [pc, #24]	; (8001220 <MX_GPIO_Init+0x134>)
 8001208:	0019      	movs	r1, r3
 800120a:	0010      	movs	r0, r2
 800120c:	f001 fb16 	bl	800283c <HAL_GPIO_Init>
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b00b      	add	sp, #44	; 0x2c
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	48000800 	.word	0x48000800
 8001220:	48000400 	.word	0x48000400

08001224 <lucru_in_trepte.0>:
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)

	// Functie auxiliara pentru modul de lucru in trepte de viteza
	// Este apelata din interiorul for(;;) pe case-urile 2 si 3 ale switch-ului
	void lucru_in_trepte()
	{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4663      	mov	r3, ip
 800122c:	607b      	str	r3, [r7, #4]
		switch (treapta_curenta)
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <lucru_in_trepte.0+0x6c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d021      	beq.n	800127a <lucru_in_trepte.0+0x56>
 8001236:	d827      	bhi.n	8001288 <lucru_in_trepte.0+0x64>
 8001238:	2b02      	cmp	r3, #2
 800123a:	d017      	beq.n	800126c <lucru_in_trepte.0+0x48>
 800123c:	d824      	bhi.n	8001288 <lucru_in_trepte.0+0x64>
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <lucru_in_trepte.0+0x24>
 8001242:	2b01      	cmp	r3, #1
 8001244:	d00b      	beq.n	800125e <lucru_in_trepte.0+0x3a>
			break;
		case 3:											   // Case 3: se intra atunci cand se ajunge la treapta 3 de viteza
			Servo_master_function(4, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() modul de lucru (4, treapta 3), pointerul catre timer si pointerul catre semnalul de abort
			break;
		}
	}
 8001246:	e01f      	b.n	8001288 <lucru_in_trepte.0+0x64>
			mod_lucru_sistem = Servo_master_function(0, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() modul de lucru (0, oprire), pointerul catre timer si pointerul catre semnalul de abort
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <lucru_in_trepte.0+0x70>)
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <lucru_in_trepte.0+0x74>)
 800124c:	0019      	movs	r1, r3
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff f948 	bl	80004e4 <Servo_master_function>
 8001254:	0003      	movs	r3, r0
 8001256:	001a      	movs	r2, r3
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <lucru_in_trepte.0+0x78>)
 800125a:	601a      	str	r2, [r3, #0]
			break;
 800125c:	e014      	b.n	8001288 <lucru_in_trepte.0+0x64>
			Servo_master_function(2, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() modul de lucru (2, treapta 1), pointerul catre timer si pointerul catre semnalul de abort
 800125e:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <lucru_in_trepte.0+0x70>)
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <lucru_in_trepte.0+0x74>)
 8001262:	0019      	movs	r1, r3
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff f93d 	bl	80004e4 <Servo_master_function>
			break;
 800126a:	e00d      	b.n	8001288 <lucru_in_trepte.0+0x64>
			Servo_master_function(3, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() modul de lucru (3, treapta 2), pointerul catre timer si pointerul catre semnalul de abort
 800126c:	4a09      	ldr	r2, [pc, #36]	; (8001294 <lucru_in_trepte.0+0x70>)
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <lucru_in_trepte.0+0x74>)
 8001270:	0019      	movs	r1, r3
 8001272:	2003      	movs	r0, #3
 8001274:	f7ff f936 	bl	80004e4 <Servo_master_function>
			break;
 8001278:	e006      	b.n	8001288 <lucru_in_trepte.0+0x64>
			Servo_master_function(4, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() modul de lucru (4, treapta 3), pointerul catre timer si pointerul catre semnalul de abort
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <lucru_in_trepte.0+0x70>)
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <lucru_in_trepte.0+0x74>)
 800127e:	0019      	movs	r1, r3
 8001280:	2004      	movs	r0, #4
 8001282:	f7ff f92f 	bl	80004e4 <Servo_master_function>
			break;
 8001286:	46c0      	nop			; (mov r8, r8)
	}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20001f6c 	.word	0x20001f6c
 8001294:	20001f8c 	.word	0x20001f8c
 8001298:	20001f84 	.word	0x20001f84
 800129c:	20001f7c 	.word	0x20001f7c

080012a0 <Task_Servo>:
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
void Task_Servo(void *argument)
 80012a8:	2318      	movs	r3, #24
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Porneste PWM pe timer 3 canal 4 (pin PB1)
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <Task_Servo+0xe8>)
 80012b0:	210c      	movs	r1, #12
 80012b2:	0018      	movs	r0, r3
 80012b4:	f002 fe86 	bl	8003fc4 <HAL_TIM_PWM_Start>

	for (;;)
	{
		timer_trepte = 0; // reseteaza de fiecare data timer_trepte
 80012b8:	4b34      	ldr	r3, [pc, #208]	; (800138c <Task_Servo+0xec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

		switch (mod_lucru_sistem) // Primeste de la Task-ul de Read_Joystick modul de lucru (mod_lucru_sistem)
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <Task_Servo+0xf0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d85b      	bhi.n	800137e <Task_Servo+0xde>
 80012c6:	009a      	lsls	r2, r3, #2
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <Task_Servo+0xf4>)
 80012ca:	18d3      	adds	r3, r2, r3
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	469f      	mov	pc, r3
		{
		case 0:											   // Case 0: modul idle sau reset. Servo motorul este adus si sta in pozitia 0
			Servo_master_function(0, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() modul de lucru (0, oprire), pointerul catre timer si pointerul catre semnalul de abort
 80012d0:	4a31      	ldr	r2, [pc, #196]	; (8001398 <Task_Servo+0xf8>)
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <Task_Servo+0xfc>)
 80012d4:	0019      	movs	r1, r3
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff f904 	bl	80004e4 <Servo_master_function>
			abort_signal = 0;							   // In cazul in care a fost folosit semnalul abort, acesta se readuce la 0 pentru a se putea continua functionarea normala a sistemului
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <Task_Servo+0xf8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
			break;
 80012e2:	e04c      	b.n	800137e <Task_Servo+0xde>
		case 1:																  // Case 1: wipe x1
			mod_lucru_sistem = Servo_master_function(1, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() modul de lucru (1, wipe x1), pointerul catre timer si pointerul catre semnalul de abort
 80012e4:	4a2c      	ldr	r2, [pc, #176]	; (8001398 <Task_Servo+0xf8>)
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <Task_Servo+0xfc>)
 80012e8:	0019      	movs	r1, r3
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff f8fa 	bl	80004e4 <Servo_master_function>
 80012f0:	0003      	movs	r3, r0
 80012f2:	001a      	movs	r2, r3
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <Task_Servo+0xf0>)
 80012f6:	601a      	str	r2, [r3, #0]
			break;
 80012f8:	e041      	b.n	800137e <Task_Servo+0xde>
		case 2:												 // Case 2: lucru pe trepte de viteza, modul de incrementare a treptei de viteza
			if (treapta_curenta < 3 && schimba_treapta == 1) // Se verifica daca este necesara incrementarea treptei de viteza (pana la treapta_curenta = 3) folosind semnalul schimba_treapta primit de la task-ul Read_Joystick
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <Task_Servo+0x100>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d80b      	bhi.n	800131a <Task_Servo+0x7a>
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <Task_Servo+0x104>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <Task_Servo+0x7a>
			{
				treapta_curenta++;	 // Se incrementeaza treapta
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <Task_Servo+0x100>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <Task_Servo+0x100>)
 8001312:	601a      	str	r2, [r3, #0]
				schimba_treapta = 0; // Se reseteaza semnalul de schimba_treapta
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <Task_Servo+0x104>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
			}
			lucru_in_trepte(); // Se foloseste functia de lucru_in_trepte()
 800131a:	230c      	movs	r3, #12
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	469c      	mov	ip, r3
 8001320:	f7ff ff80 	bl	8001224 <lucru_in_trepte.0>

			break;
 8001324:	e02b      	b.n	800137e <Task_Servo+0xde>
		case 3:												 // Case 3: lucru in trepte de viteza, modul de decrementare a treptei de viteza
			if (treapta_curenta > 0 && schimba_treapta == 1) // Se verifica daca este necesara decrementarea treptei de viteza (pana la treapta_curenta = 0) folosind semnalul schimba_treapta primit de la task-ul de Read_Joystick
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <Task_Servo+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <Task_Servo+0xa6>
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <Task_Servo+0x104>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <Task_Servo+0xa6>
			{
				treapta_curenta--;	 // Se decrementeaza treapta
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <Task_Servo+0x100>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <Task_Servo+0x100>)
 800133e:	601a      	str	r2, [r3, #0]
				schimba_treapta = 0; // Se reseteaza semnalul de schimba_treapta
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <Task_Servo+0x104>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
			}
			lucru_in_trepte(); // Se foloseste functia de lucru_in_trepte()
 8001346:	230c      	movs	r3, #12
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	469c      	mov	ip, r3
 800134c:	f7ff ff6a 	bl	8001224 <lucru_in_trepte.0>
			break;
 8001350:	e015      	b.n	800137e <Task_Servo+0xde>
		case 4:																  // Case 4: modul spalare parbriz
			mod_lucru_sistem = Servo_master_function(5, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() moodul de lucru(5, spalare parbriz), pointerul catre timer si pointerul catre semnalul de abort
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <Task_Servo+0xf8>)
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <Task_Servo+0xfc>)
 8001356:	0019      	movs	r1, r3
 8001358:	2005      	movs	r0, #5
 800135a:	f7ff f8c3 	bl	80004e4 <Servo_master_function>
 800135e:	0003      	movs	r3, r0
 8001360:	001a      	movs	r2, r3
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <Task_Servo+0xf0>)
 8001364:	601a      	str	r2, [r3, #0]
			break;
 8001366:	e00a      	b.n	800137e <Task_Servo+0xde>
		case 5:																  // Case 5: modul spalare luneta
			mod_lucru_sistem = Servo_master_function(6, &timer, &abort_signal); // Se paseaza la functia master Servo_master_function() moodul de lucru(6, spalare luneta), pointerul catre timer si pointerul catre semnalul de abort
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <Task_Servo+0xf8>)
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <Task_Servo+0xfc>)
 800136c:	0019      	movs	r1, r3
 800136e:	2006      	movs	r0, #6
 8001370:	f7ff f8b8 	bl	80004e4 <Servo_master_function>
 8001374:	0003      	movs	r3, r0
 8001376:	001a      	movs	r2, r3
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <Task_Servo+0xf0>)
 800137a:	601a      	str	r2, [r3, #0]
			break;
 800137c:	46c0      	nop			; (mov r8, r8)
		}

		osDelay(1); // Task-ul se reapeleaza automat la 1ms
 800137e:	2001      	movs	r0, #1
 8001380:	f004 f908 	bl	8005594 <osDelay>
		timer_trepte = 0; // reseteaza de fiecare data timer_trepte
 8001384:	e798      	b.n	80012b8 <Task_Servo+0x18>
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	20001e4c 	.word	0x20001e4c
 800138c:	20001f88 	.word	0x20001f88
 8001390:	20001f7c 	.word	0x20001f7c
 8001394:	08007b5c 	.word	0x08007b5c
 8001398:	20001f8c 	.word	0x20001f8c
 800139c:	20001f84 	.word	0x20001f84
 80013a0:	20001f6c 	.word	0x20001f6c
 80013a4:	20001cc8 	.word	0x20001cc8

080013a8 <Task_Joystick>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task_Joystick */
void Task_Joystick(void *argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////   Implementare Task Joystick   ////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	HAL_ADC_Start_DMA(&hadc, instant_ADC_Values, 3); // Initializeaza ADC-ul si ii stocheaza valorile citite instante in
 80013b0:	4932      	ldr	r1, [pc, #200]	; (800147c <Task_Joystick+0xd4>)
 80013b2:	4b33      	ldr	r3, [pc, #204]	; (8001480 <Task_Joystick+0xd8>)
 80013b4:	2203      	movs	r2, #3
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 fcfc 	bl	8001db4 <HAL_ADC_Start_DMA>

	for (;;)
	{
		if (sistem_initializat == 0) // Daca sistemul NU este initializat apeleaza functia is_system_initialized() care verifica daca ADC-ul citeste sau nu valori
 80013bc:	4b31      	ldr	r3, [pc, #196]	; (8001484 <Task_Joystick+0xdc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <Task_Joystick+0x20>
		{
			is_system_initialized();
 80013c4:	f7ff fc32 	bl	8000c2c <is_system_initialized>
		}

		if (sistem_initializat) // Dupa ce sistemul a fost initializat se incepe functionarea normala
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <Task_Joystick+0xdc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d050      	beq.n	8001472 <Task_Joystick+0xca>
		{
			if (instant_ADC_Values[2] <= 1000) // Cazul Buton Apasat
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <Task_Joystick+0xd4>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	23fa      	movs	r3, #250	; 0xfa
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d808      	bhi.n	80013ee <Task_Joystick+0x46>
			{
				mod_lucru_sistem = 0; // Modul de lucru se trece in 0 (oprire/reset)
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <Task_Joystick+0xe0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
				abort_signal = 1;	  // Semnalul de abort se face 1 pentru a oprii orice operatie
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <Task_Joystick+0xe4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
				treapta_curenta = 0;  // Se reseteaza treapta de viteza
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <Task_Joystick+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
			}

			if (instant_ADC_Values[0] <= 1000 && treapta_curenta > 0) // Cazul Joystick Jos in timpul functionarii pe trepte de viteza
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <Task_Joystick+0xd4>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	23fa      	movs	r3, #250	; 0xfa
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d80e      	bhi.n	8001418 <Task_Joystick+0x70>
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <Task_Joystick+0xe8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <Task_Joystick+0x70>
			{
				mod_lucru_sistem = 3;	 // Modul de lucru se trece in 3 (lucru in trepte, cazul decrementare treapta de viteza)
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <Task_Joystick+0xe0>)
 8001404:	2203      	movs	r2, #3
 8001406:	601a      	str	r2, [r3, #0]
				if (timer_trepte > 150)	 // Se verifica daca a trecut timpul minim de 150ms pentru a nu se decrementa accidental de mai multe ori treapta de viteza
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <Task_Joystick+0xec>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b96      	cmp	r3, #150	; 0x96
 800140e:	dd10      	ble.n	8001432 <Task_Joystick+0x8a>
					schimba_treapta = 1; // In cazul in care timpul minim a expirat, semnalul schimba_treapta se trece in 1 pentru a permite decrementarea treptei de viteza
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <Task_Joystick+0xf0>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
				if (timer_trepte > 150)	 // Se verifica daca a trecut timpul minim de 150ms pentru a nu se decrementa accidental de mai multe ori treapta de viteza
 8001416:	e00c      	b.n	8001432 <Task_Joystick+0x8a>
			}
			else
			{
				if (instant_ADC_Values[0] <= 1000 && treapta_curenta == 0) // Cazul: Joystick Jos in afara functionarii pe trepte de viteza
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <Task_Joystick+0xd4>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	23fa      	movs	r3, #250	; 0xfa
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d806      	bhi.n	8001432 <Task_Joystick+0x8a>
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <Task_Joystick+0xe8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <Task_Joystick+0x8a>
				{
					mod_lucru_sistem = 1; // Modul de lucru se trece in 1 (wipe x1)
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <Task_Joystick+0xe0>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
				}
			}

			if (instant_ADC_Values[0] >= 3500) // Cazul Joystick Sus
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <Task_Joystick+0xd4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a19      	ldr	r2, [pc, #100]	; (800149c <Task_Joystick+0xf4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d909      	bls.n	8001450 <Task_Joystick+0xa8>
			{
				mod_lucru_sistem = 2;	 // Modul de lucru se trece in 2 (lucru pe trepte de viteza, cazul incrementare treapta de viteza)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <Task_Joystick+0xe0>)
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
				if (timer_trepte > 150)	 // Se verifica daca a trecut timpul minim de 150ms pentru a nu se incrementa accidental de mai multe ori treapta de viteza
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <Task_Joystick+0xec>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b96      	cmp	r3, #150	; 0x96
 8001448:	dd02      	ble.n	8001450 <Task_Joystick+0xa8>
					schimba_treapta = 1; // In cazul in care timpul minim a expirat, semnalul schimba_treapta se trece in 1 pentru a permite incrementarea treptei de viteza
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <Task_Joystick+0xf0>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
			}

			if (instant_ADC_Values[1] <= 1000) // Cazul Joystick Stanga
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <Task_Joystick+0xd4>)
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	23fa      	movs	r3, #250	; 0xfa
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	429a      	cmp	r2, r3
 800145a:	d802      	bhi.n	8001462 <Task_Joystick+0xba>
			{
				mod_lucru_sistem = 4; // Modul de lucru se trece in 4 (modul spalare parbriz)
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <Task_Joystick+0xe0>)
 800145e:	2204      	movs	r2, #4
 8001460:	601a      	str	r2, [r3, #0]
			}

			if (instant_ADC_Values[1] >= 3500) // Cazul Joystick Dreapta
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <Task_Joystick+0xd4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a0d      	ldr	r2, [pc, #52]	; (800149c <Task_Joystick+0xf4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d902      	bls.n	8001472 <Task_Joystick+0xca>
			{
				mod_lucru_sistem = 5; // Modul de lucru se trece in 4 (modul spalare luneta)
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <Task_Joystick+0xe0>)
 800146e:	2205      	movs	r2, #5
 8001470:	601a      	str	r2, [r3, #0]
			}
		}
		osDelay(1); // Task-ul se reapeleaza automat la 1ms
 8001472:	2001      	movs	r0, #1
 8001474:	f004 f88e 	bl	8005594 <osDelay>
		if (sistem_initializat == 0) // Daca sistemul NU este initializat apeleaza functia is_system_initialized() care verifica daca ADC-ul citeste sau nu valori
 8001478:	e7a0      	b.n	80013bc <Task_Joystick+0x14>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	20001f70 	.word	0x20001f70
 8001480:	20001d64 	.word	0x20001d64
 8001484:	20001f80 	.word	0x20001f80
 8001488:	20001f7c 	.word	0x20001f7c
 800148c:	20001f8c 	.word	0x20001f8c
 8001490:	20001f6c 	.word	0x20001f6c
 8001494:	20001f88 	.word	0x20001f88
 8001498:	20001cc8 	.word	0x20001cc8
 800149c:	00000dab 	.word	0x00000dab

080014a0 <lucru_in_trepte_LCD.1>:
	st7565_backlight_enable();

	// Functie auxiliara pentru modul de lucru in trepte de viteza
	// Este apelata din interiorul for(;;) pe case-urile 2 si 3 ale switch-ului
	void lucru_in_trepte_LCD()
	{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4663      	mov	r3, ip
 80014a8:	607b      	str	r3, [r7, #4]
		switch (treapta_curenta)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <lucru_in_trepte_LCD.1+0x4c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d014      	beq.n	80014dc <lucru_in_trepte_LCD.1+0x3c>
 80014b2:	d817      	bhi.n	80014e4 <lucru_in_trepte_LCD.1+0x44>
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d00d      	beq.n	80014d4 <lucru_in_trepte_LCD.1+0x34>
 80014b8:	d814      	bhi.n	80014e4 <lucru_in_trepte_LCD.1+0x44>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <lucru_in_trepte_LCD.1+0x24>
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d004      	beq.n	80014cc <lucru_in_trepte_LCD.1+0x2c>
			break;
		case 3:							// Case 3: se intra atunci cand se ajunge la treapta 3 de viteza
			Display_master_function(4); // Se apeleaza functia master Display_mod_lucru_display() cu paramentrul 4 (treapta 4)
			break;
		}
	}
 80014c2:	e00f      	b.n	80014e4 <lucru_in_trepte_LCD.1+0x44>
			Display_master_function(0); // Se apeleaza functia master Display_mod_lucru_Display() cu parametrul 0 (reset/oprire)
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7fe feab 	bl	8000220 <Display_master_function>
			break;
 80014ca:	e00b      	b.n	80014e4 <lucru_in_trepte_LCD.1+0x44>
			Display_master_function(2); // Se apeleaza functia master Display_mod_lucru_Display() cu parametrul 2 (treapta 1)
 80014cc:	2002      	movs	r0, #2
 80014ce:	f7fe fea7 	bl	8000220 <Display_master_function>
			break;
 80014d2:	e007      	b.n	80014e4 <lucru_in_trepte_LCD.1+0x44>
			Display_master_function(3); // Se apeleaza functia master Display_mod_lucru_Display() cu parametrul 3 (treapta 2)
 80014d4:	2003      	movs	r0, #3
 80014d6:	f7fe fea3 	bl	8000220 <Display_master_function>
			break;
 80014da:	e003      	b.n	80014e4 <lucru_in_trepte_LCD.1+0x44>
			Display_master_function(4); // Se apeleaza functia master Display_mod_lucru_display() cu paramentrul 4 (treapta 4)
 80014dc:	2004      	movs	r0, #4
 80014de:	f7fe fe9f 	bl	8000220 <Display_master_function>
			break;
 80014e2:	46c0      	nop			; (mov r8, r8)
	}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20001f6c 	.word	0x20001f6c

080014f0 <Task_LCD>:
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
void Task_LCD(void *argument)
 80014f8:	2318      	movs	r3, #24
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	60fb      	str	r3, [r7, #12]
	st7565_init();
 80014fe:	f7ff f96f 	bl	80007e0 <st7565_init>
	st7565_backlight_enable();
 8001502:	f7ff fa1b 	bl	800093c <st7565_backlight_enable>

	for (;;)
	{

		switch (mod_lucru_sistem)
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Task_LCD+0x68>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d820      	bhi.n	8001550 <Task_LCD+0x60>
 800150e:	009a      	lsls	r2, r3, #2
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <Task_LCD+0x6c>)
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	469f      	mov	pc, r3
		{
		case 0:							// Case 0: modul idle/reset
			Display_master_function(0); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 0 (idle/reset)
 8001518:	2000      	movs	r0, #0
 800151a:	f7fe fe81 	bl	8000220 <Display_master_function>
			break;
 800151e:	e017      	b.n	8001550 <Task_LCD+0x60>
		case 1:							// Case 1: modul wipe x1
			Display_master_function(1); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 1 (wipe x1)
 8001520:	2001      	movs	r0, #1
 8001522:	f7fe fe7d 	bl	8000220 <Display_master_function>
			break;
 8001526:	e013      	b.n	8001550 <Task_LCD+0x60>
		case 2:					   // Case 2: modul de lucru in trepte, cazul incrementare treapta de viteza
			lucru_in_trepte_LCD(); // Se apeleaza functia lucru_in_trepte_LCD()
 8001528:	230c      	movs	r3, #12
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	469c      	mov	ip, r3
 800152e:	f7ff ffb7 	bl	80014a0 <lucru_in_trepte_LCD.1>
			break;
 8001532:	e00d      	b.n	8001550 <Task_LCD+0x60>
		case 3:					   // Case 3: modul de lucru in trepte, cazul decrementare treapta de viteza
			lucru_in_trepte_LCD(); // Se apeleaza functia lucru_in_trepte_LCD()
 8001534:	230c      	movs	r3, #12
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	469c      	mov	ip, r3
 800153a:	f7ff ffb1 	bl	80014a0 <lucru_in_trepte_LCD.1>
			break;
 800153e:	e007      	b.n	8001550 <Task_LCD+0x60>
		case 4:							// Case 4: modul spalare parbriz
			Display_master_function(5); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 4 (spalare parbriz)
 8001540:	2005      	movs	r0, #5
 8001542:	f7fe fe6d 	bl	8000220 <Display_master_function>
			break;
 8001546:	e003      	b.n	8001550 <Task_LCD+0x60>
		case 5:							// Case 5: modul spalare luneta
			Display_master_function(6); // Se apeleaza functia master Display_mod_lucru_display() cu parametrul 5 (spalare luneta)
 8001548:	2006      	movs	r0, #6
 800154a:	f7fe fe69 	bl	8000220 <Display_master_function>
			break;
 800154e:	46c0      	nop			; (mov r8, r8)
		}
		osDelay(1); // Task-ul se reapeleaza automat la 1ms
 8001550:	2001      	movs	r0, #1
 8001552:	f004 f81f 	bl	8005594 <osDelay>
		switch (mod_lucru_sistem)
 8001556:	e7d6      	b.n	8001506 <Task_LCD+0x16>
 8001558:	20001f7c 	.word	0x20001f7c
 800155c:	08007b74 	.word	0x08007b74

08001560 <Task_CounterUp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task_CounterUp */
void Task_CounterUp(void *argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	/////////////////////////////////////////////////////////////////////////////////   Implementare Task TimerUp   ///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	for (;;)
	{
		timer++;		// Incrementeaza timer pentru lucrul cu servomotorul
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <Task_CounterUp+0x24>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <Task_CounterUp+0x24>)
 8001570:	601a      	str	r2, [r3, #0]
		timer_trepte++; // Incrementeaza timer_trepte pentru evitarea incrementarii/decrementarii de mai multe ori a treptei de viteza 
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <Task_CounterUp+0x28>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <Task_CounterUp+0x28>)
 800157a:	601a      	str	r2, [r3, #0]

		osDelay(1);		// Task-ul se reapeleaza la 1ms astfel ca ambele timere masoara in ms
 800157c:	2001      	movs	r0, #1
 800157e:	f004 f809 	bl	8005594 <osDelay>
		timer++;		// Incrementeaza timer pentru lucrul cu servomotorul
 8001582:	e7f1      	b.n	8001568 <Task_CounterUp+0x8>
 8001584:	20001f84 	.word	0x20001f84
 8001588:	20001f88 	.word	0x20001f88

0800158c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001594:	e7fe      	b.n	8001594 <Error_Handler+0x8>
	...

08001598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_MspInit+0x50>)
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_MspInit+0x50>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	619a      	str	r2, [r3, #24]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x50>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4013      	ands	r3, r2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x50>)
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_MspInit+0x50>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0549      	lsls	r1, r1, #21
 80015c0:	430a      	orrs	r2, r1
 80015c2:	61da      	str	r2, [r3, #28]
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_MspInit+0x50>)
 80015c6:	69da      	ldr	r2, [r3, #28]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	055b      	lsls	r3, r3, #21
 80015cc:	4013      	ands	r3, r2
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80015d2:	2302      	movs	r3, #2
 80015d4:	425b      	negs	r3, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	2103      	movs	r1, #3
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 ff46 	bl	800246c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	2414      	movs	r4, #20
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	0018      	movs	r0, r3
 80015fa:	2314      	movs	r3, #20
 80015fc:	001a      	movs	r2, r3
 80015fe:	2100      	movs	r1, #0
 8001600:	f006 f93b 	bl	800787a <memset>
  if(hadc->Instance==ADC1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <HAL_ADC_MspInit+0xf4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d163      	bne.n	80016d6 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800160e:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_ADC_MspInit+0xf8>)
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_ADC_MspInit+0xf8>)
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	0089      	lsls	r1, r1, #2
 8001618:	430a      	orrs	r2, r1
 800161a:	619a      	str	r2, [r3, #24]
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <HAL_ADC_MspInit+0xf8>)
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_ADC_MspInit+0xf8>)
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_ADC_MspInit+0xf8>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0309      	lsls	r1, r1, #12
 8001634:	430a      	orrs	r2, r1
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_ADC_MspInit+0xf8>)
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	031b      	lsls	r3, r3, #12
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	221c      	movs	r2, #28
 800164a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164c:	193b      	adds	r3, r7, r4
 800164e:	2203      	movs	r2, #3
 8001650:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	193b      	adds	r3, r7, r4
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	193b      	adds	r3, r7, r4
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <HAL_ADC_MspInit+0xfc>)
 800165c:	0019      	movs	r1, r3
 800165e:	0010      	movs	r0, r2
 8001660:	f001 f8ec 	bl	800283c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_ADC_MspInit+0x100>)
 8001666:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_ADC_MspInit+0x104>)
 8001668:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_ADC_MspInit+0x100>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_ADC_MspInit+0x100>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_ADC_MspInit+0x100>)
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_ADC_MspInit+0x100>)
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_ADC_MspInit+0x100>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_ADC_MspInit+0x100>)
 800168e:	2220      	movs	r2, #32
 8001690:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_ADC_MspInit+0x100>)
 8001694:	22c0      	movs	r2, #192	; 0xc0
 8001696:	0192      	lsls	r2, r2, #6
 8001698:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_ADC_MspInit+0x100>)
 800169c:	0018      	movs	r0, r3
 800169e:	f000 ff17 	bl	80024d0 <HAL_DMA_Init>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d001      	beq.n	80016aa <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80016a6:	f7ff ff71 	bl	800158c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <HAL_ADC_MspInit+0x108>)
 80016ac:	23a8      	movs	r3, #168	; 0xa8
 80016ae:	58d3      	ldr	r3, [r2, r3]
 80016b0:	4910      	ldr	r1, [pc, #64]	; (80016f4 <HAL_ADC_MspInit+0x108>)
 80016b2:	220f      	movs	r2, #15
 80016b4:	4393      	bics	r3, r2
 80016b6:	22a8      	movs	r2, #168	; 0xa8
 80016b8:	508b      	str	r3, [r1, r2]
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_ADC_MspInit+0x108>)
 80016bc:	23a8      	movs	r3, #168	; 0xa8
 80016be:	58d3      	ldr	r3, [r2, r3]
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <HAL_ADC_MspInit+0x108>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	4313      	orrs	r3, r2
 80016c6:	22a8      	movs	r2, #168	; 0xa8
 80016c8:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_ADC_MspInit+0x100>)
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_ADC_MspInit+0x100>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b00b      	add	sp, #44	; 0x2c
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	40012400 	.word	0x40012400
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800
 80016ec:	20001da4 	.word	0x20001da4
 80016f0:	40020008 	.word	0x40020008
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	2414      	movs	r4, #20
 8001702:	193b      	adds	r3, r7, r4
 8001704:	0018      	movs	r0, r3
 8001706:	2314      	movs	r3, #20
 8001708:	001a      	movs	r2, r3
 800170a:	2100      	movs	r1, #0
 800170c:	f006 f8b5 	bl	800787a <memset>
  if(hspi->Instance==SPI1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <HAL_SPI_MspInit+0x90>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d132      	bne.n	8001780 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_SPI_MspInit+0x94>)
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_SPI_MspInit+0x94>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0149      	lsls	r1, r1, #5
 8001724:	430a      	orrs	r2, r1
 8001726:	619a      	str	r2, [r3, #24]
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_SPI_MspInit+0x94>)
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_SPI_MspInit+0x94>)
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_SPI_MspInit+0x94>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0289      	lsls	r1, r1, #10
 8001740:	430a      	orrs	r2, r1
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_SPI_MspInit+0x94>)
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001752:	0021      	movs	r1, r4
 8001754:	187b      	adds	r3, r7, r1
 8001756:	22a0      	movs	r2, #160	; 0xa0
 8001758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2202      	movs	r2, #2
 800175e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2203      	movs	r2, #3
 800176a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	187a      	adds	r2, r7, r1
 8001774:	2390      	movs	r3, #144	; 0x90
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f001 f85e 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b00b      	add	sp, #44	; 0x2c
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	40013000 	.word	0x40013000
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a27      	ldr	r2, [pc, #156]	; (800183c <HAL_TIM_Base_MspInit+0xac>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d147      	bne.n	8001832 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_TIM_Base_MspInit+0xb0>)
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_TIM_Base_MspInit+0xb0>)
 80017a8:	2102      	movs	r1, #2
 80017aa:	430a      	orrs	r2, r1
 80017ac:	61da      	str	r2, [r3, #28]
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_TIM_Base_MspInit+0xb0>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_TIM_Base_MspInit+0xb8>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017c2:	2210      	movs	r2, #16
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	0052      	lsls	r2, r2, #1
 80017d8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	00d2      	lsls	r2, r2, #3
 80017e0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 fe6d 	bl	80024d0 <HAL_DMA_Init>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d001      	beq.n	80017fe <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80017fa:	f7ff fec7 	bl	800158c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_DEFAULT);
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_TIM_Base_MspInit+0xbc>)
 8001800:	23a8      	movs	r3, #168	; 0xa8
 8001802:	58d3      	ldr	r3, [r2, r3]
 8001804:	4911      	ldr	r1, [pc, #68]	; (800184c <HAL_TIM_Base_MspInit+0xbc>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_TIM_Base_MspInit+0xc0>)
 8001808:	4013      	ands	r3, r2
 800180a:	22a8      	movs	r2, #168	; 0xa8
 800180c:	508b      	str	r3, [r1, r2]
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_TIM_Base_MspInit+0xbc>)
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <HAL_TIM_Base_MspInit+0xbc>)
 8001812:	23a8      	movs	r3, #168	; 0xa8
 8001814:	58d3      	ldr	r3, [r2, r3]
 8001816:	22a8      	movs	r2, #168	; 0xa8
 8001818:	508b      	str	r3, [r1, r2]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 800182a:	621a      	str	r2, [r3, #32]
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_TIM_Base_MspInit+0xb4>)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	40000400 	.word	0x40000400
 8001840:	40021000 	.word	0x40021000
 8001844:	20001e94 	.word	0x20001e94
 8001848:	40020030 	.word	0x40020030
 800184c:	40020000 	.word	0x40020000
 8001850:	fffff0ff 	.word	0xfffff0ff

08001854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	240c      	movs	r4, #12
 800185e:	193b      	adds	r3, r7, r4
 8001860:	0018      	movs	r0, r3
 8001862:	2314      	movs	r3, #20
 8001864:	001a      	movs	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	f006 f807 	bl	800787a <memset>
  if(htim->Instance==TIM3)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_TIM_MspPostInit+0x74>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d123      	bne.n	80018be <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_TIM_MspPostInit+0x78>)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_TIM_MspPostInit+0x78>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	02c9      	lsls	r1, r1, #11
 8001880:	430a      	orrs	r2, r1
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_TIM_MspPostInit+0x78>)
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	02db      	lsls	r3, r3, #11
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001892:	0021      	movs	r1, r4
 8001894:	187b      	adds	r3, r7, r1
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	187b      	adds	r3, r7, r1
 800189c:	2202      	movs	r2, #2
 800189e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2201      	movs	r2, #1
 80018b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_TIM_MspPostInit+0x7c>)
 80018b6:	0019      	movs	r1, r3
 80018b8:	0010      	movs	r0, r2
 80018ba:	f000 ffbf 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b009      	add	sp, #36	; 0x24
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000400 	.word	0x48000400

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	2414      	movs	r4, #20
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	0018      	movs	r0, r3
 80018e2:	2314      	movs	r3, #20
 80018e4:	001a      	movs	r2, r3
 80018e6:	2100      	movs	r1, #0
 80018e8:	f005 ffc7 	bl	800787a <memset>
  if(huart->Instance==USART2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_UART_MspInit+0x90>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d132      	bne.n	800195c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_UART_MspInit+0x94>)
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_UART_MspInit+0x94>)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	0289      	lsls	r1, r1, #10
 8001900:	430a      	orrs	r2, r1
 8001902:	61da      	str	r2, [r3, #28]
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_UART_MspInit+0x94>)
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_UART_MspInit+0x94>)
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_UART_MspInit+0x94>)
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	0289      	lsls	r1, r1, #10
 800191c:	430a      	orrs	r2, r1
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_UART_MspInit+0x94>)
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	029b      	lsls	r3, r3, #10
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800192e:	0021      	movs	r1, r4
 8001930:	187b      	adds	r3, r7, r1
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2202      	movs	r2, #2
 800193a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	187b      	adds	r3, r7, r1
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	187b      	adds	r3, r7, r1
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001948:	187b      	adds	r3, r7, r1
 800194a:	2201      	movs	r2, #1
 800194c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	187a      	adds	r2, r7, r1
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	05db      	lsls	r3, r3, #23
 8001954:	0011      	movs	r1, r2
 8001956:	0018      	movs	r0, r3
 8001958:	f000 ff70 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b00b      	add	sp, #44	; 0x2c
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	40004400 	.word	0x40004400
 8001968:	40021000 	.word	0x40021000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 f89a 	bl	8001ab4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001980:	f005 f8da 	bl	8006b38 <xTaskGetSchedulerState>
 8001984:	0003      	movs	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800198a:	f005 fd65 	bl	8007458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <DMA1_Ch1_IRQHandler+0x14>)
 800199a:	0018      	movs	r0, r3
 800199c:	f000 fe46 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20001da4 	.word	0x20001da4

080019ac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 fe3a 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	20001e94 	.word	0x20001e94

080019c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <LoopForever+0xe>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ec:	4c0b      	ldr	r4, [pc, #44]	; (8001a1c <LoopForever+0x16>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019fa:	f7ff ffe3 	bl	80019c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019fe:	f005 ff0d 	bl	800781c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a02:	f7ff f931 	bl	8000c68 <main>

08001a06 <LoopForever>:

LoopForever:
    b LoopForever
 8001a06:	e7fe      	b.n	8001a06 <LoopForever>
  ldr   r0, =_estack
 8001a08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	20001d40 	.word	0x20001d40
  ldr r2, =_sidata
 8001a14:	08007c34 	.word	0x08007c34
  ldr r2, =_sbss
 8001a18:	20001d40 	.word	0x20001d40
  ldr r4, =_ebss
 8001a1c:	2000399c 	.word	0x2000399c

08001a20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_COMP_IRQHandler>
	...

08001a24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_Init+0x24>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_Init+0x24>)
 8001a2e:	2110      	movs	r1, #16
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f809 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3a:	f7ff fdad 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a56:	681c      	ldr	r4, [r3, #0]
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_InitTick+0x60>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	23fa      	movs	r3, #250	; 0xfa
 8001a60:	0098      	lsls	r0, r3, #2
 8001a62:	f7fe fb51 	bl	8000108 <__udivsi3>
 8001a66:	0003      	movs	r3, r0
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f7fe fb4c 	bl	8000108 <__udivsi3>
 8001a70:	0003      	movs	r3, r0
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fd1f 	bl	80024b6 <HAL_SYSTICK_Config>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e00f      	b.n	8001aa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d80b      	bhi.n	8001a9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 fcec 	bl	800246c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_InitTick+0x64>)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b003      	add	sp, #12
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	20001ccc 	.word	0x20001ccc
 8001aac:	20001cd4 	.word	0x20001cd4
 8001ab0:	20001cd0 	.word	0x20001cd0

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	001a      	movs	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	18d2      	adds	r2, r2, r3
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	601a      	str	r2, [r3, #0]
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20001cd4 	.word	0x20001cd4
 8001ad4:	20001f90 	.word	0x20001f90

08001ad8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	20001f90 	.word	0x20001f90

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3301      	adds	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	189b      	adds	r3, r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	20001cd4 	.word	0x20001cd4

08001b34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e125      	b.n	8001d9e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10a      	bne.n	8001b70 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2234      	movs	r2, #52	; 0x34
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff fd3e 	bl	80015ec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	2210      	movs	r2, #16
 8001b76:	4013      	ands	r3, r2
 8001b78:	d000      	beq.n	8001b7c <HAL_ADC_Init+0x48>
 8001b7a:	e103      	b.n	8001d84 <HAL_ADC_Init+0x250>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d000      	beq.n	8001b88 <HAL_ADC_Init+0x54>
 8001b86:	e0fd      	b.n	8001d84 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001b92:	d000      	beq.n	8001b96 <HAL_ADC_Init+0x62>
 8001b94:	e0f6      	b.n	8001d84 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	4a83      	ldr	r2, [pc, #524]	; (8001da8 <HAL_ADC_Init+0x274>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d112      	bne.n	8001bda <HAL_ADC_Init+0xa6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d009      	beq.n	8001bd6 <HAL_ADC_Init+0xa2>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	401a      	ands	r2, r3
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Init+0xa6>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_ADC_Init+0xa8>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d116      	bne.n	8001c0e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2218      	movs	r2, #24
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	0899      	lsrs	r1, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4964      	ldr	r1, [pc, #400]	; (8001dac <HAL_ADC_Init+0x278>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7e1b      	ldrb	r3, [r3, #24]
 8001c22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7e5b      	ldrb	r3, [r3, #25]
 8001c28:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7e9b      	ldrb	r3, [r3, #26]
 8001c30:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c32:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d002      	beq.n	8001c42 <HAL_ADC_Init+0x10e>
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_Init+0x110>
 8001c42:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c4a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_Init+0x124>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e000      	b.n	8001c5a <HAL_ADC_Init+0x126>
 8001c58:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001c5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2124      	movs	r1, #36	; 0x24
 8001c60:	5c5b      	ldrb	r3, [r3, r1]
 8001c62:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001c64:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7edb      	ldrb	r3, [r3, #27]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d115      	bne.n	8001ca0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e9b      	ldrb	r3, [r3, #26]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	0252      	lsls	r2, r2, #9
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	e00b      	b.n	8001ca0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	2201      	movs	r2, #1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	23c2      	movs	r3, #194	; 0xc2
 8001ca6:	33ff      	adds	r3, #255	; 0xff
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d007      	beq.n	8001cbc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68d9      	ldr	r1, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	055b      	lsls	r3, r3, #21
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d01b      	beq.n	8001d10 <HAL_ADC_Init+0x1dc>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d017      	beq.n	8001d10 <HAL_ADC_Init+0x1dc>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d013      	beq.n	8001d10 <HAL_ADC_Init+0x1dc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d00f      	beq.n	8001d10 <HAL_ADC_Init+0x1dc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d00b      	beq.n	8001d10 <HAL_ADC_Init+0x1dc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d007      	beq.n	8001d10 <HAL_ADC_Init+0x1dc>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d003      	beq.n	8001d10 <HAL_ADC_Init+0x1dc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	2b07      	cmp	r3, #7
 8001d0e:	d112      	bne.n	8001d36 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2107      	movs	r1, #7
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6959      	ldr	r1, [r3, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_ADC_Init+0x27c>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d10b      	bne.n	8001d5e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	2203      	movs	r2, #3
 8001d52:	4393      	bics	r3, r2
 8001d54:	2201      	movs	r2, #1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d5c:	e01c      	b.n	8001d98 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	2212      	movs	r2, #18
 8001d64:	4393      	bics	r3, r2
 8001d66:	2210      	movs	r2, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d72:	2201      	movs	r2, #1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d82:	e009      	b.n	8001d98 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d88:	2210      	movs	r2, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d98:	230f      	movs	r3, #15
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b004      	add	sp, #16
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	fffffefd 	.word	0xfffffefd
 8001dac:	fffe0219 	.word	0xfffe0219
 8001db0:	833fffe7 	.word	0x833fffe7

08001db4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2317      	movs	r3, #23
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d15e      	bne.n	8001e92 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2234      	movs	r2, #52	; 0x34
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Start_DMA+0x2e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e05e      	b.n	8001ea0 <HAL_ADC_Start_DMA+0xec>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2234      	movs	r2, #52	; 0x34
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	7e5b      	ldrb	r3, [r3, #25]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d007      	beq.n	8001e02 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001df2:	2317      	movs	r3, #23
 8001df4:	18fc      	adds	r4, r7, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 f983 	bl	8002104 <ADC_Enable>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e02:	2317      	movs	r3, #23
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d146      	bne.n	8001e9a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <HAL_ADC_Start_DMA+0xf4>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	0052      	lsls	r2, r2, #1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2234      	movs	r2, #52	; 0x34
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_ADC_Start_DMA+0xf8>)
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_ADC_Start_DMA+0xfc>)
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_ADC_Start_DMA+0x100>)
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	221c      	movs	r2, #28
 8001e4a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2110      	movs	r1, #16
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2101      	movs	r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3340      	adds	r3, #64	; 0x40
 8001e76:	0019      	movs	r1, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f000 fb70 	bl	8002560 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e003      	b.n	8001e9a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e92:	2317      	movs	r3, #23
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2202      	movs	r2, #2
 8001e98:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e9a:	2317      	movs	r3, #23
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b007      	add	sp, #28
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	fffff0fe 	.word	0xfffff0fe
 8001eac:	0800220d 	.word	0x0800220d
 8001eb0:	080022c1 	.word	0x080022c1
 8001eb4:	080022df 	.word	0x080022df

08001eb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef2:	230f      	movs	r3, #15
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	055b      	lsls	r3, r3, #21
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d011      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x46>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d00d      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x46>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d009      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x46>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d005      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x46>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d001      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x46>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2234      	movs	r2, #52	; 0x34
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x54>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e0d0      	b.n	80020de <HAL_ADC_ConfigChannel+0x1f6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2234      	movs	r2, #52	; 0x34
 8001f40:	2101      	movs	r1, #1
 8001f42:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d000      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0x6a>
 8001f50:	e0b4      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a64      	ldr	r2, [pc, #400]	; (80020e8 <HAL_ADC_ConfigChannel+0x200>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x76>
 8001f5c:	e082      	b.n	8002064 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d037      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d033      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d02f      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d02b      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d027      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d023      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d01f      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	2107      	movs	r1, #7
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d012      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2107      	movs	r1, #7
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6959      	ldr	r1, [r3, #20]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b10      	cmp	r3, #16
 8001ff6:	d007      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x120>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b11      	cmp	r3, #17
 8001ffe:	d003      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x120>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b12      	cmp	r3, #18
 8002006:	d163      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002008:	4b38      	ldr	r3, [pc, #224]	; (80020ec <HAL_ADC_ConfigChannel+0x204>)
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b10      	cmp	r3, #16
 8002012:	d009      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x140>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b11      	cmp	r3, #17
 800201a:	d102      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x13a>
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	03db      	lsls	r3, r3, #15
 8002020:	e004      	b.n	800202c <HAL_ADC_ConfigChannel+0x144>
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	045b      	lsls	r3, r3, #17
 8002026:	e001      	b.n	800202c <HAL_ADC_ConfigChannel+0x144>
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <HAL_ADC_ConfigChannel+0x204>)
 800202e:	430b      	orrs	r3, r1
 8002030:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b10      	cmp	r3, #16
 8002038:	d14a      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_ADC_ConfigChannel+0x208>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	492d      	ldr	r1, [pc, #180]	; (80020f4 <HAL_ADC_ConfigChannel+0x20c>)
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe f861 	bl	8000108 <__udivsi3>
 8002046:	0003      	movs	r3, r0
 8002048:	001a      	movs	r2, r3
 800204a:	0013      	movs	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	189b      	adds	r3, r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x16e>
 8002062:	e035      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	4099      	lsls	r1, r3
 8002072:	000b      	movs	r3, r1
 8002074:	43d9      	mvns	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b10      	cmp	r3, #16
 8002084:	d007      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x1ae>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b11      	cmp	r3, #17
 800208c:	d003      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x1ae>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b12      	cmp	r3, #18
 8002094:	d11c      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_ADC_ConfigChannel+0x204>)
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d007      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x1ca>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b11      	cmp	r3, #17
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x1c6>
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_ADC_ConfigChannel+0x210>)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x1cc>
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_ADC_ConfigChannel+0x214>)
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x1cc>
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_ADC_ConfigChannel+0x218>)
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_ADC_ConfigChannel+0x204>)
 80020b6:	400b      	ands	r3, r1
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e009      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	2220      	movs	r2, #32
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80020c8:	230f      	movs	r3, #15
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2234      	movs	r2, #52	; 0x34
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80020d8:	230f      	movs	r3, #15
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	00001001 	.word	0x00001001
 80020ec:	40012708 	.word	0x40012708
 80020f0:	20001ccc 	.word	0x20001ccc
 80020f4:	000f4240 	.word	0x000f4240
 80020f8:	ffbfffff 	.word	0xffbfffff
 80020fc:	feffffff 	.word	0xfeffffff
 8002100:	ff7fffff 	.word	0xff7fffff

08002104 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2203      	movs	r2, #3
 800211c:	4013      	ands	r3, r2
 800211e:	2b01      	cmp	r3, #1
 8002120:	d112      	bne.n	8002148 <ADC_Enable+0x44>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	4013      	ands	r3, r2
 800212c:	2b01      	cmp	r3, #1
 800212e:	d009      	beq.n	8002144 <ADC_Enable+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	401a      	ands	r2, r3
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	429a      	cmp	r2, r3
 8002142:	d101      	bne.n	8002148 <ADC_Enable+0x44>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <ADC_Enable+0x46>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d152      	bne.n	80021f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <ADC_Enable+0xfc>)
 8002156:	4013      	ands	r3, r2
 8002158:	d00d      	beq.n	8002176 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	2210      	movs	r2, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2201      	movs	r2, #1
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e03f      	b.n	80021f6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <ADC_Enable+0x100>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	491f      	ldr	r1, [pc, #124]	; (8002208 <ADC_Enable+0x104>)
 800218c:	0018      	movs	r0, r3
 800218e:	f7fd ffbb 	bl	8000108 <__udivsi3>
 8002192:	0003      	movs	r3, r0
 8002194:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002196:	e002      	b.n	800219e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3b01      	subs	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80021a4:	f7ff fc98 	bl	8001ad8 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021ac:	e01b      	b.n	80021e6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ae:	f7ff fc93 	bl	8001ad8 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d914      	bls.n	80021e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00d      	beq.n	80021e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	2210      	movs	r2, #16
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2201      	movs	r2, #1
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e007      	b.n	80021f6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d1dc      	bne.n	80021ae <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	80000017 	.word	0x80000017
 8002204:	20001ccc 	.word	0x20001ccc
 8002208:	000f4240 	.word	0x000f4240

0800220c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	2250      	movs	r2, #80	; 0x50
 8002220:	4013      	ands	r3, r2
 8002222:	d140      	bne.n	80022a6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	23c0      	movs	r3, #192	; 0xc0
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4013      	ands	r3, r2
 800223e:	d12d      	bne.n	800229c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002244:	2b00      	cmp	r3, #0
 8002246:	d129      	bne.n	800229c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2208      	movs	r2, #8
 8002250:	4013      	ands	r3, r2
 8002252:	2b08      	cmp	r3, #8
 8002254:	d122      	bne.n	800229c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2204      	movs	r2, #4
 800225e:	4013      	ands	r3, r2
 8002260:	d110      	bne.n	8002284 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	210c      	movs	r1, #12
 800226e:	438a      	bics	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <ADC_DMAConvCplt+0xb0>)
 8002278:	4013      	ands	r3, r2
 800227a:	2201      	movs	r2, #1
 800227c:	431a      	orrs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
 8002282:	e00b      	b.n	800229c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	2220      	movs	r2, #32
 800228a:	431a      	orrs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2201      	movs	r2, #1
 8002296:	431a      	orrs	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff fe0a 	bl	8001eb8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80022a4:	e005      	b.n	80022b2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	0010      	movs	r0, r2
 80022b0:	4798      	blx	r3
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	fffffefe 	.word	0xfffffefe

080022c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff fdf9 	bl	8001ec8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}

080022de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	431a      	orrs	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	2204      	movs	r2, #4
 80022fe:	431a      	orrs	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff fde6 	bl	8001ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bd80      	pop	{r7, pc}

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	0002      	movs	r2, r0
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b7f      	cmp	r3, #127	; 0x7f
 8002326:	d809      	bhi.n	800233c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	001a      	movs	r2, r3
 800232e:	231f      	movs	r3, #31
 8002330:	401a      	ands	r2, r3
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_EnableIRQ+0x30>)
 8002334:	2101      	movs	r1, #1
 8002336:	4091      	lsls	r1, r2
 8002338:	000a      	movs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
  }
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	0002      	movs	r2, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b7f      	cmp	r3, #127	; 0x7f
 800235c:	d828      	bhi.n	80023b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235e:	4a2f      	ldr	r2, [pc, #188]	; (800241c <__NVIC_SetPriority+0xd4>)
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	33c0      	adds	r3, #192	; 0xc0
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	589b      	ldr	r3, [r3, r2]
 800236e:	1dfa      	adds	r2, r7, #7
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	0011      	movs	r1, r2
 8002374:	2203      	movs	r2, #3
 8002376:	400a      	ands	r2, r1
 8002378:	00d2      	lsls	r2, r2, #3
 800237a:	21ff      	movs	r1, #255	; 0xff
 800237c:	4091      	lsls	r1, r2
 800237e:	000a      	movs	r2, r1
 8002380:	43d2      	mvns	r2, r2
 8002382:	401a      	ands	r2, r3
 8002384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	401a      	ands	r2, r3
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	0018      	movs	r0, r3
 8002394:	2303      	movs	r3, #3
 8002396:	4003      	ands	r3, r0
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	481f      	ldr	r0, [pc, #124]	; (800241c <__NVIC_SetPriority+0xd4>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	430a      	orrs	r2, r1
 80023a8:	33c0      	adds	r3, #192	; 0xc0
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023ae:	e031      	b.n	8002414 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <__NVIC_SetPriority+0xd8>)
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	0019      	movs	r1, r3
 80023b8:	230f      	movs	r3, #15
 80023ba:	400b      	ands	r3, r1
 80023bc:	3b08      	subs	r3, #8
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3306      	adds	r3, #6
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	18d3      	adds	r3, r2, r3
 80023c6:	3304      	adds	r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1dfa      	adds	r2, r7, #7
 80023cc:	7812      	ldrb	r2, [r2, #0]
 80023ce:	0011      	movs	r1, r2
 80023d0:	2203      	movs	r2, #3
 80023d2:	400a      	ands	r2, r1
 80023d4:	00d2      	lsls	r2, r2, #3
 80023d6:	21ff      	movs	r1, #255	; 0xff
 80023d8:	4091      	lsls	r1, r2
 80023da:	000a      	movs	r2, r1
 80023dc:	43d2      	mvns	r2, r2
 80023de:	401a      	ands	r2, r3
 80023e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	22ff      	movs	r2, #255	; 0xff
 80023e8:	401a      	ands	r2, r3
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	0018      	movs	r0, r3
 80023f0:	2303      	movs	r3, #3
 80023f2:	4003      	ands	r3, r0
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f8:	4809      	ldr	r0, [pc, #36]	; (8002420 <__NVIC_SetPriority+0xd8>)
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	001c      	movs	r4, r3
 8002400:	230f      	movs	r3, #15
 8002402:	4023      	ands	r3, r4
 8002404:	3b08      	subs	r3, #8
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	430a      	orrs	r2, r1
 800240a:	3306      	adds	r3, #6
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	18c3      	adds	r3, r0, r3
 8002410:	3304      	adds	r3, #4
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b003      	add	sp, #12
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	045b      	lsls	r3, r3, #17
 8002434:	429a      	cmp	r2, r3
 8002436:	d301      	bcc.n	800243c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002438:	2301      	movs	r3, #1
 800243a:	e010      	b.n	800245e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <SysTick_Config+0x44>)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	3a01      	subs	r2, #1
 8002442:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002444:	2301      	movs	r3, #1
 8002446:	425b      	negs	r3, r3
 8002448:	2103      	movs	r1, #3
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff ff7c 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x44>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x44>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	210f      	movs	r1, #15
 8002478:	187b      	adds	r3, r7, r1
 800247a:	1c02      	adds	r2, r0, #0
 800247c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	187b      	adds	r3, r7, r1
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b25b      	sxtb	r3, r3
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	0002      	movs	r2, r0
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff ff33 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff ffaf 	bl	8002424 <SysTick_Config>
 80024c6:	0003      	movs	r3, r0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e036      	b.n	8002554 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2221      	movs	r2, #33	; 0x21
 80024ea:	2102      	movs	r1, #2
 80024ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a18      	ldr	r2, [pc, #96]	; (800255c <HAL_DMA_Init+0x8c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0018      	movs	r0, r3
 8002538:	f000 f946 	bl	80027c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}  
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b004      	add	sp, #16
 800255a:	bd80      	pop	{r7, pc}
 800255c:	ffffc00f 	.word	0xffffc00f

08002560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800256e:	2317      	movs	r3, #23
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	5c9b      	ldrb	r3, [r3, r2]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Start_IT+0x24>
 8002580:	2302      	movs	r3, #2
 8002582:	e04f      	b.n	8002624 <HAL_DMA_Start_IT+0xc4>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2221      	movs	r2, #33	; 0x21
 8002590:	5c9b      	ldrb	r3, [r3, r2]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d13a      	bne.n	800260e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2221      	movs	r2, #33	; 0x21
 800259c:	2102      	movs	r1, #2
 800259e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	438a      	bics	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f8d7 	bl	8002770 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	210e      	movs	r1, #14
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e00f      	b.n	80025fc <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	210a      	movs	r1, #10
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2104      	movs	r1, #4
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e007      	b.n	800261e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	2100      	movs	r1, #0
 8002614:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002616:	2317      	movs	r3, #23
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2202      	movs	r2, #2
 800261c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800261e:	2317      	movs	r3, #23
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	781b      	ldrb	r3, [r3, #0]
} 
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b006      	add	sp, #24
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2204      	movs	r2, #4
 800264a:	409a      	lsls	r2, r3
 800264c:	0013      	movs	r3, r2
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	d024      	beq.n	800269e <HAL_DMA_IRQHandler+0x72>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2204      	movs	r2, #4
 8002658:	4013      	ands	r3, r2
 800265a:	d020      	beq.n	800269e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2220      	movs	r2, #32
 8002664:	4013      	ands	r3, r2
 8002666:	d107      	bne.n	8002678 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2104      	movs	r1, #4
 8002674:	438a      	bics	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	2104      	movs	r1, #4
 8002682:	4091      	lsls	r1, r2
 8002684:	000a      	movs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d100      	bne.n	8002692 <HAL_DMA_IRQHandler+0x66>
 8002690:	e06a      	b.n	8002768 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	0010      	movs	r0, r2
 800269a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800269c:	e064      	b.n	8002768 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2202      	movs	r2, #2
 80026a4:	409a      	lsls	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	d02b      	beq.n	8002706 <HAL_DMA_IRQHandler+0xda>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2202      	movs	r2, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	d027      	beq.n	8002706 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2220      	movs	r2, #32
 80026be:	4013      	ands	r3, r2
 80026c0:	d10b      	bne.n	80026da <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	210a      	movs	r1, #10
 80026ce:	438a      	bics	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2221      	movs	r2, #33	; 0x21
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	2102      	movs	r1, #2
 80026e4:	4091      	lsls	r1, r2
 80026e6:	000a      	movs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d036      	beq.n	8002768 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	0010      	movs	r0, r2
 8002702:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002704:	e030      	b.n	8002768 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2208      	movs	r2, #8
 800270c:	409a      	lsls	r2, r3
 800270e:	0013      	movs	r3, r2
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	d028      	beq.n	8002768 <HAL_DMA_IRQHandler+0x13c>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2208      	movs	r2, #8
 800271a:	4013      	ands	r3, r2
 800271c:	d024      	beq.n	8002768 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	210e      	movs	r1, #14
 800272a:	438a      	bics	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	2101      	movs	r1, #1
 8002738:	4091      	lsls	r1, r2
 800273a:	000a      	movs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2221      	movs	r2, #33	; 0x21
 8002748:	2101      	movs	r1, #1
 800274a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	0010      	movs	r0, r2
 8002764:	4798      	blx	r3
    }
   }
}  
 8002766:	e7ff      	b.n	8002768 <HAL_DMA_IRQHandler+0x13c>
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}

08002770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	2101      	movs	r1, #1
 8002788:	4091      	lsls	r1, r2
 800278a:	000a      	movs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b10      	cmp	r3, #16
 800279c:	d108      	bne.n	80027b0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ae:	e007      	b.n	80027c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	001a      	movs	r2, r3
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <DMA_CalcBaseAndBitshift+0x60>)
 80027d8:	429a      	cmp	r2, r3
 80027da:	d810      	bhi.n	80027fe <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <DMA_CalcBaseAndBitshift+0x64>)
 80027e2:	4694      	mov	ip, r2
 80027e4:	4463      	add	r3, ip
 80027e6:	2114      	movs	r1, #20
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fd fc8d 	bl	8000108 <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	009a      	lsls	r2, r3, #2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <DMA_CalcBaseAndBitshift+0x68>)
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80027fc:	e00f      	b.n	800281e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <DMA_CalcBaseAndBitshift+0x6c>)
 8002804:	4694      	mov	ip, r2
 8002806:	4463      	add	r3, ip
 8002808:	2114      	movs	r1, #20
 800280a:	0018      	movs	r0, r3
 800280c:	f7fd fc7c 	bl	8000108 <__udivsi3>
 8002810:	0003      	movs	r3, r0
 8002812:	009a      	lsls	r2, r3, #2
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <DMA_CalcBaseAndBitshift+0x70>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40020407 	.word	0x40020407
 800282c:	bffdfff8 	.word	0xbffdfff8
 8002830:	40020000 	.word	0x40020000
 8002834:	bffdfbf8 	.word	0xbffdfbf8
 8002838:	40020400 	.word	0x40020400

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	e155      	b.n	8002af8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4091      	lsls	r1, r2
 8002856:	000a      	movs	r2, r1
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d100      	bne.n	8002864 <HAL_GPIO_Init+0x28>
 8002862:	e146      	b.n	8002af2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	4013      	ands	r3, r2
 800286c:	2b01      	cmp	r3, #1
 800286e:	d005      	beq.n	800287c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002878:	2b02      	cmp	r3, #2
 800287a:	d130      	bne.n	80028de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	409a      	lsls	r2, r3
 800288a:	0013      	movs	r3, r2
 800288c:	43da      	mvns	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	0013      	movs	r3, r2
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b2:	2201      	movs	r2, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
 80028b8:	0013      	movs	r3, r2
 80028ba:	43da      	mvns	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	2201      	movs	r2, #1
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
 80028d0:	0013      	movs	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2203      	movs	r2, #3
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d017      	beq.n	800291a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	409a      	lsls	r2, r3
 80028f8:	0013      	movs	r3, r2
 80028fa:	43da      	mvns	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2203      	movs	r2, #3
 8002920:	4013      	ands	r3, r2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d123      	bne.n	800296e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	58d3      	ldr	r3, [r2, r3]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	43da      	mvns	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2107      	movs	r1, #7
 8002952:	400b      	ands	r3, r1
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	409a      	lsls	r2, r3
 8002958:	0013      	movs	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	6939      	ldr	r1, [r7, #16]
 800296c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	409a      	lsls	r2, r3
 800297c:	0013      	movs	r3, r2
 800297e:	43da      	mvns	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2203      	movs	r2, #3
 800298c:	401a      	ands	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	409a      	lsls	r2, r3
 8002994:	0013      	movs	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	23c0      	movs	r3, #192	; 0xc0
 80029a8:	029b      	lsls	r3, r3, #10
 80029aa:	4013      	ands	r3, r2
 80029ac:	d100      	bne.n	80029b0 <HAL_GPIO_Init+0x174>
 80029ae:	e0a0      	b.n	8002af2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b0:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <HAL_GPIO_Init+0x2d4>)
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	4b56      	ldr	r3, [pc, #344]	; (8002b10 <HAL_GPIO_Init+0x2d4>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	430a      	orrs	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]
 80029bc:	4b54      	ldr	r3, [pc, #336]	; (8002b10 <HAL_GPIO_Init+0x2d4>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2201      	movs	r2, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_GPIO_Init+0x2d8>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	589b      	ldr	r3, [r3, r2]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2203      	movs	r2, #3
 80029da:	4013      	ands	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	409a      	lsls	r2, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	2390      	movs	r3, #144	; 0x90
 80029f0:	05db      	lsls	r3, r3, #23
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x1ee>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a47      	ldr	r2, [pc, #284]	; (8002b18 <HAL_GPIO_Init+0x2dc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x1ea>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a46      	ldr	r2, [pc, #280]	; (8002b1c <HAL_GPIO_Init+0x2e0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x1e6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a45      	ldr	r2, [pc, #276]	; (8002b20 <HAL_GPIO_Init+0x2e4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x1e2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a44      	ldr	r2, [pc, #272]	; (8002b24 <HAL_GPIO_Init+0x2e8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x1de>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x1f0>
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x1f0>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x1f0>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x1f0>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x1f0>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	2103      	movs	r1, #3
 8002a30:	400a      	ands	r2, r1
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	; (8002b14 <HAL_GPIO_Init+0x2d8>)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43da      	mvns	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	025b      	lsls	r3, r3, #9
 8002a62:	4013      	ands	r3, r2
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	029b      	lsls	r3, r3, #10
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a98:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	035b      	lsls	r3, r3, #13
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	039b      	lsls	r3, r3, #14
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	40da      	lsrs	r2, r3
 8002b00:	1e13      	subs	r3, r2, #0
 8002b02:	d000      	beq.n	8002b06 <HAL_GPIO_Init+0x2ca>
 8002b04:	e6a2      	b.n	800284c <HAL_GPIO_Init+0x10>
  } 
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b006      	add	sp, #24
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010000 	.word	0x40010000
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	48000c00 	.word	0x48000c00
 8002b24:	48001000 	.word	0x48001000
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	0008      	movs	r0, r1
 8002b36:	0011      	movs	r1, r2
 8002b38:	1cbb      	adds	r3, r7, #2
 8002b3a:	1c02      	adds	r2, r0, #0
 8002b3c:	801a      	strh	r2, [r3, #0]
 8002b3e:	1c7b      	adds	r3, r7, #1
 8002b40:	1c0a      	adds	r2, r1, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b44:	1c7b      	adds	r3, r7, #1
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4c:	1cbb      	adds	r3, r7, #2
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b54:	e003      	b.n	8002b5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b56:	1cbb      	adds	r3, r7, #2
 8002b58:	881a      	ldrh	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f000 fb76 	bl	8003268 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	d100      	bne.n	8002b88 <HAL_RCC_OscConfig+0x20>
 8002b86:	e08e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b88:	4bc5      	ldr	r3, [pc, #788]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	220c      	movs	r2, #12
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d00e      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b94:	4bc2      	ldr	r3, [pc, #776]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	220c      	movs	r2, #12
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d117      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x68>
 8002ba0:	4bbf      	ldr	r3, [pc, #764]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	23c0      	movs	r3, #192	; 0xc0
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	401a      	ands	r2, r3
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	025b      	lsls	r3, r3, #9
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4bbb      	ldr	r3, [pc, #748]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d100      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x58>
 8002bbe:	e071      	b.n	8002ca4 <HAL_RCC_OscConfig+0x13c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d000      	beq.n	8002bca <HAL_RCC_OscConfig+0x62>
 8002bc8:	e06c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f000 fb4c 	bl	8003268 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x80>
 8002bd8:	4bb1      	ldr	r3, [pc, #708]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4bb0      	ldr	r3, [pc, #704]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	0249      	lsls	r1, r1, #9
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e02f      	b.n	8002c48 <HAL_RCC_OscConfig+0xe0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10c      	bne.n	8002c0a <HAL_RCC_OscConfig+0xa2>
 8002bf0:	4bab      	ldr	r3, [pc, #684]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4baa      	ldr	r3, [pc, #680]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002bf6:	49ab      	ldr	r1, [pc, #684]	; (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	4ba8      	ldr	r3, [pc, #672]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4ba7      	ldr	r3, [pc, #668]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c02:	49a9      	ldr	r1, [pc, #676]	; (8002ea8 <HAL_RCC_OscConfig+0x340>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e01e      	b.n	8002c48 <HAL_RCC_OscConfig+0xe0>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d10e      	bne.n	8002c30 <HAL_RCC_OscConfig+0xc8>
 8002c12:	4ba3      	ldr	r3, [pc, #652]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4ba2      	ldr	r3, [pc, #648]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	02c9      	lsls	r1, r1, #11
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	4b9f      	ldr	r3, [pc, #636]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b9e      	ldr	r3, [pc, #632]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	0249      	lsls	r1, r1, #9
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xe0>
 8002c30:	4b9b      	ldr	r3, [pc, #620]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b9a      	ldr	r3, [pc, #616]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c36:	499b      	ldr	r1, [pc, #620]	; (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c38:	400a      	ands	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	4b98      	ldr	r3, [pc, #608]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b97      	ldr	r3, [pc, #604]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c42:	4999      	ldr	r1, [pc, #612]	; (8002ea8 <HAL_RCC_OscConfig+0x340>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d014      	beq.n	8002c7a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe ff42 	bl	8001ad8 <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5a:	f7fe ff3d 	bl	8001ad8 <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b64      	cmp	r3, #100	; 0x64
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e2fd      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6c:	4b8c      	ldr	r3, [pc, #560]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	029b      	lsls	r3, r3, #10
 8002c74:	4013      	ands	r3, r2
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0xf2>
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe ff2d 	bl	8001ad8 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe ff28 	bl	8001ad8 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e2e8      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	029b      	lsls	r3, r3, #10
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x11c>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2202      	movs	r2, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x14a>
 8002cb0:	e06c      	b.n	8002d8c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cb2:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cbc:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	220c      	movs	r2, #12
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d11f      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1a0>
 8002cc8:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	23c0      	movs	r3, #192	; 0xc0
 8002cce:	025b      	lsls	r3, r3, #9
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x188>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e2bb      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	22f8      	movs	r2, #248	; 0xf8
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00da      	lsls	r2, r3, #3
 8002d00:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e041      	b.n	8002d8c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d024      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b62      	ldr	r3, [pc, #392]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d16:	2101      	movs	r1, #1
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fedc 	bl	8001ad8 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fed7 	bl	8001ad8 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e297      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d0f1      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b57      	ldr	r3, [pc, #348]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	22f8      	movs	r2, #248	; 0xf8
 8002d48:	4393      	bics	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	00da      	lsls	r2, r3, #3
 8002d52:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d60:	2101      	movs	r1, #1
 8002d62:	438a      	bics	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fe feb7 	bl	8001ad8 <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fe feb2 	bl	8001ad8 <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e272      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2202      	movs	r2, #2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d1f1      	bne.n	8002d70 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2208      	movs	r2, #8
 8002d92:	4013      	ands	r3, r2
 8002d94:	d036      	beq.n	8002e04 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	430a      	orrs	r2, r1
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fe95 	bl	8001ad8 <HAL_GetTick>
 8002dae:	0003      	movs	r3, r0
 8002db0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fe90 	bl	8001ad8 <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e250      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2202      	movs	r2, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d0f1      	beq.n	8002db4 <HAL_RCC_OscConfig+0x24c>
 8002dd0:	e018      	b.n	8002e04 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	438a      	bics	r2, r1
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fe7b 	bl	8001ad8 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe fe76 	bl	8001ad8 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e236      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfa:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	d1f1      	bne.n	8002de8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d100      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2a8>
 8002e0e:	e0b5      	b.n	8002f7c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e10:	201f      	movs	r0, #31
 8002e12:	183b      	adds	r3, r7, r0
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	055b      	lsls	r3, r3, #21
 8002e20:	4013      	ands	r3, r2
 8002e22:	d110      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	0549      	lsls	r1, r1, #21
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	61da      	str	r2, [r3, #28]
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	055b      	lsls	r3, r3, #21
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e40:	183b      	adds	r3, r7, r0
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_OscConfig+0x344>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d11a      	bne.n	8002e88 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_RCC_OscConfig+0x344>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_RCC_OscConfig+0x344>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0049      	lsls	r1, r1, #1
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fe3a 	bl	8001ad8 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fe fe35 	bl	8001ad8 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1f5      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x344>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x348>
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <HAL_RCC_OscConfig+0x338>)
 8002e96:	2101      	movs	r1, #1
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	621a      	str	r2, [r3, #32]
 8002e9c:	e036      	b.n	8002f0c <HAL_RCC_OscConfig+0x3a4>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	fffeffff 	.word	0xfffeffff
 8002ea8:	fffbffff 	.word	0xfffbffff
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x36a>
 8002eb8:	4bca      	ldr	r3, [pc, #808]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	4bc9      	ldr	r3, [pc, #804]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	621a      	str	r2, [r3, #32]
 8002ec4:	4bc7      	ldr	r3, [pc, #796]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	4bc6      	ldr	r3, [pc, #792]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002eca:	2104      	movs	r1, #4
 8002ecc:	438a      	bics	r2, r1
 8002ece:	621a      	str	r2, [r3, #32]
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x3a4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x38c>
 8002eda:	4bc2      	ldr	r3, [pc, #776]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	4bc1      	ldr	r3, [pc, #772]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	621a      	str	r2, [r3, #32]
 8002ee6:	4bbf      	ldr	r3, [pc, #764]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	4bbe      	ldr	r3, [pc, #760]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	621a      	str	r2, [r3, #32]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0x3a4>
 8002ef4:	4bbb      	ldr	r3, [pc, #748]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	4bba      	ldr	r3, [pc, #744]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	438a      	bics	r2, r1
 8002efe:	621a      	str	r2, [r3, #32]
 8002f00:	4bb8      	ldr	r3, [pc, #736]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	4bb7      	ldr	r3, [pc, #732]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f06:	2104      	movs	r1, #4
 8002f08:	438a      	bics	r2, r1
 8002f0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d014      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7fe fde0 	bl	8001ad8 <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	e009      	b.n	8002f32 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fddb 	bl	8001ad8 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	4aaf      	ldr	r2, [pc, #700]	; (80031e8 <HAL_RCC_OscConfig+0x680>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e19a      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	4bac      	ldr	r3, [pc, #688]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3b6>
 8002f3c:	e013      	b.n	8002f66 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fdcb 	bl	8001ad8 <HAL_GetTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	e009      	b.n	8002f5c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe fdc6 	bl	8001ad8 <HAL_GetTick>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	4aa5      	ldr	r2, [pc, #660]	; (80031e8 <HAL_RCC_OscConfig+0x680>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e185      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	4ba1      	ldr	r3, [pc, #644]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	2202      	movs	r2, #2
 8002f62:	4013      	ands	r3, r2
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f66:	231f      	movs	r3, #31
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b9c      	ldr	r3, [pc, #624]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	4b9b      	ldr	r3, [pc, #620]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f76:	499d      	ldr	r1, [pc, #628]	; (80031ec <HAL_RCC_OscConfig+0x684>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	4013      	ands	r3, r2
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d12a      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f8e:	4b95      	ldr	r3, [pc, #596]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	4b94      	ldr	r3, [pc, #592]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f94:	2104      	movs	r1, #4
 8002f96:	430a      	orrs	r2, r1
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002f9a:	4b92      	ldr	r3, [pc, #584]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9e:	4b91      	ldr	r3, [pc, #580]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7fe fd97 	bl	8001ad8 <HAL_GetTick>
 8002faa:	0003      	movs	r3, r0
 8002fac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fb0:	f7fe fd92 	bl	8001ad8 <HAL_GetTick>
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e152      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d0f1      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002fcc:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	22f8      	movs	r2, #248	; 0xf8
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	00da      	lsls	r2, r3, #3
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fe2:	e034      	b.n	800304e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	3305      	adds	r3, #5
 8002fea:	d111      	bne.n	8003010 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002fec:	4b7d      	ldr	r3, [pc, #500]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff0:	4b7c      	ldr	r3, [pc, #496]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ff8:	4b7a      	ldr	r3, [pc, #488]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	22f8      	movs	r2, #248	; 0xf8
 8002ffe:	4393      	bics	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	00da      	lsls	r2, r3, #3
 8003008:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 800300a:	430a      	orrs	r2, r1
 800300c:	635a      	str	r2, [r3, #52]	; 0x34
 800300e:	e01e      	b.n	800304e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003010:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003014:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003016:	2104      	movs	r1, #4
 8003018:	430a      	orrs	r2, r1
 800301a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800301c:	4b71      	ldr	r3, [pc, #452]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 800301e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003020:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003022:	2101      	movs	r1, #1
 8003024:	438a      	bics	r2, r1
 8003026:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe fd56 	bl	8001ad8 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003032:	f7fe fd51 	bl	8001ad8 <HAL_GetTick>
 8003036:	0002      	movs	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e111      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003044:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	2202      	movs	r2, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d1f1      	bne.n	8003032 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2220      	movs	r2, #32
 8003054:	4013      	ands	r3, r2
 8003056:	d05c      	beq.n	8003112 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003058:	4b62      	ldr	r3, [pc, #392]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	220c      	movs	r2, #12
 800305e:	4013      	ands	r3, r2
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d00e      	beq.n	8003082 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003064:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	220c      	movs	r2, #12
 800306a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800306c:	2b08      	cmp	r3, #8
 800306e:	d114      	bne.n	800309a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003070:	4b5c      	ldr	r3, [pc, #368]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	23c0      	movs	r3, #192	; 0xc0
 8003076:	025b      	lsls	r3, r3, #9
 8003078:	401a      	ands	r2, r3
 800307a:	23c0      	movs	r3, #192	; 0xc0
 800307c:	025b      	lsls	r3, r3, #9
 800307e:	429a      	cmp	r2, r3
 8003080:	d10b      	bne.n	800309a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003082:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	4013      	ands	r3, r2
 800308c:	d040      	beq.n	8003110 <HAL_RCC_OscConfig+0x5a8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d03c      	beq.n	8003110 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0e6      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01b      	beq.n	80030da <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80030a2:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80030a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a6:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0249      	lsls	r1, r1, #9
 80030ac:	430a      	orrs	r2, r1
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fd12 	bl	8001ad8 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ba:	f7fe fd0d 	bl	8001ad8 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0cd      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030cc:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80030ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	025b      	lsls	r3, r3, #9
 80030d4:	4013      	ands	r3, r2
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x552>
 80030d8:	e01b      	b.n	8003112 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80030da:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80030dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80030e0:	4943      	ldr	r1, [pc, #268]	; (80031f0 <HAL_RCC_OscConfig+0x688>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe fcf7 	bl	8001ad8 <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f0:	f7fe fcf2 	bl	8001ad8 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0b2      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	025b      	lsls	r3, r3, #9
 800310a:	4013      	ands	r3, r2
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x588>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003110:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d100      	bne.n	800311c <HAL_RCC_OscConfig+0x5b4>
 800311a:	e0a4      	b.n	8003266 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	220c      	movs	r2, #12
 8003122:	4013      	ands	r3, r2
 8003124:	2b08      	cmp	r3, #8
 8003126:	d100      	bne.n	800312a <HAL_RCC_OscConfig+0x5c2>
 8003128:	e078      	b.n	800321c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b02      	cmp	r3, #2
 8003130:	d14c      	bne.n	80031cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003138:	492e      	ldr	r1, [pc, #184]	; (80031f4 <HAL_RCC_OscConfig+0x68c>)
 800313a:	400a      	ands	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe fccb 	bl	8001ad8 <HAL_GetTick>
 8003142:	0003      	movs	r3, r0
 8003144:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fcc6 	bl	8001ad8 <HAL_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e086      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	049b      	lsls	r3, r3, #18
 8003162:	4013      	ands	r3, r2
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003166:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	220f      	movs	r2, #15
 800316c:	4393      	bics	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <HAL_RCC_OscConfig+0x690>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	431a      	orrs	r2, r3
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	0449      	lsls	r1, r1, #17
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fe fc99 	bl	8001ad8 <HAL_GetTick>
 80031a6:	0003      	movs	r3, r0
 80031a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe fc94 	bl	8001ad8 <HAL_GetTick>
 80031b0:	0002      	movs	r2, r0
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e054      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	049b      	lsls	r3, r3, #18
 80031c6:	4013      	ands	r3, r2
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x644>
 80031ca:	e04c      	b.n	8003266 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <HAL_RCC_OscConfig+0x67c>)
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <HAL_RCC_OscConfig+0x68c>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe fc7e 	bl	8001ad8 <HAL_GetTick>
 80031dc:	0003      	movs	r3, r0
 80031de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x6a6>
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	40021000 	.word	0x40021000
 80031e8:	00001388 	.word	0x00001388
 80031ec:	efffffff 	.word	0xefffffff
 80031f0:	fffeffff 	.word	0xfffeffff
 80031f4:	feffffff 	.word	0xfeffffff
 80031f8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe fc6c 	bl	8001ad8 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e02c      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_RCC_OscConfig+0x708>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	049b      	lsls	r3, r3, #18
 8003216:	4013      	ands	r3, r2
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x694>
 800321a:	e024      	b.n	8003266 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e01f      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_RCC_OscConfig+0x708>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_OscConfig+0x708>)
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	23c0      	movs	r3, #192	; 0xc0
 8003238:	025b      	lsls	r3, r3, #9
 800323a:	401a      	ands	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	429a      	cmp	r2, r3
 8003242:	d10e      	bne.n	8003262 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	220f      	movs	r2, #15
 8003248:	401a      	ands	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	23f0      	movs	r3, #240	; 0xf0
 8003256:	039b      	lsls	r3, r3, #14
 8003258:	401a      	ands	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b008      	add	sp, #32
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0bf      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b61      	ldr	r3, [pc, #388]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2201      	movs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d911      	bls.n	80032ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b5e      	ldr	r3, [pc, #376]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	4393      	bics	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	4b5b      	ldr	r3, [pc, #364]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	4013      	ands	r3, r2
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0a6      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2202      	movs	r2, #2
 80032c0:	4013      	ands	r3, r2
 80032c2:	d015      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2204      	movs	r2, #4
 80032ca:	4013      	ands	r3, r2
 80032cc:	d006      	beq.n	80032dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 80032d4:	21e0      	movs	r1, #224	; 0xe0
 80032d6:	00c9      	lsls	r1, r1, #3
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032dc:	4b4d      	ldr	r3, [pc, #308]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	22f0      	movs	r2, #240	; 0xf0
 80032e2:	4393      	bics	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	4b4a      	ldr	r3, [pc, #296]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	d04c      	beq.n	8003394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b44      	ldr	r3, [pc, #272]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	029b      	lsls	r3, r3, #10
 800330a:	4013      	ands	r3, r2
 800330c:	d120      	bne.n	8003350 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07a      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	049b      	lsls	r3, r3, #18
 8003322:	4013      	ands	r3, r2
 8003324:	d114      	bne.n	8003350 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06e      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 8003334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	025b      	lsls	r3, r3, #9
 800333a:	4013      	ands	r3, r2
 800333c:	d108      	bne.n	8003350 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e062      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2202      	movs	r2, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e05b      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003350:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	4393      	bics	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fe fbb8 	bl	8001ad8 <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336c:	e009      	b.n	8003382 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336e:	f7fe fbb3 	bl	8001ad8 <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <HAL_RCC_ClockConfig+0x1a4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e042      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	220c      	movs	r2, #12
 8003388:	401a      	ands	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1ec      	bne.n	800336e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2201      	movs	r2, #1
 800339a:	4013      	ands	r3, r2
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d211      	bcs.n	80033c6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4393      	bics	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x19c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e020      	b.n	8003408 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2204      	movs	r2, #4
 80033cc:	4013      	ands	r3, r2
 80033ce:	d009      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_RCC_ClockConfig+0x1a8>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033e4:	f000 f820 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e8:	0001      	movs	r1, r0
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1a0>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	220f      	movs	r2, #15
 80033f2:	4013      	ands	r3, r2
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1ac>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	000a      	movs	r2, r1
 80033fa:	40da      	lsrs	r2, r3
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1b0>)
 80033fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003400:	2003      	movs	r0, #3
 8003402:	f7fe fb23 	bl	8001a4c <HAL_InitTick>
  
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40022000 	.word	0x40022000
 8003414:	40021000 	.word	0x40021000
 8003418:	00001388 	.word	0x00001388
 800341c:	fffff8ff 	.word	0xfffff8ff
 8003420:	08007b8c 	.word	0x08007b8c
 8003424:	20001ccc 	.word	0x20001ccc

08003428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b08f      	sub	sp, #60	; 0x3c
 800342c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800342e:	2314      	movs	r3, #20
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	4a38      	ldr	r2, [pc, #224]	; (8003514 <HAL_RCC_GetSysClockFreq+0xec>)
 8003434:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003436:	c313      	stmia	r3!, {r0, r1, r4}
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	4a36      	ldr	r2, [pc, #216]	; (8003518 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003440:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003442:	c313      	stmia	r3!, {r0, r1, r4}
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344c:	2300      	movs	r3, #0
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003450:	2300      	movs	r3, #0
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800345c:	4b2f      	ldr	r3, [pc, #188]	; (800351c <HAL_RCC_GetSysClockFreq+0xf4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	220c      	movs	r2, #12
 8003466:	4013      	ands	r3, r2
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d047      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0xd4>
 800346c:	d849      	bhi.n	8003502 <HAL_RCC_GetSysClockFreq+0xda>
 800346e:	2b04      	cmp	r3, #4
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x50>
 8003472:	2b08      	cmp	r3, #8
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x56>
 8003476:	e044      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003478:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_RCC_GetSysClockFreq+0xf8>)
 800347a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800347c:	e044      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	0c9b      	lsrs	r3, r3, #18
 8003482:	220f      	movs	r2, #15
 8003484:	4013      	ands	r3, r2
 8003486:	2214      	movs	r2, #20
 8003488:	18ba      	adds	r2, r7, r2
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800348e:	4b23      	ldr	r3, [pc, #140]	; (800351c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	220f      	movs	r2, #15
 8003494:	4013      	ands	r3, r2
 8003496:	1d3a      	adds	r2, r7, #4
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800349c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800349e:	23c0      	movs	r3, #192	; 0xc0
 80034a0:	025b      	lsls	r3, r3, #9
 80034a2:	401a      	ands	r2, r3
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ae:	481c      	ldr	r0, [pc, #112]	; (8003520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034b0:	f7fc fe2a 	bl	8000108 <__udivsi3>
 80034b4:	0003      	movs	r3, r0
 80034b6:	001a      	movs	r2, r3
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	4353      	muls	r3, r2
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
 80034be:	e01a      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80034c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c2:	23c0      	movs	r3, #192	; 0xc0
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	401a      	ands	r2, r3
 80034c8:	23c0      	movs	r3, #192	; 0xc0
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d2:	4814      	ldr	r0, [pc, #80]	; (8003524 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034d4:	f7fc fe18 	bl	8000108 <__udivsi3>
 80034d8:	0003      	movs	r3, r0
 80034da:	001a      	movs	r2, r3
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	4353      	muls	r3, r2
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e6:	480e      	ldr	r0, [pc, #56]	; (8003520 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034e8:	f7fc fe0e 	bl	8000108 <__udivsi3>
 80034ec:	0003      	movs	r3, r0
 80034ee:	001a      	movs	r2, r3
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	4353      	muls	r3, r2
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034fa:	e005      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003500:	e002      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003504:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003506:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b00f      	add	sp, #60	; 0x3c
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	08007a5c 	.word	0x08007a5c
 8003518:	08007a6c 	.word	0x08007a6c
 800351c:	40021000 	.word	0x40021000
 8003520:	007a1200 	.word	0x007a1200
 8003524:	02dc6c00 	.word	0x02dc6c00

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b02      	ldr	r3, [pc, #8]	; (8003538 <HAL_RCC_GetHCLKFreq+0x10>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	20001ccc 	.word	0x20001ccc

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003540:	f7ff fff2 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003544:	0001      	movs	r1, r0
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	2207      	movs	r2, #7
 800354e:	4013      	ands	r3, r2
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	40d9      	lsrs	r1, r3
 8003556:	000b      	movs	r3, r1
}    
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	40021000 	.word	0x40021000
 8003564:	08007b9c 	.word	0x08007b9c

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	025b      	lsls	r3, r3, #9
 8003580:	4013      	ands	r3, r2
 8003582:	d100      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003584:	e08e      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003586:	2017      	movs	r0, #23
 8003588:	183b      	adds	r3, r7, r0
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b6e      	ldr	r3, [pc, #440]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	055b      	lsls	r3, r3, #21
 8003596:	4013      	ands	r3, r2
 8003598:	d110      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4b6b      	ldr	r3, [pc, #428]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	0549      	lsls	r1, r1, #21
 80035a4:	430a      	orrs	r2, r1
 80035a6:	61da      	str	r2, [r3, #28]
 80035a8:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	055b      	lsls	r3, r3, #21
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	183b      	adds	r3, r7, r0
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4013      	ands	r3, r2
 80035c6:	d11a      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c8:	4b60      	ldr	r3, [pc, #384]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	0049      	lsls	r1, r1, #1
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fa7f 	bl	8001ad8 <HAL_GetTick>
 80035da:	0003      	movs	r3, r0
 80035dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	e008      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fe fa7a 	bl	8001ad8 <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0a6      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b56      	ldr	r3, [pc, #344]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fe:	4b52      	ldr	r3, [pc, #328]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	23c0      	movs	r3, #192	; 0xc0
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4013      	ands	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d034      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	23c0      	movs	r3, #192	; 0xc0
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4013      	ands	r3, r2
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d02c      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003620:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a4a      	ldr	r2, [pc, #296]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003626:	4013      	ands	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	0249      	lsls	r1, r1, #9
 8003634:	430a      	orrs	r2, r1
 8003636:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800363e:	4945      	ldr	r1, [pc, #276]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003640:	400a      	ands	r2, r1
 8003642:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fa41 	bl	8001ad8 <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e009      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fa3c 	bl	8001ad8 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e067      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	2202      	movs	r2, #2
 8003676:	4013      	ands	r3, r2
 8003678:	d0f0      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367a:	4b33      	ldr	r3, [pc, #204]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a34      	ldr	r2, [pc, #208]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800368a:	430a      	orrs	r2, r1
 800368c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800368e:	2317      	movs	r3, #23
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800369e:	492f      	ldr	r1, [pc, #188]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80036a0:	400a      	ands	r2, r1
 80036a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2201      	movs	r2, #1
 80036aa:	4013      	ands	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	2203      	movs	r2, #3
 80036b4:	4393      	bics	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036be:	430a      	orrs	r2, r1
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2202      	movs	r2, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036dc:	430a      	orrs	r2, r1
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	02db      	lsls	r3, r3, #11
 80036e8:	4013      	ands	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80036fc:	430a      	orrs	r2, r1
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2220      	movs	r2, #32
 8003706:	4013      	ands	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	2210      	movs	r2, #16
 8003710:	4393      	bics	r3, r2
 8003712:	0019      	movs	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800371a:	430a      	orrs	r2, r1
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4013      	ands	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	4393      	bics	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800373a:	430a      	orrs	r2, r1
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	b006      	add	sp, #24
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	fffffcff 	.word	0xfffffcff
 8003754:	fffeffff 	.word	0xfffeffff
 8003758:	00001388 	.word	0x00001388
 800375c:	efffffff 	.word	0xefffffff
 8003760:	fffcffff 	.word	0xfffcffff
 8003764:	fff3ffff 	.word	0xfff3ffff

08003768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0a8      	b.n	80038cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	2382      	movs	r3, #130	; 0x82
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	429a      	cmp	r2, r3
 800378c:	d009      	beq.n	80037a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	61da      	str	r2, [r3, #28]
 8003794:	e005      	b.n	80037a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	225d      	movs	r2, #93	; 0x5d
 80037ac:	5c9b      	ldrb	r3, [r3, r2]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	225c      	movs	r2, #92	; 0x5c
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	0018      	movs	r0, r3
 80037c0:	f7fd ff9a 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	225d      	movs	r2, #93	; 0x5d
 80037c8:	2102      	movs	r1, #2
 80037ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2140      	movs	r1, #64	; 0x40
 80037d8:	438a      	bics	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	23e0      	movs	r3, #224	; 0xe0
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d902      	bls.n	80037ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e002      	b.n	80037f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	015b      	lsls	r3, r3, #5
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	23f0      	movs	r3, #240	; 0xf0
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d008      	beq.n	8003812 <HAL_SPI_Init+0xaa>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	23e0      	movs	r3, #224	; 0xe0
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	429a      	cmp	r2, r3
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	2382      	movs	r3, #130	; 0x82
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	401a      	ands	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	2384      	movs	r3, #132	; 0x84
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	400b      	ands	r3, r1
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2102      	movs	r1, #2
 800382e:	400b      	ands	r3, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2101      	movs	r1, #1
 8003838:	400b      	ands	r3, r1
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6999      	ldr	r1, [r3, #24]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	400b      	ands	r3, r1
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2138      	movs	r1, #56	; 0x38
 800384e:	400b      	ands	r3, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	400b      	ands	r3, r1
 800385a:	431a      	orrs	r2, r3
 800385c:	0011      	movs	r1, r2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	2204      	movs	r2, #4
 8003878:	401a      	ands	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2110      	movs	r1, #16
 8003880:	400b      	ands	r3, r1
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	2108      	movs	r1, #8
 800388a:	400b      	ands	r3, r1
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68d9      	ldr	r1, [r3, #12]
 8003892:	23f0      	movs	r3, #240	; 0xf0
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	400b      	ands	r3, r1
 8003898:	431a      	orrs	r2, r3
 800389a:	0011      	movs	r1, r2
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	015b      	lsls	r3, r3, #5
 80038a2:	401a      	ands	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4907      	ldr	r1, [pc, #28]	; (80038d4 <HAL_SPI_Init+0x16c>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	225d      	movs	r2, #93	; 0x5d
 80038c6:	2101      	movs	r1, #1
 80038c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	fffff7ff 	.word	0xfffff7ff

080038d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e8:	231f      	movs	r3, #31
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	225c      	movs	r2, #92	; 0x5c
 80038f4:	5c9b      	ldrb	r3, [r3, r2]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_SPI_Transmit+0x26>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e140      	b.n	8003b80 <HAL_SPI_Transmit+0x2a8>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	225c      	movs	r2, #92	; 0x5c
 8003902:	2101      	movs	r1, #1
 8003904:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003906:	f7fe f8e7 	bl	8001ad8 <HAL_GetTick>
 800390a:	0003      	movs	r3, r0
 800390c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800390e:	2316      	movs	r3, #22
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	1dba      	adds	r2, r7, #6
 8003914:	8812      	ldrh	r2, [r2, #0]
 8003916:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	225d      	movs	r2, #93	; 0x5d
 800391c:	5c9b      	ldrb	r3, [r3, r2]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d004      	beq.n	800392e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003924:	231f      	movs	r3, #31
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2202      	movs	r2, #2
 800392a:	701a      	strb	r2, [r3, #0]
    goto error;
 800392c:	e11d      	b.n	8003b6a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_SPI_Transmit+0x64>
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800393c:	231f      	movs	r3, #31
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
    goto error;
 8003944:	e111      	b.n	8003b6a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	225d      	movs	r2, #93	; 0x5d
 800394a:	2103      	movs	r1, #3
 800394c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1dba      	adds	r2, r7, #6
 800395e:	8812      	ldrh	r2, [r2, #0]
 8003960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1dba      	adds	r2, r7, #6
 8003966:	8812      	ldrh	r2, [r2, #0]
 8003968:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2244      	movs	r2, #68	; 0x44
 8003974:	2100      	movs	r1, #0
 8003976:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2246      	movs	r2, #70	; 0x46
 800397c:	2100      	movs	r1, #0
 800397e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	429a      	cmp	r2, r3
 8003996:	d110      	bne.n	80039ba <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2140      	movs	r1, #64	; 0x40
 80039a4:	438a      	bics	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	01c9      	lsls	r1, r1, #7
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d007      	beq.n	80039d8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2140      	movs	r1, #64	; 0x40
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	23e0      	movs	r3, #224	; 0xe0
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d94e      	bls.n	8003a82 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_SPI_Transmit+0x11e>
 80039ec:	2316      	movs	r3, #22
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d13f      	bne.n	8003a76 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	881a      	ldrh	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	1c9a      	adds	r2, r3, #2
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a1a:	e02c      	b.n	8003a76 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d112      	bne.n	8003a50 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	881a      	ldrh	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	1c9a      	adds	r2, r3, #2
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a4e:	e012      	b.n	8003a76 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a50:	f7fe f842 	bl	8001ad8 <HAL_GetTick>
 8003a54:	0002      	movs	r2, r0
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d802      	bhi.n	8003a66 <HAL_SPI_Transmit+0x18e>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	d102      	bne.n	8003a6c <HAL_SPI_Transmit+0x194>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003a6c:	231f      	movs	r3, #31
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2203      	movs	r2, #3
 8003a72:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a74:	e079      	b.n	8003b6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1cd      	bne.n	8003a1c <HAL_SPI_Transmit+0x144>
 8003a80:	e04f      	b.n	8003b22 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <HAL_SPI_Transmit+0x1bc>
 8003a8a:	2316      	movs	r3, #22
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d141      	bne.n	8003b18 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003aba:	e02d      	b.n	8003b18 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d113      	bne.n	8003af2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	7812      	ldrb	r2, [r2, #0]
 8003ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af0:	e012      	b.n	8003b18 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003af2:	f7fd fff1 	bl	8001ad8 <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d802      	bhi.n	8003b08 <HAL_SPI_Transmit+0x230>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	d102      	bne.n	8003b0e <HAL_SPI_Transmit+0x236>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003b0e:	231f      	movs	r3, #31
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2203      	movs	r2, #3
 8003b14:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b16:	e028      	b.n	8003b6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1cc      	bne.n	8003abc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f000 f95d 	bl	8003de8 <SPI_EndRxTxTransaction>
 8003b2e:	1e03      	subs	r3, r0, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003b5e:	231f      	movs	r3, #31
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e000      	b.n	8003b6a <HAL_SPI_Transmit+0x292>
  }

error:
 8003b68:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	225d      	movs	r2, #93	; 0x5d
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	225c      	movs	r2, #92	; 0x5c
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	781b      	ldrb	r3, [r3, #0]
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b008      	add	sp, #32
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b98:	f7fd ff9e 	bl	8001ad8 <HAL_GetTick>
 8003b9c:	0002      	movs	r2, r0
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	18d3      	adds	r3, r2, r3
 8003ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ba8:	f7fd ff96 	bl	8001ad8 <HAL_GetTick>
 8003bac:	0003      	movs	r3, r0
 8003bae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bb0:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	015b      	lsls	r3, r3, #5
 8003bb6:	0d1b      	lsrs	r3, r3, #20
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	4353      	muls	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bbe:	e058      	b.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	d055      	beq.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bc6:	f7fd ff87 	bl	8001ad8 <HAL_GetTick>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d902      	bls.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x54>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d142      	bne.n	8003c62 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	21e0      	movs	r1, #224	; 0xe0
 8003be8:	438a      	bics	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	2382      	movs	r3, #130	; 0x82
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d113      	bne.n	8003c20 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d005      	beq.n	8003c10 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d107      	bne.n	8003c20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2140      	movs	r1, #64	; 0x40
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	019b      	lsls	r3, r3, #6
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d110      	bne.n	8003c4e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	491a      	ldr	r1, [pc, #104]	; (8003ca0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	0189      	lsls	r1, r1, #6
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	225d      	movs	r2, #93	; 0x5d
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	225c      	movs	r2, #92	; 0x5c
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e017      	b.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	425a      	negs	r2, r3
 8003c82:	4153      	adcs	r3, r2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	001a      	movs	r2, r3
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d197      	bne.n	8003bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b008      	add	sp, #32
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	20001ccc 	.word	0x20001ccc
 8003ca0:	ffffdfff 	.word	0xffffdfff

08003ca4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cb2:	2317      	movs	r3, #23
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cba:	f7fd ff0d 	bl	8001ad8 <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	18d3      	adds	r3, r2, r3
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cca:	f7fd ff05 	bl	8001ad8 <HAL_GetTick>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cda:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	0013      	movs	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	00da      	lsls	r2, r3, #3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	0d1b      	lsrs	r3, r3, #20
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	4353      	muls	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cf0:	e068      	b.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	23c0      	movs	r3, #192	; 0xc0
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10a      	bne.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	2117      	movs	r1, #23
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	d055      	beq.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d18:	f7fd fede 	bl	8001ad8 <HAL_GetTick>
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d902      	bls.n	8003d2e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d142      	bne.n	8003db4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	21e0      	movs	r1, #224	; 0xe0
 8003d3a:	438a      	bics	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	2382      	movs	r3, #130	; 0x82
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d113      	bne.n	8003d72 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d005      	beq.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d107      	bne.n	8003d72 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	438a      	bics	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d110      	bne.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4916      	ldr	r1, [pc, #88]	; (8003de4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0189      	lsls	r1, r1, #6
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	225d      	movs	r2, #93	; 0x5d
 8003da4:	2101      	movs	r1, #1
 8003da6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	225c      	movs	r2, #92	; 0x5c
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e010      	b.n	8003dd6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d18e      	bne.n	8003cf2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b00a      	add	sp, #40	; 0x28
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20001ccc 	.word	0x20001ccc
 8003de4:	ffffdfff 	.word	0xffffdfff

08003de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	23c0      	movs	r3, #192	; 0xc0
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	0013      	movs	r3, r2
 8003e02:	2200      	movs	r2, #0
 8003e04:	f7ff ff4e 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d007      	beq.n	8003e1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	2220      	movs	r2, #32
 8003e12:	431a      	orrs	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e027      	b.n	8003e6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	0013      	movs	r3, r2
 8003e26:	2200      	movs	r2, #0
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	f7ff fead 	bl	8003b88 <SPI_WaitFlagStateUntilTimeout>
 8003e2e:	1e03      	subs	r3, r0, #0
 8003e30:	d007      	beq.n	8003e42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e36:	2220      	movs	r2, #32
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e014      	b.n	8003e6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	23c0      	movs	r3, #192	; 0xc0
 8003e46:	00d9      	lsls	r1, r3, #3
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	0013      	movs	r3, r2
 8003e50:	2200      	movs	r2, #0
 8003e52:	f7ff ff27 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d007      	beq.n	8003e6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	2220      	movs	r2, #32
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e000      	b.n	8003e6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b004      	add	sp, #16
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e042      	b.n	8003f0c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	223d      	movs	r2, #61	; 0x3d
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223c      	movs	r2, #60	; 0x3c
 8003e96:	2100      	movs	r1, #0
 8003e98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7fd fc77 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	223d      	movs	r2, #61	; 0x3d
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	f000 fad7 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2246      	movs	r2, #70	; 0x46
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	223e      	movs	r2, #62	; 0x3e
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	223f      	movs	r2, #63	; 0x3f
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2240      	movs	r2, #64	; 0x40
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2241      	movs	r2, #65	; 0x41
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2242      	movs	r2, #66	; 0x42
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2243      	movs	r2, #67	; 0x43
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2244      	movs	r2, #68	; 0x44
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2245      	movs	r2, #69	; 0x45
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	223d      	movs	r2, #61	; 0x3d
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e042      	b.n	8003fac <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	223d      	movs	r2, #61	; 0x3d
 8003f2a:	5c9b      	ldrb	r3, [r3, r2]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	223c      	movs	r2, #60	; 0x3c
 8003f36:	2100      	movs	r1, #0
 8003f38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 f839 	bl	8003fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	223d      	movs	r2, #61	; 0x3d
 8003f46:	2102      	movs	r1, #2
 8003f48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	0019      	movs	r1, r3
 8003f54:	0010      	movs	r0, r2
 8003f56:	f000 fa87 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2246      	movs	r2, #70	; 0x46
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223e      	movs	r2, #62	; 0x3e
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	223f      	movs	r2, #63	; 0x3f
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2240      	movs	r2, #64	; 0x40
 8003f76:	2101      	movs	r1, #1
 8003f78:	5499      	strb	r1, [r3, r2]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2241      	movs	r2, #65	; 0x41
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2242      	movs	r2, #66	; 0x42
 8003f86:	2101      	movs	r1, #1
 8003f88:	5499      	strb	r1, [r3, r2]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2243      	movs	r2, #67	; 0x43
 8003f8e:	2101      	movs	r1, #1
 8003f90:	5499      	strb	r1, [r3, r2]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2244      	movs	r2, #68	; 0x44
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2245      	movs	r2, #69	; 0x45
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	223d      	movs	r2, #61	; 0x3d
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d108      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0x22>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	223e      	movs	r2, #62	; 0x3e
 8003fd8:	5c9b      	ldrb	r3, [r3, r2]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	1e5a      	subs	r2, r3, #1
 8003fe0:	4193      	sbcs	r3, r2
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	e01f      	b.n	8004026 <HAL_TIM_PWM_Start+0x62>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d108      	bne.n	8003ffe <HAL_TIM_PWM_Start+0x3a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	223f      	movs	r2, #63	; 0x3f
 8003ff0:	5c9b      	ldrb	r3, [r3, r2]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	4193      	sbcs	r3, r2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_PWM_Start+0x62>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d108      	bne.n	8004016 <HAL_TIM_PWM_Start+0x52>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	1e5a      	subs	r2, r3, #1
 8004010:	4193      	sbcs	r3, r2
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e007      	b.n	8004026 <HAL_TIM_PWM_Start+0x62>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2241      	movs	r2, #65	; 0x41
 800401a:	5c9b      	ldrb	r3, [r3, r2]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	1e5a      	subs	r2, r3, #1
 8004022:	4193      	sbcs	r3, r2
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e074      	b.n	8004118 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0x7a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	223e      	movs	r2, #62	; 0x3e
 8004038:	2102      	movs	r1, #2
 800403a:	5499      	strb	r1, [r3, r2]
 800403c:	e013      	b.n	8004066 <HAL_TIM_PWM_Start+0xa2>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start+0x8a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	223f      	movs	r2, #63	; 0x3f
 8004048:	2102      	movs	r1, #2
 800404a:	5499      	strb	r1, [r3, r2]
 800404c:	e00b      	b.n	8004066 <HAL_TIM_PWM_Start+0xa2>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start+0x9a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	2102      	movs	r1, #2
 800405a:	5499      	strb	r1, [r3, r2]
 800405c:	e003      	b.n	8004066 <HAL_TIM_PWM_Start+0xa2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2241      	movs	r2, #65	; 0x41
 8004062:	2102      	movs	r1, #2
 8004064:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	0018      	movs	r0, r3
 8004070:	f000 fd10 	bl	8004a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <HAL_TIM_PWM_Start+0x15c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_TIM_PWM_Start+0xd8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_TIM_PWM_Start+0x160>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_TIM_PWM_Start+0xd8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a26      	ldr	r2, [pc, #152]	; (8004128 <HAL_TIM_PWM_Start+0x164>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_TIM_PWM_Start+0xd8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a25      	ldr	r2, [pc, #148]	; (800412c <HAL_TIM_PWM_Start+0x168>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_TIM_PWM_Start+0xdc>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_TIM_PWM_Start+0xde>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	0209      	lsls	r1, r1, #8
 80040b4:	430a      	orrs	r2, r1
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a18      	ldr	r2, [pc, #96]	; (8004120 <HAL_TIM_PWM_Start+0x15c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00f      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x11e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d009      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x11e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_TIM_PWM_Start+0x16c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x11e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_TIM_PWM_Start+0x160>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d111      	bne.n	8004106 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2207      	movs	r2, #7
 80040ea:	4013      	ands	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b06      	cmp	r3, #6
 80040f2:	d010      	beq.n	8004116 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2101      	movs	r1, #1
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	e007      	b.n	8004116 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b004      	add	sp, #16
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800
 8004130:	40000400 	.word	0x40000400

08004134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2317      	movs	r3, #23
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	223c      	movs	r2, #60	; 0x3c
 800414c:	5c9b      	ldrb	r3, [r3, r2]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004152:	2302      	movs	r3, #2
 8004154:	e0ad      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	223c      	movs	r2, #60	; 0x3c
 800415a:	2101      	movs	r1, #1
 800415c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	d100      	bne.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004164:	e076      	b.n	8004254 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d900      	bls.n	800416e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800416c:	e095      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x166>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d04e      	beq.n	8004212 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b08      	cmp	r3, #8
 8004178:	d900      	bls.n	800417c <HAL_TIM_PWM_ConfigChannel+0x48>
 800417a:	e08e      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x166>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d021      	beq.n	80041cc <HAL_TIM_PWM_ConfigChannel+0x98>
 8004188:	e087      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	0011      	movs	r1, r2
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f9e8 	bl	8004568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2108      	movs	r1, #8
 80041a4:	430a      	orrs	r2, r1
 80041a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2104      	movs	r1, #4
 80041b4:	438a      	bics	r2, r1
 80041b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6999      	ldr	r1, [r3, #24]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	619a      	str	r2, [r3, #24]
      break;
 80041ca:	e06b      	b.n	80042a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	0011      	movs	r1, r2
 80041d4:	0018      	movs	r0, r3
 80041d6:	f000 fa4f 	bl	8004678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	0109      	lsls	r1, r1, #4
 80041e8:	430a      	orrs	r2, r1
 80041ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4931      	ldr	r1, [pc, #196]	; (80042bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80041f8:	400a      	ands	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6999      	ldr	r1, [r3, #24]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	619a      	str	r2, [r3, #24]
      break;
 8004210:	e048      	b.n	80042a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	0011      	movs	r1, r2
 800421a:	0018      	movs	r0, r3
 800421c:	f000 fab0 	bl	8004780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2108      	movs	r1, #8
 800422c:	430a      	orrs	r2, r1
 800422e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2104      	movs	r1, #4
 800423c:	438a      	bics	r2, r1
 800423e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69d9      	ldr	r1, [r3, #28]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	61da      	str	r2, [r3, #28]
      break;
 8004252:	e027      	b.n	80042a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	0011      	movs	r1, r2
 800425c:	0018      	movs	r0, r3
 800425e:	f000 fb15 	bl	800488c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	0109      	lsls	r1, r1, #4
 8004270:	430a      	orrs	r2, r1
 8004272:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	490f      	ldr	r1, [pc, #60]	; (80042bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004280:	400a      	ands	r2, r1
 8004282:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69d9      	ldr	r1, [r3, #28]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	61da      	str	r2, [r3, #28]
      break;
 8004298:	e004      	b.n	80042a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800429a:	2317      	movs	r3, #23
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
      break;
 80042a2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	223c      	movs	r2, #60	; 0x3c
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

  return status;
 80042ac:	2317      	movs	r3, #23
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	781b      	ldrb	r3, [r3, #0]
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b006      	add	sp, #24
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	fffffbff 	.word	0xfffffbff

080042c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	230f      	movs	r3, #15
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223c      	movs	r2, #60	; 0x3c
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIM_ConfigClockSource+0x20>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0bc      	b.n	800445a <HAL_TIM_ConfigClockSource+0x19a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	223c      	movs	r2, #60	; 0x3c
 80042e4:	2101      	movs	r1, #1
 80042e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	223d      	movs	r2, #61	; 0x3d
 80042ec:	2102      	movs	r1, #2
 80042ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2277      	movs	r2, #119	; 0x77
 80042fc:	4393      	bics	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a58      	ldr	r2, [pc, #352]	; (8004464 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	0192      	lsls	r2, r2, #6
 8004318:	4293      	cmp	r3, r2
 800431a:	d040      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xde>
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	0192      	lsls	r2, r2, #6
 8004320:	4293      	cmp	r3, r2
 8004322:	d900      	bls.n	8004326 <HAL_TIM_ConfigClockSource+0x66>
 8004324:	e088      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	0152      	lsls	r2, r2, #5
 800432a:	4293      	cmp	r3, r2
 800432c:	d100      	bne.n	8004330 <HAL_TIM_ConfigClockSource+0x70>
 800432e:	e088      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x182>
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	0152      	lsls	r2, r2, #5
 8004334:	4293      	cmp	r3, r2
 8004336:	d900      	bls.n	800433a <HAL_TIM_ConfigClockSource+0x7a>
 8004338:	e07e      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 800433a:	2b70      	cmp	r3, #112	; 0x70
 800433c:	d018      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0xb0>
 800433e:	d900      	bls.n	8004342 <HAL_TIM_ConfigClockSource+0x82>
 8004340:	e07a      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004342:	2b60      	cmp	r3, #96	; 0x60
 8004344:	d04f      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x126>
 8004346:	d900      	bls.n	800434a <HAL_TIM_ConfigClockSource+0x8a>
 8004348:	e076      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 800434a:	2b50      	cmp	r3, #80	; 0x50
 800434c:	d03b      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x106>
 800434e:	d900      	bls.n	8004352 <HAL_TIM_ConfigClockSource+0x92>
 8004350:	e072      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d057      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x146>
 8004356:	d900      	bls.n	800435a <HAL_TIM_ConfigClockSource+0x9a>
 8004358:	e06e      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 800435a:	2b30      	cmp	r3, #48	; 0x30
 800435c:	d063      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 800435e:	d86b      	bhi.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004360:	2b20      	cmp	r3, #32
 8004362:	d060      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 8004364:	d868      	bhi.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d05d      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 800436a:	2b10      	cmp	r3, #16
 800436c:	d05b      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x166>
 800436e:	e063      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f000 fb68 	bl	8004a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2277      	movs	r2, #119	; 0x77
 8004390:	4313      	orrs	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
      break;
 800439c:	e052      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f000 fb51 	bl	8004a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	01c9      	lsls	r1, r1, #7
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
      break;
 80043c4:	e03e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	001a      	movs	r2, r3
 80043d4:	f000 fac4 	bl	8004960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2150      	movs	r1, #80	; 0x50
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 fb1e 	bl	8004a20 <TIM_ITRx_SetConfig>
      break;
 80043e4:	e02e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	001a      	movs	r2, r3
 80043f4:	f000 fae2 	bl	80049bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2160      	movs	r1, #96	; 0x60
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 fb0e 	bl	8004a20 <TIM_ITRx_SetConfig>
      break;
 8004404:	e01e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	001a      	movs	r2, r3
 8004414:	f000 faa4 	bl	8004960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2140      	movs	r1, #64	; 0x40
 800441e:	0018      	movs	r0, r3
 8004420:	f000 fafe 	bl	8004a20 <TIM_ITRx_SetConfig>
      break;
 8004424:	e00e      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0019      	movs	r1, r3
 8004430:	0010      	movs	r0, r2
 8004432:	f000 faf5 	bl	8004a20 <TIM_ITRx_SetConfig>
      break;
 8004436:	e005      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004438:	230f      	movs	r3, #15
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004442:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	223d      	movs	r2, #61	; 0x3d
 8004448:	2101      	movs	r1, #1
 800444a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	223c      	movs	r2, #60	; 0x3c
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

  return status;
 8004454:	230f      	movs	r3, #15
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781b      	ldrb	r3, [r3, #0]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	ffff00ff 	.word	0xffff00ff

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a34      	ldr	r2, [pc, #208]	; (800454c <TIM_Base_SetConfig+0xe4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d008      	beq.n	8004492 <TIM_Base_SetConfig+0x2a>
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	05db      	lsls	r3, r3, #23
 8004486:	429a      	cmp	r2, r3
 8004488:	d003      	beq.n	8004492 <TIM_Base_SetConfig+0x2a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a30      	ldr	r2, [pc, #192]	; (8004550 <TIM_Base_SetConfig+0xe8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2270      	movs	r2, #112	; 0x70
 8004496:	4393      	bics	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a29      	ldr	r2, [pc, #164]	; (800454c <TIM_Base_SetConfig+0xe4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <TIM_Base_SetConfig+0x76>
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	05db      	lsls	r3, r3, #23
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0x76>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a25      	ldr	r2, [pc, #148]	; (8004550 <TIM_Base_SetConfig+0xe8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0x76>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a24      	ldr	r2, [pc, #144]	; (8004554 <TIM_Base_SetConfig+0xec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x76>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a23      	ldr	r2, [pc, #140]	; (8004558 <TIM_Base_SetConfig+0xf0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x76>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a22      	ldr	r2, [pc, #136]	; (800455c <TIM_Base_SetConfig+0xf4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x76>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a21      	ldr	r2, [pc, #132]	; (8004560 <TIM_Base_SetConfig+0xf8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a20      	ldr	r2, [pc, #128]	; (8004564 <TIM_Base_SetConfig+0xfc>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	4393      	bics	r3, r2
 80044f6:	001a      	movs	r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <TIM_Base_SetConfig+0xe4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0xce>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <TIM_Base_SetConfig+0xf0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0xce>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a0c      	ldr	r2, [pc, #48]	; (800455c <TIM_Base_SetConfig+0xf4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0xce>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <TIM_Base_SetConfig+0xf8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d103      	bne.n	800453e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	615a      	str	r2, [r3, #20]
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b004      	add	sp, #16
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40000400 	.word	0x40000400
 8004554:	40002000 	.word	0x40002000
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800
 8004564:	fffffcff 	.word	0xfffffcff

08004568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	2201      	movs	r2, #1
 8004578:	4393      	bics	r3, r2
 800457a:	001a      	movs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2270      	movs	r2, #112	; 0x70
 8004596:	4393      	bics	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2203      	movs	r2, #3
 800459e:	4393      	bics	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2202      	movs	r2, #2
 80045b0:	4393      	bics	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a27      	ldr	r2, [pc, #156]	; (8004660 <TIM_OC1_SetConfig+0xf8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <TIM_OC1_SetConfig+0x76>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a26      	ldr	r2, [pc, #152]	; (8004664 <TIM_OC1_SetConfig+0xfc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <TIM_OC1_SetConfig+0x76>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a25      	ldr	r2, [pc, #148]	; (8004668 <TIM_OC1_SetConfig+0x100>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_OC1_SetConfig+0x76>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a24      	ldr	r2, [pc, #144]	; (800466c <TIM_OC1_SetConfig+0x104>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10c      	bne.n	80045f8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2208      	movs	r2, #8
 80045e2:	4393      	bics	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2204      	movs	r2, #4
 80045f4:	4393      	bics	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a19      	ldr	r2, [pc, #100]	; (8004660 <TIM_OC1_SetConfig+0xf8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00b      	beq.n	8004618 <TIM_OC1_SetConfig+0xb0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a18      	ldr	r2, [pc, #96]	; (8004664 <TIM_OC1_SetConfig+0xfc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_OC1_SetConfig+0xb0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a17      	ldr	r2, [pc, #92]	; (8004668 <TIM_OC1_SetConfig+0x100>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC1_SetConfig+0xb0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a16      	ldr	r2, [pc, #88]	; (800466c <TIM_OC1_SetConfig+0x104>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d111      	bne.n	800463c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4a15      	ldr	r2, [pc, #84]	; (8004670 <TIM_OC1_SetConfig+0x108>)
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4a14      	ldr	r2, [pc, #80]	; (8004674 <TIM_OC1_SetConfig+0x10c>)
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b006      	add	sp, #24
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800
 8004670:	fffffeff 	.word	0xfffffeff
 8004674:	fffffdff 	.word	0xfffffdff

08004678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	2210      	movs	r2, #16
 8004688:	4393      	bics	r3, r2
 800468a:	001a      	movs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a2e      	ldr	r2, [pc, #184]	; (8004760 <TIM_OC2_SetConfig+0xe8>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <TIM_OC2_SetConfig+0xec>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2220      	movs	r2, #32
 80046c2:	4393      	bics	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a24      	ldr	r2, [pc, #144]	; (8004768 <TIM_OC2_SetConfig+0xf0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10d      	bne.n	80046f6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	4393      	bics	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2240      	movs	r2, #64	; 0x40
 80046f2:	4393      	bics	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <TIM_OC2_SetConfig+0xf0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_OC2_SetConfig+0x9e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1a      	ldr	r2, [pc, #104]	; (800476c <TIM_OC2_SetConfig+0xf4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_OC2_SetConfig+0x9e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <TIM_OC2_SetConfig+0xf8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_OC2_SetConfig+0x9e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a18      	ldr	r2, [pc, #96]	; (8004774 <TIM_OC2_SetConfig+0xfc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d113      	bne.n	800473e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4a17      	ldr	r2, [pc, #92]	; (8004778 <TIM_OC2_SetConfig+0x100>)
 800471a:	4013      	ands	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <TIM_OC2_SetConfig+0x104>)
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b006      	add	sp, #24
 800475e:	bd80      	pop	{r7, pc}
 8004760:	ffff8fff 	.word	0xffff8fff
 8004764:	fffffcff 	.word	0xfffffcff
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40014000 	.word	0x40014000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800
 8004778:	fffffbff 	.word	0xfffffbff
 800477c:	fffff7ff 	.word	0xfffff7ff

08004780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	4a35      	ldr	r2, [pc, #212]	; (8004864 <TIM_OC3_SetConfig+0xe4>)
 8004790:	401a      	ands	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2270      	movs	r2, #112	; 0x70
 80047ac:	4393      	bics	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2203      	movs	r2, #3
 80047b4:	4393      	bics	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4a28      	ldr	r2, [pc, #160]	; (8004868 <TIM_OC3_SetConfig+0xe8>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a24      	ldr	r2, [pc, #144]	; (800486c <TIM_OC3_SetConfig+0xec>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10d      	bne.n	80047fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4a23      	ldr	r2, [pc, #140]	; (8004870 <TIM_OC3_SetConfig+0xf0>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <TIM_OC3_SetConfig+0xf4>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1b      	ldr	r2, [pc, #108]	; (800486c <TIM_OC3_SetConfig+0xec>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00b      	beq.n	800481a <TIM_OC3_SetConfig+0x9a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <TIM_OC3_SetConfig+0xf8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <TIM_OC3_SetConfig+0x9a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1b      	ldr	r2, [pc, #108]	; (800487c <TIM_OC3_SetConfig+0xfc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_OC3_SetConfig+0x9a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1a      	ldr	r2, [pc, #104]	; (8004880 <TIM_OC3_SetConfig+0x100>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d113      	bne.n	8004842 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <TIM_OC3_SetConfig+0x104>)
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4a18      	ldr	r2, [pc, #96]	; (8004888 <TIM_OC3_SetConfig+0x108>)
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b006      	add	sp, #24
 8004862:	bd80      	pop	{r7, pc}
 8004864:	fffffeff 	.word	0xfffffeff
 8004868:	fffffdff 	.word	0xfffffdff
 800486c:	40012c00 	.word	0x40012c00
 8004870:	fffff7ff 	.word	0xfffff7ff
 8004874:	fffffbff 	.word	0xfffffbff
 8004878:	40014000 	.word	0x40014000
 800487c:	40014400 	.word	0x40014400
 8004880:	40014800 	.word	0x40014800
 8004884:	ffffefff 	.word	0xffffefff
 8004888:	ffffdfff 	.word	0xffffdfff

0800488c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4a28      	ldr	r2, [pc, #160]	; (800493c <TIM_OC4_SetConfig+0xb0>)
 800489c:	401a      	ands	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a22      	ldr	r2, [pc, #136]	; (8004940 <TIM_OC4_SetConfig+0xb4>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a21      	ldr	r2, [pc, #132]	; (8004944 <TIM_OC4_SetConfig+0xb8>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <TIM_OC4_SetConfig+0xbc>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	031b      	lsls	r3, r3, #12
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a19      	ldr	r2, [pc, #100]	; (800494c <TIM_OC4_SetConfig+0xc0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_OC4_SetConfig+0x78>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a18      	ldr	r2, [pc, #96]	; (8004950 <TIM_OC4_SetConfig+0xc4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_OC4_SetConfig+0x78>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a17      	ldr	r2, [pc, #92]	; (8004954 <TIM_OC4_SetConfig+0xc8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_OC4_SetConfig+0x78>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a16      	ldr	r2, [pc, #88]	; (8004958 <TIM_OC4_SetConfig+0xcc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d109      	bne.n	8004918 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <TIM_OC4_SetConfig+0xd0>)
 8004908:	4013      	ands	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b006      	add	sp, #24
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	ffffefff 	.word	0xffffefff
 8004940:	ffff8fff 	.word	0xffff8fff
 8004944:	fffffcff 	.word	0xfffffcff
 8004948:	ffffdfff 	.word	0xffffdfff
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800
 800495c:	ffffbfff 	.word	0xffffbfff

08004960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	2201      	movs	r2, #1
 8004978:	4393      	bics	r3, r2
 800497a:	001a      	movs	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	22f0      	movs	r2, #240	; 0xf0
 800498a:	4393      	bics	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	220a      	movs	r2, #10
 800499c:	4393      	bics	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	621a      	str	r2, [r3, #32]
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b006      	add	sp, #24
 80049ba:	bd80      	pop	{r7, pc}

080049bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	2210      	movs	r2, #16
 80049ce:	4393      	bics	r3, r2
 80049d0:	001a      	movs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <TIM_TI2_ConfigInputStage+0x60>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	031b      	lsls	r3, r3, #12
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	22a0      	movs	r2, #160	; 0xa0
 80049f8:	4393      	bics	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b006      	add	sp, #24
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	ffff0fff 	.word	0xffff0fff

08004a20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2270      	movs	r2, #112	; 0x70
 8004a34:	4393      	bics	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	2207      	movs	r2, #7
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	609a      	str	r2, [r3, #8]
}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b004      	add	sp, #16
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <TIM_ETR_SetConfig+0x3c>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	021a      	lsls	r2, r3, #8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	609a      	str	r2, [r3, #8]
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b006      	add	sp, #24
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	ffff00ff 	.word	0xffff00ff

08004a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	221f      	movs	r2, #31
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	0013      	movs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	43d2      	mvns	r2, r2
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	211f      	movs	r1, #31
 8004ac4:	400b      	ands	r3, r1
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4099      	lsls	r1, r3
 8004aca:	000b      	movs	r3, r1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b006      	add	sp, #24
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	223c      	movs	r2, #60	; 0x3c
 8004aea:	5c9b      	ldrb	r3, [r3, r2]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e047      	b.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	223c      	movs	r2, #60	; 0x3c
 8004af8:	2101      	movs	r1, #1
 8004afa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	223d      	movs	r2, #61	; 0x3d
 8004b00:	2102      	movs	r1, #2
 8004b02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2270      	movs	r2, #112	; 0x70
 8004b18:	4393      	bics	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00f      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	05db      	lsls	r3, r3, #23
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d009      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10c      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	4393      	bics	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	223d      	movs	r2, #61	; 0x3d
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	223c      	movs	r2, #60	; 0x3c
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40014000 	.word	0x40014000

08004b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e044      	b.n	8004c34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d107      	bne.n	8004bc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2274      	movs	r2, #116	; 0x74
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7fc fe89 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2224      	movs	r2, #36	; 0x24
 8004bc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 f830 	bl	8004c40 <UART_SetConfig>
 8004be0:	0003      	movs	r3, r0
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e024      	b.n	8004c34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 fa0b 	bl	8005010 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	490d      	ldr	r1, [pc, #52]	; (8004c3c <HAL_UART_Init+0xa4>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	212a      	movs	r1, #42	; 0x2a
 8004c16:	438a      	bics	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 faa3 	bl	8005178 <UART_CheckIdleState>
 8004c32:	0003      	movs	r3, r0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	ffffb7ff 	.word	0xffffb7ff

08004c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c48:	231e      	movs	r3, #30
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4abe      	ldr	r2, [pc, #760]	; (8004f68 <UART_SetConfig+0x328>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	0019      	movs	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4ab9      	ldr	r2, [pc, #740]	; (8004f6c <UART_SetConfig+0x32c>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4ab0      	ldr	r2, [pc, #704]	; (8004f70 <UART_SetConfig+0x330>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4aac      	ldr	r2, [pc, #688]	; (8004f74 <UART_SetConfig+0x334>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d127      	bne.n	8004d16 <UART_SetConfig+0xd6>
 8004cc6:	4bac      	ldr	r3, [pc, #688]	; (8004f78 <UART_SetConfig+0x338>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	2203      	movs	r2, #3
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d00d      	beq.n	8004cee <UART_SetConfig+0xae>
 8004cd2:	d81b      	bhi.n	8004d0c <UART_SetConfig+0xcc>
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d014      	beq.n	8004d02 <UART_SetConfig+0xc2>
 8004cd8:	d818      	bhi.n	8004d0c <UART_SetConfig+0xcc>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <UART_SetConfig+0xa4>
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d00a      	beq.n	8004cf8 <UART_SetConfig+0xb8>
 8004ce2:	e013      	b.n	8004d0c <UART_SetConfig+0xcc>
 8004ce4:	231f      	movs	r3, #31
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e0bd      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004cee:	231f      	movs	r3, #31
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	e0b8      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004cf8:	231f      	movs	r3, #31
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e0b3      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d02:	231f      	movs	r3, #31
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	2208      	movs	r2, #8
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e0ae      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d0c:	231f      	movs	r3, #31
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2210      	movs	r2, #16
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e0a9      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a98      	ldr	r2, [pc, #608]	; (8004f7c <UART_SetConfig+0x33c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d134      	bne.n	8004d8a <UART_SetConfig+0x14a>
 8004d20:	4b95      	ldr	r3, [pc, #596]	; (8004f78 <UART_SetConfig+0x338>)
 8004d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d24:	23c0      	movs	r3, #192	; 0xc0
 8004d26:	029b      	lsls	r3, r3, #10
 8004d28:	4013      	ands	r3, r2
 8004d2a:	22c0      	movs	r2, #192	; 0xc0
 8004d2c:	0292      	lsls	r2, r2, #10
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d017      	beq.n	8004d62 <UART_SetConfig+0x122>
 8004d32:	22c0      	movs	r2, #192	; 0xc0
 8004d34:	0292      	lsls	r2, r2, #10
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d822      	bhi.n	8004d80 <UART_SetConfig+0x140>
 8004d3a:	2280      	movs	r2, #128	; 0x80
 8004d3c:	0292      	lsls	r2, r2, #10
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d019      	beq.n	8004d76 <UART_SetConfig+0x136>
 8004d42:	2280      	movs	r2, #128	; 0x80
 8004d44:	0292      	lsls	r2, r2, #10
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d81a      	bhi.n	8004d80 <UART_SetConfig+0x140>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <UART_SetConfig+0x118>
 8004d4e:	2280      	movs	r2, #128	; 0x80
 8004d50:	0252      	lsls	r2, r2, #9
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00a      	beq.n	8004d6c <UART_SetConfig+0x12c>
 8004d56:	e013      	b.n	8004d80 <UART_SetConfig+0x140>
 8004d58:	231f      	movs	r3, #31
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e083      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d62:	231f      	movs	r3, #31
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e07e      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d6c:	231f      	movs	r3, #31
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2204      	movs	r2, #4
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e079      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d76:	231f      	movs	r3, #31
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e074      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d80:	231f      	movs	r3, #31
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2210      	movs	r2, #16
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e06f      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a7c      	ldr	r2, [pc, #496]	; (8004f80 <UART_SetConfig+0x340>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d134      	bne.n	8004dfe <UART_SetConfig+0x1be>
 8004d94:	4b78      	ldr	r3, [pc, #480]	; (8004f78 <UART_SetConfig+0x338>)
 8004d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d98:	23c0      	movs	r3, #192	; 0xc0
 8004d9a:	031b      	lsls	r3, r3, #12
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	22c0      	movs	r2, #192	; 0xc0
 8004da0:	0312      	lsls	r2, r2, #12
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d017      	beq.n	8004dd6 <UART_SetConfig+0x196>
 8004da6:	22c0      	movs	r2, #192	; 0xc0
 8004da8:	0312      	lsls	r2, r2, #12
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d822      	bhi.n	8004df4 <UART_SetConfig+0x1b4>
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	0312      	lsls	r2, r2, #12
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d019      	beq.n	8004dea <UART_SetConfig+0x1aa>
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	0312      	lsls	r2, r2, #12
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d81a      	bhi.n	8004df4 <UART_SetConfig+0x1b4>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <UART_SetConfig+0x18c>
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	02d2      	lsls	r2, r2, #11
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00a      	beq.n	8004de0 <UART_SetConfig+0x1a0>
 8004dca:	e013      	b.n	8004df4 <UART_SetConfig+0x1b4>
 8004dcc:	231f      	movs	r3, #31
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e049      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004dd6:	231f      	movs	r3, #31
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	2202      	movs	r2, #2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e044      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004de0:	231f      	movs	r3, #31
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	2204      	movs	r2, #4
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e03f      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004dea:	231f      	movs	r3, #31
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	2208      	movs	r2, #8
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e03a      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004df4:	231f      	movs	r3, #31
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	2210      	movs	r2, #16
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	e035      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a60      	ldr	r2, [pc, #384]	; (8004f84 <UART_SetConfig+0x344>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d104      	bne.n	8004e12 <UART_SetConfig+0x1d2>
 8004e08:	231f      	movs	r3, #31
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e02b      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5c      	ldr	r2, [pc, #368]	; (8004f88 <UART_SetConfig+0x348>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d104      	bne.n	8004e26 <UART_SetConfig+0x1e6>
 8004e1c:	231f      	movs	r3, #31
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e021      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a58      	ldr	r2, [pc, #352]	; (8004f8c <UART_SetConfig+0x34c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d104      	bne.n	8004e3a <UART_SetConfig+0x1fa>
 8004e30:	231f      	movs	r3, #31
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e017      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a54      	ldr	r2, [pc, #336]	; (8004f90 <UART_SetConfig+0x350>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d104      	bne.n	8004e4e <UART_SetConfig+0x20e>
 8004e44:	231f      	movs	r3, #31
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	e00d      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a50      	ldr	r2, [pc, #320]	; (8004f94 <UART_SetConfig+0x354>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d104      	bne.n	8004e62 <UART_SetConfig+0x222>
 8004e58:	231f      	movs	r3, #31
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	e003      	b.n	8004e6a <UART_SetConfig+0x22a>
 8004e62:	231f      	movs	r3, #31
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	2210      	movs	r2, #16
 8004e68:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d15d      	bne.n	8004f32 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8004e76:	231f      	movs	r3, #31
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d015      	beq.n	8004eac <UART_SetConfig+0x26c>
 8004e80:	dc18      	bgt.n	8004eb4 <UART_SetConfig+0x274>
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d00d      	beq.n	8004ea2 <UART_SetConfig+0x262>
 8004e86:	dc15      	bgt.n	8004eb4 <UART_SetConfig+0x274>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <UART_SetConfig+0x252>
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d005      	beq.n	8004e9c <UART_SetConfig+0x25c>
 8004e90:	e010      	b.n	8004eb4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e92:	f7fe fb53 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004e96:	0003      	movs	r3, r0
 8004e98:	61bb      	str	r3, [r7, #24]
        break;
 8004e9a:	e012      	b.n	8004ec2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e9c:	4b3e      	ldr	r3, [pc, #248]	; (8004f98 <UART_SetConfig+0x358>)
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e00f      	b.n	8004ec2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea2:	f7fe fac1 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	61bb      	str	r3, [r7, #24]
        break;
 8004eaa:	e00a      	b.n	8004ec2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	61bb      	str	r3, [r7, #24]
        break;
 8004eb2:	e006      	b.n	8004ec2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eb8:	231e      	movs	r3, #30
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]
        break;
 8004ec0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d100      	bne.n	8004eca <UART_SetConfig+0x28a>
 8004ec8:	e095      	b.n	8004ff6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	005a      	lsls	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	18d2      	adds	r2, r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	0019      	movs	r1, r3
 8004edc:	0010      	movs	r0, r2
 8004ede:	f7fb f913 	bl	8000108 <__udivsi3>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	d91c      	bls.n	8004f28 <UART_SetConfig+0x2e8>
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	025b      	lsls	r3, r3, #9
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d217      	bcs.n	8004f28 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	200e      	movs	r0, #14
 8004efe:	183b      	adds	r3, r7, r0
 8004f00:	210f      	movs	r1, #15
 8004f02:	438a      	bics	r2, r1
 8004f04:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	4013      	ands	r3, r2
 8004f10:	b299      	uxth	r1, r3
 8004f12:	183b      	adds	r3, r7, r0
 8004f14:	183a      	adds	r2, r7, r0
 8004f16:	8812      	ldrh	r2, [r2, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	183a      	adds	r2, r7, r0
 8004f22:	8812      	ldrh	r2, [r2, #0]
 8004f24:	60da      	str	r2, [r3, #12]
 8004f26:	e066      	b.n	8004ff6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004f28:	231e      	movs	r3, #30
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e061      	b.n	8004ff6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f32:	231f      	movs	r3, #31
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d02f      	beq.n	8004f9c <UART_SetConfig+0x35c>
 8004f3c:	dc32      	bgt.n	8004fa4 <UART_SetConfig+0x364>
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d00d      	beq.n	8004f5e <UART_SetConfig+0x31e>
 8004f42:	dc2f      	bgt.n	8004fa4 <UART_SetConfig+0x364>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <UART_SetConfig+0x30e>
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d005      	beq.n	8004f58 <UART_SetConfig+0x318>
 8004f4c:	e02a      	b.n	8004fa4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4e:	f7fe faf5 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004f52:	0003      	movs	r3, r0
 8004f54:	61bb      	str	r3, [r7, #24]
        break;
 8004f56:	e02c      	b.n	8004fb2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <UART_SetConfig+0x358>)
 8004f5a:	61bb      	str	r3, [r7, #24]
        break;
 8004f5c:	e029      	b.n	8004fb2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fe fa63 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8004f62:	0003      	movs	r3, r0
 8004f64:	61bb      	str	r3, [r7, #24]
        break;
 8004f66:	e024      	b.n	8004fb2 <UART_SetConfig+0x372>
 8004f68:	efff69f3 	.word	0xefff69f3
 8004f6c:	ffffcfff 	.word	0xffffcfff
 8004f70:	fffff4ff 	.word	0xfffff4ff
 8004f74:	40013800 	.word	0x40013800
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40004400 	.word	0x40004400
 8004f80:	40004800 	.word	0x40004800
 8004f84:	40004c00 	.word	0x40004c00
 8004f88:	40005000 	.word	0x40005000
 8004f8c:	40011400 	.word	0x40011400
 8004f90:	40011800 	.word	0x40011800
 8004f94:	40011c00 	.word	0x40011c00
 8004f98:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	61bb      	str	r3, [r7, #24]
        break;
 8004fa2:	e006      	b.n	8004fb2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fa8:	231e      	movs	r3, #30
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
        break;
 8004fb0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01e      	beq.n	8004ff6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	085a      	lsrs	r2, r3, #1
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	18d2      	adds	r2, r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	0010      	movs	r0, r2
 8004fca:	f7fb f89d 	bl	8000108 <__udivsi3>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	d909      	bls.n	8004fee <UART_SetConfig+0x3ae>
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	025b      	lsls	r3, r3, #9
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d204      	bcs.n	8004fee <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	60da      	str	r2, [r3, #12]
 8004fec:	e003      	b.n	8004ff6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004fee:	231e      	movs	r3, #30
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005002:	231e      	movs	r3, #30
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b008      	add	sp, #32
 800500e:	bd80      	pop	{r7, pc}

08005010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2201      	movs	r2, #1
 800501e:	4013      	ands	r3, r2
 8005020:	d00b      	beq.n	800503a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a4a      	ldr	r2, [pc, #296]	; (8005154 <UART_AdvFeatureConfig+0x144>)
 800502a:	4013      	ands	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2202      	movs	r2, #2
 8005040:	4013      	ands	r3, r2
 8005042:	d00b      	beq.n	800505c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a43      	ldr	r2, [pc, #268]	; (8005158 <UART_AdvFeatureConfig+0x148>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2204      	movs	r2, #4
 8005062:	4013      	ands	r3, r2
 8005064:	d00b      	beq.n	800507e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a3b      	ldr	r2, [pc, #236]	; (800515c <UART_AdvFeatureConfig+0x14c>)
 800506e:	4013      	ands	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2208      	movs	r2, #8
 8005084:	4013      	ands	r3, r2
 8005086:	d00b      	beq.n	80050a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4a34      	ldr	r2, [pc, #208]	; (8005160 <UART_AdvFeatureConfig+0x150>)
 8005090:	4013      	ands	r3, r2
 8005092:	0019      	movs	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2210      	movs	r2, #16
 80050a6:	4013      	ands	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <UART_AdvFeatureConfig+0x154>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	0019      	movs	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2220      	movs	r2, #32
 80050c8:	4013      	ands	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	4a25      	ldr	r2, [pc, #148]	; (8005168 <UART_AdvFeatureConfig+0x158>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	4013      	ands	r3, r2
 80050ec:	d01d      	beq.n	800512a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	; (800516c <UART_AdvFeatureConfig+0x15c>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	035b      	lsls	r3, r3, #13
 800510e:	429a      	cmp	r2, r3
 8005110:	d10b      	bne.n	800512a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <UART_AdvFeatureConfig+0x160>)
 800511a:	4013      	ands	r3, r2
 800511c:	0019      	movs	r1, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2280      	movs	r2, #128	; 0x80
 8005130:	4013      	ands	r3, r2
 8005132:	d00b      	beq.n	800514c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a0e      	ldr	r2, [pc, #56]	; (8005174 <UART_AdvFeatureConfig+0x164>)
 800513c:	4013      	ands	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}
 8005154:	fffdffff 	.word	0xfffdffff
 8005158:	fffeffff 	.word	0xfffeffff
 800515c:	fffbffff 	.word	0xfffbffff
 8005160:	ffff7fff 	.word	0xffff7fff
 8005164:	ffffefff 	.word	0xffffefff
 8005168:	ffffdfff 	.word	0xffffdfff
 800516c:	ffefffff 	.word	0xffefffff
 8005170:	ff9fffff 	.word	0xff9fffff
 8005174:	fff7ffff 	.word	0xfff7ffff

08005178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2280      	movs	r2, #128	; 0x80
 8005184:	2100      	movs	r1, #0
 8005186:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005188:	f7fc fca6 	bl	8001ad8 <HAL_GetTick>
 800518c:	0003      	movs	r3, r0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2208      	movs	r2, #8
 8005198:	4013      	ands	r3, r2
 800519a:	2b08      	cmp	r3, #8
 800519c:	d10c      	bne.n	80051b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	0391      	lsls	r1, r2, #14
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <UART_CheckIdleState+0x8c>)
 80051a8:	9200      	str	r2, [sp, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f000 f82c 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 80051b0:	1e03      	subs	r3, r0, #0
 80051b2:	d001      	beq.n	80051b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e021      	b.n	80051fc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2204      	movs	r2, #4
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d10c      	bne.n	80051e0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2280      	movs	r2, #128	; 0x80
 80051ca:	03d1      	lsls	r1, r2, #15
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <UART_CheckIdleState+0x8c>)
 80051d0:	9200      	str	r2, [sp, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f000 f818 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d001      	beq.n	80051e0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e00d      	b.n	80051fc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2274      	movs	r2, #116	; 0x74
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b004      	add	sp, #16
 8005202:	bd80      	pop	{r7, pc}
 8005204:	01ffffff 	.word	0x01ffffff

08005208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b094      	sub	sp, #80	; 0x50
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	1dfb      	adds	r3, r7, #7
 8005216:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	e0a3      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521c:	3301      	adds	r3, #1
 800521e:	d100      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005220:	e09f      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fc fc59 	bl	8001ad8 <HAL_GetTick>
 8005226:	0002      	movs	r2, r0
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <UART_WaitOnFlagUntilTimeout+0x30>
 8005232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005234:	2b00      	cmp	r3, #0
 8005236:	d13d      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005238:	f3ef 8310 	mrs	r3, PRIMASK
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
 8005242:	2301      	movs	r3, #1
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	f383 8810 	msr	PRIMASK, r3
}
 800524c:	46c0      	nop			; (mov r8, r8)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	494c      	ldr	r1, [pc, #304]	; (800538c <UART_WaitOnFlagUntilTimeout+0x184>)
 800525a:	400a      	ands	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	f383 8810 	msr	PRIMASK, r3
}
 8005268:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526a:	f3ef 8310 	mrs	r3, PRIMASK
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
 8005274:	2301      	movs	r3, #1
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2101      	movs	r1, #1
 800528c:	438a      	bics	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005296:	f383 8810 	msr	PRIMASK, r3
}
 800529a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2274      	movs	r2, #116	; 0x74
 80052ac:	2100      	movs	r1, #0
 80052ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e067      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2204      	movs	r2, #4
 80052bc:	4013      	ands	r3, r2
 80052be:	d050      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	401a      	ands	r2, r3
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d146      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2280      	movs	r2, #128	; 0x80
 80052da:	0112      	lsls	r2, r2, #4
 80052dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052de:	f3ef 8310 	mrs	r3, PRIMASK
 80052e2:	613b      	str	r3, [r7, #16]
  return(result);
 80052e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f383 8810 	msr	PRIMASK, r3
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4923      	ldr	r1, [pc, #140]	; (800538c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005300:	400a      	ands	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005306:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f383 8810 	msr	PRIMASK, r3
}
 800530e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005310:	f3ef 8310 	mrs	r3, PRIMASK
 8005314:	61fb      	str	r3, [r7, #28]
  return(result);
 8005316:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	64bb      	str	r3, [r7, #72]	; 0x48
 800531a:	2301      	movs	r3, #1
 800531c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	438a      	bics	r2, r1
 8005334:	609a      	str	r2, [r3, #8]
 8005336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	f383 8810 	msr	PRIMASK, r3
}
 8005340:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	2120      	movs	r1, #32
 8005354:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2274      	movs	r2, #116	; 0x74
 800535a:	2100      	movs	r1, #0
 800535c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e010      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	425a      	negs	r2, r3
 8005372:	4153      	adcs	r3, r2
 8005374:	b2db      	uxtb	r3, r3
 8005376:	001a      	movs	r2, r3
 8005378:	1dfb      	adds	r3, r7, #7
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d100      	bne.n	8005382 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005380:	e74b      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b014      	add	sp, #80	; 0x50
 800538a:	bd80      	pop	{r7, pc}
 800538c:	fffffe5f 	.word	0xfffffe5f

08005390 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005396:	f3ef 8305 	mrs	r3, IPSR
 800539a:	60bb      	str	r3, [r7, #8]
  return(result);
 800539c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a2:	f3ef 8310 	mrs	r3, PRIMASK
 80053a6:	607b      	str	r3, [r7, #4]
  return(result);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <osKernelInitialize+0x2e>
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <osKernelInitialize+0x54>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d103      	bne.n	80053be <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80053b6:	2306      	movs	r3, #6
 80053b8:	425b      	negs	r3, r3
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e00c      	b.n	80053d8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <osKernelInitialize+0x54>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80053c6:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <osKernelInitialize+0x54>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e002      	b.n	80053d8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80053d2:	2301      	movs	r3, #1
 80053d4:	425b      	negs	r3, r3
 80053d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053d8:	68fb      	ldr	r3, [r7, #12]
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b004      	add	sp, #16
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	20001f94 	.word	0x20001f94

080053e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ee:	f3ef 8305 	mrs	r3, IPSR
 80053f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80053f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fa:	f3ef 8310 	mrs	r3, PRIMASK
 80053fe:	607b      	str	r3, [r7, #4]
  return(result);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <osKernelStart+0x2e>
 8005406:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <osKernelStart+0x58>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d103      	bne.n	8005416 <osKernelStart+0x2e>
    stat = osErrorISR;
 800540e:	2306      	movs	r3, #6
 8005410:	425b      	negs	r3, r3
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e00e      	b.n	8005434 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <osKernelStart+0x58>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800541e:	4b08      	ldr	r3, [pc, #32]	; (8005440 <osKernelStart+0x58>)
 8005420:	2202      	movs	r2, #2
 8005422:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005424:	f000 ff94 	bl	8006350 <vTaskStartScheduler>
      stat = osOK;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e002      	b.n	8005434 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800542e:	2301      	movs	r3, #1
 8005430:	425b      	negs	r3, r3
 8005432:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005434:	68fb      	ldr	r3, [r7, #12]
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b004      	add	sp, #16
 800543c:	bd80      	pop	{r7, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	20001f94 	.word	0x20001f94

08005444 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005444:	b5b0      	push	{r4, r5, r7, lr}
 8005446:	b090      	sub	sp, #64	; 0x40
 8005448:	af04      	add	r7, sp, #16
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005454:	f3ef 8305 	mrs	r3, IPSR
 8005458:	61fb      	str	r3, [r7, #28]
  return(result);
 800545a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800545c:	2b00      	cmp	r3, #0
 800545e:	d000      	beq.n	8005462 <osThreadNew+0x1e>
 8005460:	e090      	b.n	8005584 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005462:	f3ef 8310 	mrs	r3, PRIMASK
 8005466:	61bb      	str	r3, [r7, #24]
  return(result);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <osThreadNew+0x34>
 800546e:	4b48      	ldr	r3, [pc, #288]	; (8005590 <osThreadNew+0x14c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d100      	bne.n	8005478 <osThreadNew+0x34>
 8005476:	e085      	b.n	8005584 <osThreadNew+0x140>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d100      	bne.n	8005480 <osThreadNew+0x3c>
 800547e:	e081      	b.n	8005584 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005484:	2318      	movs	r3, #24
 8005486:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005488:	2117      	movs	r1, #23
 800548a:	187b      	adds	r3, r7, r1
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005490:	187b      	adds	r3, r7, r1
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005494:	2301      	movs	r3, #1
 8005496:	425b      	negs	r3, r3
 8005498:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d044      	beq.n	800552a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <osThreadNew+0x6a>
        name = attr->name;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <osThreadNew+0x8e>
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2b38      	cmp	r3, #56	; 0x38
 80054c6:	d804      	bhi.n	80054d2 <osThreadNew+0x8e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	4013      	ands	r3, r2
 80054d0:	d001      	beq.n	80054d6 <osThreadNew+0x92>
        return (NULL);
 80054d2:	2300      	movs	r3, #0
 80054d4:	e057      	b.n	8005586 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <osThreadNew+0xc8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2bbb      	cmp	r3, #187	; 0xbb
 80054f4:	d90a      	bls.n	800550c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <osThreadNew+0xc8>
        mem = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	623b      	str	r3, [r7, #32]
 800550a:	e010      	b.n	800552e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <osThreadNew+0xea>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d108      	bne.n	800552e <osThreadNew+0xea>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <osThreadNew+0xea>
          mem = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	e001      	b.n	800552e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d112      	bne.n	800555a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800553c:	68bd      	ldr	r5, [r7, #8]
 800553e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	9302      	str	r3, [sp, #8]
 8005546:	9201      	str	r2, [sp, #4]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	002b      	movs	r3, r5
 800554e:	0022      	movs	r2, r4
 8005550:	f000 fd49 	bl	8005fe6 <xTaskCreateStatic>
 8005554:	0003      	movs	r3, r0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e014      	b.n	8005584 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d111      	bne.n	8005584 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	b29a      	uxth	r2, r3
 8005564:	68bc      	ldr	r4, [r7, #8]
 8005566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	2310      	movs	r3, #16
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	0023      	movs	r3, r4
 8005576:	f000 fd79 	bl	800606c <xTaskCreate>
 800557a:	0003      	movs	r3, r0
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <osThreadNew+0x140>
          hTask = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005584:	693b      	ldr	r3, [r7, #16]
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b00c      	add	sp, #48	; 0x30
 800558c:	bdb0      	pop	{r4, r5, r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	20001f94 	.word	0x20001f94

08005594 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800559c:	f3ef 8305 	mrs	r3, IPSR
 80055a0:	613b      	str	r3, [r7, #16]
  return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <osDelay+0x30>
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <osDelay+0x4c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d103      	bne.n	80055c4 <osDelay+0x30>
    stat = osErrorISR;
 80055bc:	2306      	movs	r3, #6
 80055be:	425b      	negs	r3, r3
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e008      	b.n	80055d6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <osDelay+0x42>
      vTaskDelay(ticks);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 fe97 	bl	8006304 <vTaskDelay>
    }
  }

  return (stat);
 80055d6:	697b      	ldr	r3, [r7, #20]
}
 80055d8:	0018      	movs	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	b006      	add	sp, #24
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20001f94 	.word	0x20001f94

080055e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a06      	ldr	r2, [pc, #24]	; (800560c <vApplicationGetIdleTaskMemory+0x28>)
 80055f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a05      	ldr	r2, [pc, #20]	; (8005610 <vApplicationGetIdleTaskMemory+0x2c>)
 80055fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2280      	movs	r2, #128	; 0x80
 8005600:	601a      	str	r2, [r3, #0]
}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b004      	add	sp, #16
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	20001f98 	.word	0x20001f98
 8005610:	20002054 	.word	0x20002054

08005614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a06      	ldr	r2, [pc, #24]	; (800563c <vApplicationGetTimerTaskMemory+0x28>)
 8005624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4a05      	ldr	r2, [pc, #20]	; (8005640 <vApplicationGetTimerTaskMemory+0x2c>)
 800562a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	0052      	lsls	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	b004      	add	sp, #16
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20002254 	.word	0x20002254
 8005640:	20002310 	.word	0x20002310

08005644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3308      	adds	r3, #8
 8005650:	001a      	movs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	4252      	negs	r2, r2
 800565c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3308      	adds	r3, #8
 8005662:	001a      	movs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3308      	adds	r3, #8
 800566c:	001a      	movs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b002      	add	sp, #8
 800567e:	bd80      	pop	{r7, pc}

08005680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	46bd      	mov	sp, r7
 8005692:	b002      	add	sp, #8
 8005694:	bd80      	pop	{r7, pc}

08005696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b004      	add	sp, #16
 80056d8:	bd80      	pop	{r7, pc}

080056da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	3301      	adds	r3, #1
 80056ee:	d103      	bne.n	80056f8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e00c      	b.n	8005712 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3308      	adds	r3, #8
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e002      	b.n	8005706 <vListInsert+0x2c>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d2f6      	bcs.n	8005700 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	46bd      	mov	sp, r7
 8005742:	b004      	add	sp, #16
 8005744:	bd80      	pop	{r7, pc}

08005746 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6852      	ldr	r2, [r2, #4]
 8005766:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d103      	bne.n	800577a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
}
 800578e:	0018      	movs	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	b004      	add	sp, #16
 8005794:	bd80      	pop	{r7, pc}

08005796 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <xQueueGenericReset+0x18>
 80057aa:	b672      	cpsid	i
 80057ac:	e7fe      	b.n	80057ac <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80057ae:	f001 fdf7 	bl	80073a0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	434b      	muls	r3, r1
 80057c0:	18d2      	adds	r2, r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	1e59      	subs	r1, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	434b      	muls	r3, r1
 80057e4:	18d2      	adds	r2, r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2244      	movs	r2, #68	; 0x44
 80057ee:	21ff      	movs	r1, #255	; 0xff
 80057f0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2245      	movs	r2, #69	; 0x45
 80057f6:	21ff      	movs	r1, #255	; 0xff
 80057f8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3310      	adds	r3, #16
 800580c:	0018      	movs	r0, r3
 800580e:	f000 fff5 	bl	80067fc <xTaskRemoveFromEventList>
 8005812:	1e03      	subs	r3, r0, #0
 8005814:	d00c      	beq.n	8005830 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005816:	f001 fdb3 	bl	8007380 <vPortYield>
 800581a:	e009      	b.n	8005830 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3310      	adds	r3, #16
 8005820:	0018      	movs	r0, r3
 8005822:	f7ff ff0f 	bl	8005644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3324      	adds	r3, #36	; 0x24
 800582a:	0018      	movs	r0, r3
 800582c:	f7ff ff0a 	bl	8005644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005830:	f001 fdc8 	bl	80073c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005834:	2301      	movs	r3, #1
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b004      	add	sp, #16
 800583c:	bd80      	pop	{r7, pc}

0800583e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800583e:	b590      	push	{r4, r7, lr}
 8005840:	b089      	sub	sp, #36	; 0x24
 8005842:	af02      	add	r7, sp, #8
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <xQueueGenericCreateStatic+0x18>
 8005852:	b672      	cpsid	i
 8005854:	e7fe      	b.n	8005854 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <xQueueGenericCreateStatic+0x22>
 800585c:	b672      	cpsid	i
 800585e:	e7fe      	b.n	800585e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <xQueueGenericCreateStatic+0x2e>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <xQueueGenericCreateStatic+0x32>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <xQueueGenericCreateStatic+0x34>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <xQueueGenericCreateStatic+0x3c>
 8005876:	b672      	cpsid	i
 8005878:	e7fe      	b.n	8005878 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <xQueueGenericCreateStatic+0x48>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <xQueueGenericCreateStatic+0x4c>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueGenericCreateStatic+0x4e>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <xQueueGenericCreateStatic+0x56>
 8005890:	b672      	cpsid	i
 8005892:	e7fe      	b.n	8005892 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005894:	2350      	movs	r3, #80	; 0x50
 8005896:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b50      	cmp	r3, #80	; 0x50
 800589c:	d001      	beq.n	80058a2 <xQueueGenericCreateStatic+0x64>
 800589e:	b672      	cpsid	i
 80058a0:	e7fe      	b.n	80058a0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2246      	movs	r2, #70	; 0x46
 80058b0:	2101      	movs	r1, #1
 80058b2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b4:	2328      	movs	r3, #40	; 0x28
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	781c      	ldrb	r4, [r3, #0]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	0023      	movs	r3, r4
 80058c6:	f000 f805 	bl	80058d4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80058ca:	697b      	ldr	r3, [r7, #20]
	}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b007      	add	sp, #28
 80058d2:	bd90      	pop	{r4, r7, pc}

080058d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	001a      	movs	r2, r3
 80058e2:	1cfb      	adds	r3, r7, #3
 80058e4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d103      	bne.n	80058f4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e002      	b.n	80058fa <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2101      	movs	r1, #1
 800590a:	0018      	movs	r0, r3
 800590c:	f7ff ff43 	bl	8005796 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	1cfa      	adds	r2, r7, #3
 8005914:	214c      	movs	r1, #76	; 0x4c
 8005916:	7812      	ldrb	r2, [r2, #0]
 8005918:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	46bd      	mov	sp, r7
 800591e:	b004      	add	sp, #16
 8005920:	bd80      	pop	{r7, pc}

08005922 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b08a      	sub	sp, #40	; 0x28
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005930:	2300      	movs	r3, #0
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <xQueueGenericSend+0x20>
 800593e:	b672      	cpsid	i
 8005940:	e7fe      	b.n	8005940 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <xQueueGenericSend+0x2e>
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueGenericSend+0x32>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueGenericSend+0x34>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <xQueueGenericSend+0x3c>
 800595a:	b672      	cpsid	i
 800595c:	e7fe      	b.n	800595c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d103      	bne.n	800596c <xQueueGenericSend+0x4a>
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <xQueueGenericSend+0x4e>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <xQueueGenericSend+0x50>
 8005970:	2300      	movs	r3, #0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <xQueueGenericSend+0x58>
 8005976:	b672      	cpsid	i
 8005978:	e7fe      	b.n	8005978 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800597a:	f001 f8dd 	bl	8006b38 <xTaskGetSchedulerState>
 800597e:	1e03      	subs	r3, r0, #0
 8005980:	d102      	bne.n	8005988 <xQueueGenericSend+0x66>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <xQueueGenericSend+0x6a>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <xQueueGenericSend+0x6c>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <xQueueGenericSend+0x74>
 8005992:	b672      	cpsid	i
 8005994:	e7fe      	b.n	8005994 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005996:	f001 fd03 	bl	80073a0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <xQueueGenericSend+0x8a>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d11e      	bne.n	80059ea <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 f99f 	bl	8005cf6 <prvCopyDataToQueue>
 80059b8:	0003      	movs	r3, r0
 80059ba:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	3324      	adds	r3, #36	; 0x24
 80059c8:	0018      	movs	r0, r3
 80059ca:	f000 ff17 	bl	80067fc <xTaskRemoveFromEventList>
 80059ce:	1e03      	subs	r3, r0, #0
 80059d0:	d007      	beq.n	80059e2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d2:	f001 fcd5 	bl	8007380 <vPortYield>
 80059d6:	e004      	b.n	80059e2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059de:	f001 fccf 	bl	8007380 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059e2:	f001 fcef 	bl	80073c4 <vPortExitCritical>
				return pdPASS;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e05b      	b.n	8005aa2 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059f0:	f001 fce8 	bl	80073c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e054      	b.n	8005aa2 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059fe:	2314      	movs	r3, #20
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 ff56 	bl	80068b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a0c:	f001 fcda 	bl	80073c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a10:	f000 fcfc 	bl	800640c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a14:	f001 fcc4 	bl	80073a0 <vPortEnterCritical>
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2244      	movs	r2, #68	; 0x44
 8005a1c:	5c9b      	ldrb	r3, [r3, r2]
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	3301      	adds	r3, #1
 8005a22:	d103      	bne.n	8005a2c <xQueueGenericSend+0x10a>
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2244      	movs	r2, #68	; 0x44
 8005a28:	2100      	movs	r1, #0
 8005a2a:	5499      	strb	r1, [r3, r2]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2245      	movs	r2, #69	; 0x45
 8005a30:	5c9b      	ldrb	r3, [r3, r2]
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	3301      	adds	r3, #1
 8005a36:	d103      	bne.n	8005a40 <xQueueGenericSend+0x11e>
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2245      	movs	r2, #69	; 0x45
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]
 8005a40:	f001 fcc0 	bl	80073c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a44:	1d3a      	adds	r2, r7, #4
 8005a46:	2314      	movs	r3, #20
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f000 ff45 	bl	80068dc <xTaskCheckForTimeOut>
 8005a52:	1e03      	subs	r3, r0, #0
 8005a54:	d11e      	bne.n	8005a94 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f000 fa51 	bl	8005f00 <prvIsQueueFull>
 8005a5e:	1e03      	subs	r3, r0, #0
 8005a60:	d011      	beq.n	8005a86 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	3310      	adds	r3, #16
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	0011      	movs	r1, r2
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 fe82 	bl	8006774 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 f9d0 	bl	8005e18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a78:	f000 fcd4 	bl	8006424 <xTaskResumeAll>
 8005a7c:	1e03      	subs	r3, r0, #0
 8005a7e:	d18a      	bne.n	8005996 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005a80:	f001 fc7e 	bl	8007380 <vPortYield>
 8005a84:	e787      	b.n	8005996 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f000 f9c5 	bl	8005e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a8e:	f000 fcc9 	bl	8006424 <xTaskResumeAll>
 8005a92:	e780      	b.n	8005996 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	0018      	movs	r0, r3
 8005a98:	f000 f9be 	bl	8005e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a9c:	f000 fcc2 	bl	8006424 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aa0:	2300      	movs	r3, #0
		}
	}
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b00a      	add	sp, #40	; 0x28
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005aaa:	b590      	push	{r4, r7, lr}
 8005aac:	b089      	sub	sp, #36	; 0x24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <xQueueGenericSendFromISR+0x1c>
 8005ac2:	b672      	cpsid	i
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <xQueueGenericSendFromISR+0x2a>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <xQueueGenericSendFromISR+0x2e>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <xQueueGenericSendFromISR+0x30>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <xQueueGenericSendFromISR+0x38>
 8005ade:	b672      	cpsid	i
 8005ae0:	e7fe      	b.n	8005ae0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d103      	bne.n	8005af0 <xQueueGenericSendFromISR+0x46>
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <xQueueGenericSendFromISR+0x4a>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <xQueueGenericSendFromISR+0x4c>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <xQueueGenericSendFromISR+0x54>
 8005afa:	b672      	cpsid	i
 8005afc:	e7fe      	b.n	8005afc <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005afe:	f001 fc79 	bl	80073f4 <ulSetInterruptMaskFromISR>
 8005b02:	0003      	movs	r3, r0
 8005b04:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d302      	bcc.n	8005b18 <xQueueGenericSendFromISR+0x6e>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d12e      	bne.n	8005b76 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b18:	2413      	movs	r4, #19
 8005b1a:	193b      	adds	r3, r7, r4
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	2145      	movs	r1, #69	; 0x45
 8005b20:	5c52      	ldrb	r2, [r2, r1]
 8005b22:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 f8e3 	bl	8005cf6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b30:	193b      	adds	r3, r7, r4
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	d111      	bne.n	8005b5e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d016      	beq.n	8005b70 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	3324      	adds	r3, #36	; 0x24
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 fe58 	bl	80067fc <xTaskRemoveFromEventList>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d00f      	beq.n	8005b70 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e008      	b.n	8005b70 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b5e:	2313      	movs	r3, #19
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	b259      	sxtb	r1, r3
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2245      	movs	r2, #69	; 0x45
 8005b6e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005b70:	2301      	movs	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
		{
 8005b74:	e001      	b.n	8005b7a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f001 fc3f 	bl	8007400 <vClearInterruptMaskFromISR>

	return xReturn;
 8005b82:	69fb      	ldr	r3, [r7, #28]
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b009      	add	sp, #36	; 0x24
 8005b8a:	bd90      	pop	{r4, r7, pc}

08005b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <xQueueReceive+0x1e>
 8005ba6:	b672      	cpsid	i
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <xQueueReceive+0x2c>
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <xQueueReceive+0x30>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <xQueueReceive+0x32>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <xQueueReceive+0x3a>
 8005bc2:	b672      	cpsid	i
 8005bc4:	e7fe      	b.n	8005bc4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bc6:	f000 ffb7 	bl	8006b38 <xTaskGetSchedulerState>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d102      	bne.n	8005bd4 <xQueueReceive+0x48>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <xQueueReceive+0x4c>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <xQueueReceive+0x4e>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <xQueueReceive+0x56>
 8005bde:	b672      	cpsid	i
 8005be0:	e7fe      	b.n	8005be0 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be2:	f001 fbdd 	bl	80073a0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01a      	beq.n	8005c28 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	0011      	movs	r1, r2
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f000 f8e7 	bl	8005dcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	1e5a      	subs	r2, r3, #1
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	3310      	adds	r3, #16
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 fdf2 	bl	80067fc <xTaskRemoveFromEventList>
 8005c18:	1e03      	subs	r3, r0, #0
 8005c1a:	d001      	beq.n	8005c20 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c1c:	f001 fbb0 	bl	8007380 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c20:	f001 fbd0 	bl	80073c4 <vPortExitCritical>
				return pdPASS;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e062      	b.n	8005cee <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c2e:	f001 fbc9 	bl	80073c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e05b      	b.n	8005cee <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c3c:	2314      	movs	r3, #20
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	0018      	movs	r0, r3
 8005c42:	f000 fe37 	bl	80068b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c46:	2301      	movs	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c4a:	f001 fbbb 	bl	80073c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c4e:	f000 fbdd 	bl	800640c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c52:	f001 fba5 	bl	80073a0 <vPortEnterCritical>
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2244      	movs	r2, #68	; 0x44
 8005c5a:	5c9b      	ldrb	r3, [r3, r2]
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	3301      	adds	r3, #1
 8005c60:	d103      	bne.n	8005c6a <xQueueReceive+0xde>
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	2244      	movs	r2, #68	; 0x44
 8005c66:	2100      	movs	r1, #0
 8005c68:	5499      	strb	r1, [r3, r2]
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	2245      	movs	r2, #69	; 0x45
 8005c6e:	5c9b      	ldrb	r3, [r3, r2]
 8005c70:	b25b      	sxtb	r3, r3
 8005c72:	3301      	adds	r3, #1
 8005c74:	d103      	bne.n	8005c7e <xQueueReceive+0xf2>
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2245      	movs	r2, #69	; 0x45
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]
 8005c7e:	f001 fba1 	bl	80073c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c82:	1d3a      	adds	r2, r7, #4
 8005c84:	2314      	movs	r3, #20
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	0011      	movs	r1, r2
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fe26 	bl	80068dc <xTaskCheckForTimeOut>
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d11e      	bne.n	8005cd2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f91c 	bl	8005ed4 <prvIsQueueEmpty>
 8005c9c:	1e03      	subs	r3, r0, #0
 8005c9e:	d011      	beq.n	8005cc4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	3324      	adds	r3, #36	; 0x24
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	0011      	movs	r1, r2
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 fd63 	bl	8006774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f000 f8b1 	bl	8005e18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cb6:	f000 fbb5 	bl	8006424 <xTaskResumeAll>
 8005cba:	1e03      	subs	r3, r0, #0
 8005cbc:	d191      	bne.n	8005be2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005cbe:	f001 fb5f 	bl	8007380 <vPortYield>
 8005cc2:	e78e      	b.n	8005be2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f000 f8a6 	bl	8005e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ccc:	f000 fbaa 	bl	8006424 <xTaskResumeAll>
 8005cd0:	e787      	b.n	8005be2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 f89f 	bl	8005e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cda:	f000 fba3 	bl	8006424 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f8f7 	bl	8005ed4 <prvIsQueueEmpty>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d100      	bne.n	8005cec <xQueueReceive+0x160>
 8005cea:	e77a      	b.n	8005be2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b00a      	add	sp, #40	; 0x28
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b086      	sub	sp, #24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10e      	bne.n	8005d32 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d14e      	bne.n	8005dba <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 ff25 	bl	8006b70 <xTaskPriorityDisinherit>
 8005d26:	0003      	movs	r3, r0
 8005d28:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	e043      	b.n	8005dba <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d119      	bne.n	8005d6c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6898      	ldr	r0, [r3, #8]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	0019      	movs	r1, r3
 8005d44:	f001 fd90 	bl	8007868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	18d2      	adds	r2, r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d32b      	bcc.n	8005dba <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	e026      	b.n	8005dba <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68d8      	ldr	r0, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	0019      	movs	r1, r3
 8005d78:	f001 fd76 	bl	8007868 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	425b      	negs	r3, r3
 8005d86:	18d2      	adds	r2, r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d207      	bcs.n	8005da8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	425b      	negs	r3, r3
 8005da2:	18d2      	adds	r2, r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d105      	bne.n	8005dba <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005dc2:	697b      	ldr	r3, [r7, #20]
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b006      	add	sp, #24
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d018      	beq.n	8005e10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	18d2      	adds	r2, r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d303      	bcc.n	8005e00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68d9      	ldr	r1, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f001 fd2c 	bl	8007868 <memcpy>
	}
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b002      	add	sp, #8
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e20:	f001 fabe 	bl	80073a0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e24:	230f      	movs	r3, #15
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	2145      	movs	r1, #69	; 0x45
 8005e2c:	5c52      	ldrb	r2, [r2, r1]
 8005e2e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e30:	e013      	b.n	8005e5a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d016      	beq.n	8005e68 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3324      	adds	r3, #36	; 0x24
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fcdc 	bl	80067fc <xTaskRemoveFromEventList>
 8005e44:	1e03      	subs	r3, r0, #0
 8005e46:	d001      	beq.n	8005e4c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e48:	f000 fd98 	bl	800697c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e4c:	210f      	movs	r1, #15
 8005e4e:	187b      	adds	r3, r7, r1
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	187b      	adds	r3, r7, r1
 8005e58:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e5a:	230f      	movs	r3, #15
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dce5      	bgt.n	8005e32 <prvUnlockQueue+0x1a>
 8005e66:	e000      	b.n	8005e6a <prvUnlockQueue+0x52>
					break;
 8005e68:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2245      	movs	r2, #69	; 0x45
 8005e6e:	21ff      	movs	r1, #255	; 0xff
 8005e70:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005e72:	f001 faa7 	bl	80073c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e76:	f001 fa93 	bl	80073a0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e7a:	230e      	movs	r3, #14
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	2144      	movs	r1, #68	; 0x44
 8005e82:	5c52      	ldrb	r2, [r2, r1]
 8005e84:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e86:	e013      	b.n	8005eb0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d016      	beq.n	8005ebe <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3310      	adds	r3, #16
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 fcb1 	bl	80067fc <xTaskRemoveFromEventList>
 8005e9a:	1e03      	subs	r3, r0, #0
 8005e9c:	d001      	beq.n	8005ea2 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005e9e:	f000 fd6d 	bl	800697c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ea2:	210e      	movs	r1, #14
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	187b      	adds	r3, r7, r1
 8005eae:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eb0:	230e      	movs	r3, #14
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b25b      	sxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	dce5      	bgt.n	8005e88 <prvUnlockQueue+0x70>
 8005ebc:	e000      	b.n	8005ec0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005ebe:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2244      	movs	r2, #68	; 0x44
 8005ec4:	21ff      	movs	r1, #255	; 0xff
 8005ec6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005ec8:	f001 fa7c 	bl	80073c4 <vPortExitCritical>
}
 8005ecc:	46c0      	nop			; (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b004      	add	sp, #16
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005edc:	f001 fa60 	bl	80073a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e001      	b.n	8005ef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ef2:	f001 fa67 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b004      	add	sp, #16
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f08:	f001 fa4a 	bl	80073a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d102      	bne.n	8005f1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e001      	b.n	8005f22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f22:	f001 fa4f 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 8005f26:	68fb      	ldr	r3, [r7, #12]
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e015      	b.n	8005f6c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f40:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <vQueueAddToRegistry+0x4c>)
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	00d2      	lsls	r2, r2, #3
 8005f46:	58d3      	ldr	r3, [r2, r3]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10c      	bne.n	8005f66 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <vQueueAddToRegistry+0x4c>)
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	00d2      	lsls	r2, r2, #3
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <vQueueAddToRegistry+0x4c>)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	18d3      	adds	r3, r2, r3
 8005f5e:	3304      	adds	r3, #4
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f64:	e006      	b.n	8005f74 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	d9e6      	bls.n	8005f40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	46c0      	nop			; (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b004      	add	sp, #16
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20002710 	.word	0x20002710

08005f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f90:	f001 fa06 	bl	80073a0 <vPortEnterCritical>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2244      	movs	r2, #68	; 0x44
 8005f98:	5c9b      	ldrb	r3, [r3, r2]
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	d103      	bne.n	8005fa8 <vQueueWaitForMessageRestricted+0x28>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2244      	movs	r2, #68	; 0x44
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2245      	movs	r2, #69	; 0x45
 8005fac:	5c9b      	ldrb	r3, [r3, r2]
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	d103      	bne.n	8005fbc <vQueueWaitForMessageRestricted+0x3c>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2245      	movs	r2, #69	; 0x45
 8005fb8:	2100      	movs	r1, #0
 8005fba:	5499      	strb	r1, [r3, r2]
 8005fbc:	f001 fa02 	bl	80073c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3324      	adds	r3, #36	; 0x24
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f000 fbed 	bl	80067b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f7ff ff1d 	bl	8005e18 <prvUnlockQueue>
	}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b006      	add	sp, #24
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fe6:	b590      	push	{r4, r7, lr}
 8005fe8:	b08d      	sub	sp, #52	; 0x34
 8005fea:	af04      	add	r7, sp, #16
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <xTaskCreateStatic+0x18>
 8005ffa:	b672      	cpsid	i
 8005ffc:	e7fe      	b.n	8005ffc <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <xTaskCreateStatic+0x22>
 8006004:	b672      	cpsid	i
 8006006:	e7fe      	b.n	8006006 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006008:	23bc      	movs	r3, #188	; 0xbc
 800600a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2bbc      	cmp	r3, #188	; 0xbc
 8006010:	d001      	beq.n	8006016 <xTaskCreateStatic+0x30>
 8006012:	b672      	cpsid	i
 8006014:	e7fe      	b.n	8006014 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <xTaskCreateStatic+0x78>
 800601c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01d      	beq.n	800605e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	22b9      	movs	r2, #185	; 0xb9
 8006030:	2102      	movs	r1, #2
 8006032:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006034:	683c      	ldr	r4, [r7, #0]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	2300      	movs	r3, #0
 800603e:	9303      	str	r3, [sp, #12]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	9302      	str	r3, [sp, #8]
 8006044:	2318      	movs	r3, #24
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	0023      	movs	r3, r4
 8006050:	f000 f858 	bl	8006104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f8ec 	bl	8006234 <prvAddNewTaskToReadyList>
 800605c:	e001      	b.n	8006062 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006062:	69bb      	ldr	r3, [r7, #24]
	}
 8006064:	0018      	movs	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	b009      	add	sp, #36	; 0x24
 800606a:	bd90      	pop	{r4, r7, pc}

0800606c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b08d      	sub	sp, #52	; 0x34
 8006070:	af04      	add	r7, sp, #16
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	1dbb      	adds	r3, r7, #6
 800607a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800607c:	1dbb      	adds	r3, r7, #6
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	0018      	movs	r0, r3
 8006084:	f001 fa24 	bl	80074d0 <pvPortMalloc>
 8006088:	0003      	movs	r3, r0
 800608a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d010      	beq.n	80060b4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006092:	20bc      	movs	r0, #188	; 0xbc
 8006094:	f001 fa1c 	bl	80074d0 <pvPortMalloc>
 8006098:	0003      	movs	r3, r0
 800609a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
 80060a8:	e006      	b.n	80060b8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f001 fab5 	bl	800761c <vPortFree>
 80060b2:	e001      	b.n	80060b8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01a      	beq.n	80060f4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	22b9      	movs	r2, #185	; 0xb9
 80060c2:	2100      	movs	r1, #0
 80060c4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060c6:	1dbb      	adds	r3, r7, #6
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	683c      	ldr	r4, [r7, #0]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	2300      	movs	r3, #0
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	0023      	movs	r3, r4
 80060e2:	f000 f80f 	bl	8006104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 f8a3 	bl	8006234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060ee:	2301      	movs	r3, #1
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e002      	b.n	80060fa <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060f4:	2301      	movs	r3, #1
 80060f6:	425b      	negs	r3, r3
 80060f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060fa:	69bb      	ldr	r3, [r7, #24]
	}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b009      	add	sp, #36	; 0x24
 8006102:	bd90      	pop	{r4, r7, pc}

08006104 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	001a      	movs	r2, r3
 800611c:	21a5      	movs	r1, #165	; 0xa5
 800611e:	f001 fbac 	bl	800787a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	493e      	ldr	r1, [pc, #248]	; (8006224 <prvInitialiseNewTask+0x120>)
 800612a:	468c      	mov	ip, r1
 800612c:	4463      	add	r3, ip
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	18d3      	adds	r3, r2, r3
 8006132:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2207      	movs	r2, #7
 8006138:	4393      	bics	r3, r2
 800613a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2207      	movs	r2, #7
 8006140:	4013      	ands	r3, r2
 8006142:	d001      	beq.n	8006148 <prvInitialiseNewTask+0x44>
 8006144:	b672      	cpsid	i
 8006146:	e7fe      	b.n	8006146 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e013      	b.n	8006176 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	18d3      	adds	r3, r2, r3
 8006154:	7818      	ldrb	r0, [r3, #0]
 8006156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006158:	2134      	movs	r1, #52	; 0x34
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	18d3      	adds	r3, r2, r3
 800615e:	185b      	adds	r3, r3, r1
 8006160:	1c02      	adds	r2, r0, #0
 8006162:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	18d3      	adds	r3, r2, r3
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d006      	beq.n	800617e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3301      	adds	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b0f      	cmp	r3, #15
 800617a:	d9e8      	bls.n	800614e <prvInitialiseNewTask+0x4a>
 800617c:	e000      	b.n	8006180 <prvInitialiseNewTask+0x7c>
		{
			break;
 800617e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2243      	movs	r2, #67	; 0x43
 8006184:	2100      	movs	r1, #0
 8006186:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b37      	cmp	r3, #55	; 0x37
 800618c:	d901      	bls.n	8006192 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800618e:	2337      	movs	r3, #55	; 0x37
 8006190:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	6a3a      	ldr	r2, [r7, #32]
 800619c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	2200      	movs	r2, #0
 80061a2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	3304      	adds	r3, #4
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7ff fa69 	bl	8005680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	3318      	adds	r3, #24
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7ff fa64 	bl	8005680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2238      	movs	r2, #56	; 0x38
 80061c2:	1ad2      	subs	r2, r2, r3
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	22b4      	movs	r2, #180	; 0xb4
 80061d2:	2100      	movs	r1, #0
 80061d4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	22b8      	movs	r2, #184	; 0xb8
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	3354      	adds	r3, #84	; 0x54
 80061e2:	2260      	movs	r2, #96	; 0x60
 80061e4:	2100      	movs	r1, #0
 80061e6:	0018      	movs	r0, r3
 80061e8:	f001 fb47 	bl	800787a <memset>
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <prvInitialiseNewTask+0x124>)
 80061f0:	659a      	str	r2, [r3, #88]	; 0x58
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	4a0d      	ldr	r2, [pc, #52]	; (800622c <prvInitialiseNewTask+0x128>)
 80061f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	4a0d      	ldr	r2, [pc, #52]	; (8006230 <prvInitialiseNewTask+0x12c>)
 80061fc:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	68f9      	ldr	r1, [r7, #12]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	0018      	movs	r0, r3
 8006206:	f001 f833 	bl	8007270 <pxPortInitialiseStack>
 800620a:	0002      	movs	r2, r0
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800621a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b006      	add	sp, #24
 8006222:	bd80      	pop	{r7, pc}
 8006224:	3fffffff 	.word	0x3fffffff
 8006228:	08007bec 	.word	0x08007bec
 800622c:	08007c0c 	.word	0x08007c0c
 8006230:	08007bcc 	.word	0x08007bcc

08006234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800623c:	f001 f8b0 	bl	80073a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006240:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <prvAddNewTaskToReadyList+0xb8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	4b29      	ldr	r3, [pc, #164]	; (80062ec <prvAddNewTaskToReadyList+0xb8>)
 8006248:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800624a:	4b29      	ldr	r3, [pc, #164]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006252:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006258:	4b24      	ldr	r3, [pc, #144]	; (80062ec <prvAddNewTaskToReadyList+0xb8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d110      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006260:	f000 fba6 	bl	80069b0 <prvInitialiseTaskLists>
 8006264:	e00d      	b.n	8006282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006266:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <prvAddNewTaskToReadyList+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800626e:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	429a      	cmp	r2, r3
 800627a:	d802      	bhi.n	8006282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800627c:	4b1c      	ldr	r3, [pc, #112]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006282:	4b1d      	ldr	r3, [pc, #116]	; (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 800628a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800628c:	4b1a      	ldr	r3, [pc, #104]	; (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006298:	4b18      	ldr	r3, [pc, #96]	; (80062fc <prvAddNewTaskToReadyList+0xc8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d903      	bls.n	80062a8 <prvAddNewTaskToReadyList+0x74>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4b15      	ldr	r3, [pc, #84]	; (80062fc <prvAddNewTaskToReadyList+0xc8>)
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ac:	0013      	movs	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	189b      	adds	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4a12      	ldr	r2, [pc, #72]	; (8006300 <prvAddNewTaskToReadyList+0xcc>)
 80062b6:	189a      	adds	r2, r3, r2
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	0019      	movs	r1, r3
 80062be:	0010      	movs	r0, r2
 80062c0:	f7ff f9e9 	bl	8005696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062c4:	f001 f87e 	bl	80073c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <prvAddNewTaskToReadyList+0xc0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <prvAddNewTaskToReadyList+0xbc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	429a      	cmp	r2, r3
 80062dc:	d201      	bcs.n	80062e2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062de:	f001 f84f 	bl	8007380 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b002      	add	sp, #8
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	20002c24 	.word	0x20002c24
 80062f0:	20002750 	.word	0x20002750
 80062f4:	20002c30 	.word	0x20002c30
 80062f8:	20002c40 	.word	0x20002c40
 80062fc:	20002c2c 	.word	0x20002c2c
 8006300:	20002754 	.word	0x20002754

08006304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <vTaskDelay+0x48>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <vTaskDelay+0x1e>
 800631e:	b672      	cpsid	i
 8006320:	e7fe      	b.n	8006320 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006322:	f000 f873 	bl	800640c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2100      	movs	r1, #0
 800632a:	0018      	movs	r0, r3
 800632c:	f000 fc7c 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006330:	f000 f878 	bl	8006424 <xTaskResumeAll>
 8006334:	0003      	movs	r3, r0
 8006336:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800633e:	f001 f81f 	bl	8007380 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	46bd      	mov	sp, r7
 8006346:	b004      	add	sp, #16
 8006348:	bd80      	pop	{r7, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	20002c4c 	.word	0x20002c4c

08006350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006350:	b590      	push	{r4, r7, lr}
 8006352:	b089      	sub	sp, #36	; 0x24
 8006354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800635e:	003a      	movs	r2, r7
 8006360:	1d39      	adds	r1, r7, #4
 8006362:	2308      	movs	r3, #8
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	0018      	movs	r0, r3
 8006368:	f7ff f93c 	bl	80055e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800636c:	683c      	ldr	r4, [r7, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	491e      	ldr	r1, [pc, #120]	; (80063ec <vTaskStartScheduler+0x9c>)
 8006374:	481e      	ldr	r0, [pc, #120]	; (80063f0 <vTaskStartScheduler+0xa0>)
 8006376:	9202      	str	r2, [sp, #8]
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	2300      	movs	r3, #0
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	2300      	movs	r3, #0
 8006380:	0022      	movs	r2, r4
 8006382:	f7ff fe30 	bl	8005fe6 <xTaskCreateStatic>
 8006386:	0002      	movs	r2, r0
 8006388:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <vTaskStartScheduler+0xa4>)
 800638a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800638c:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <vTaskStartScheduler+0xa4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006394:	2301      	movs	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e001      	b.n	800639e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d103      	bne.n	80063ac <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80063a4:	f000 fc94 	bl	8006cd0 <xTimerCreateTimerTask>
 80063a8:	0003      	movs	r3, r0
 80063aa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d113      	bne.n	80063da <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80063b2:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063b4:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <vTaskStartScheduler+0xa8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3354      	adds	r3, #84	; 0x54
 80063ba:	001a      	movs	r2, r3
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <vTaskStartScheduler+0xac>)
 80063be:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <vTaskStartScheduler+0xb0>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	4252      	negs	r2, r2
 80063c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063c8:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <vTaskStartScheduler+0xb4>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063ce:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <vTaskStartScheduler+0xb8>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063d4:	f000 ffb0 	bl	8007338 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063d8:	e004      	b.n	80063e4 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	d101      	bne.n	80063e4 <vTaskStartScheduler+0x94>
 80063e0:	b672      	cpsid	i
 80063e2:	e7fe      	b.n	80063e2 <vTaskStartScheduler+0x92>
}
 80063e4:	46c0      	nop			; (mov r8, r8)
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b005      	add	sp, #20
 80063ea:	bd90      	pop	{r4, r7, pc}
 80063ec:	08007a7c 	.word	0x08007a7c
 80063f0:	08006991 	.word	0x08006991
 80063f4:	20002c48 	.word	0x20002c48
 80063f8:	20002750 	.word	0x20002750
 80063fc:	20001cdc 	.word	0x20001cdc
 8006400:	20002c44 	.word	0x20002c44
 8006404:	20002c30 	.word	0x20002c30
 8006408:	20002c28 	.word	0x20002c28

0800640c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <vTaskSuspendAll+0x14>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	4b02      	ldr	r3, [pc, #8]	; (8006420 <vTaskSuspendAll+0x14>)
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20002c4c 	.word	0x20002c4c

08006424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800642e:	2300      	movs	r3, #0
 8006430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006432:	4b3a      	ldr	r3, [pc, #232]	; (800651c <xTaskResumeAll+0xf8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <xTaskResumeAll+0x1a>
 800643a:	b672      	cpsid	i
 800643c:	e7fe      	b.n	800643c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800643e:	f000 ffaf 	bl	80073a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <xTaskResumeAll+0xf8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	1e5a      	subs	r2, r3, #1
 8006448:	4b34      	ldr	r3, [pc, #208]	; (800651c <xTaskResumeAll+0xf8>)
 800644a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644c:	4b33      	ldr	r3, [pc, #204]	; (800651c <xTaskResumeAll+0xf8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d15b      	bne.n	800650c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006454:	4b32      	ldr	r3, [pc, #200]	; (8006520 <xTaskResumeAll+0xfc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d057      	beq.n	800650c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800645c:	e02f      	b.n	80064be <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <xTaskResumeAll+0x100>)
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3318      	adds	r3, #24
 800646a:	0018      	movs	r0, r3
 800646c:	f7ff f96b 	bl	8005746 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3304      	adds	r3, #4
 8006474:	0018      	movs	r0, r3
 8006476:	f7ff f966 	bl	8005746 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <xTaskResumeAll+0x104>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d903      	bls.n	800648e <xTaskResumeAll+0x6a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	4b27      	ldr	r3, [pc, #156]	; (8006528 <xTaskResumeAll+0x104>)
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006492:	0013      	movs	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	189b      	adds	r3, r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4a24      	ldr	r2, [pc, #144]	; (800652c <xTaskResumeAll+0x108>)
 800649c:	189a      	adds	r2, r3, r2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3304      	adds	r3, #4
 80064a2:	0019      	movs	r1, r3
 80064a4:	0010      	movs	r0, r2
 80064a6:	f7ff f8f6 	bl	8005696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4b20      	ldr	r3, [pc, #128]	; (8006530 <xTaskResumeAll+0x10c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80064b8:	4b1e      	ldr	r3, [pc, #120]	; (8006534 <xTaskResumeAll+0x110>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064be:	4b19      	ldr	r3, [pc, #100]	; (8006524 <xTaskResumeAll+0x100>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1cb      	bne.n	800645e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064cc:	f000 fb10 	bl	8006af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064d0:	4b19      	ldr	r3, [pc, #100]	; (8006538 <xTaskResumeAll+0x114>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00f      	beq.n	80064fc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064dc:	f000 f83c 	bl	8006558 <xTaskIncrementTick>
 80064e0:	1e03      	subs	r3, r0, #0
 80064e2:	d002      	beq.n	80064ea <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <xTaskResumeAll+0x110>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f2      	bne.n	80064dc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80064f6:	4b10      	ldr	r3, [pc, #64]	; (8006538 <xTaskResumeAll+0x114>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064fc:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <xTaskResumeAll+0x110>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006508:	f000 ff3a 	bl	8007380 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800650c:	f000 ff5a 	bl	80073c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006510:	68bb      	ldr	r3, [r7, #8]
}
 8006512:	0018      	movs	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	b004      	add	sp, #16
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	20002c4c 	.word	0x20002c4c
 8006520:	20002c24 	.word	0x20002c24
 8006524:	20002be4 	.word	0x20002be4
 8006528:	20002c2c 	.word	0x20002c2c
 800652c:	20002754 	.word	0x20002754
 8006530:	20002750 	.word	0x20002750
 8006534:	20002c38 	.word	0x20002c38
 8006538:	20002c34 	.word	0x20002c34

0800653c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006542:	4b04      	ldr	r3, [pc, #16]	; (8006554 <xTaskGetTickCount+0x18>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006548:	687b      	ldr	r3, [r7, #4]
}
 800654a:	0018      	movs	r0, r3
 800654c:	46bd      	mov	sp, r7
 800654e:	b002      	add	sp, #8
 8006550:	bd80      	pop	{r7, pc}
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	20002c28 	.word	0x20002c28

08006558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006562:	4b4c      	ldr	r3, [pc, #304]	; (8006694 <xTaskIncrementTick+0x13c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d000      	beq.n	800656c <xTaskIncrementTick+0x14>
 800656a:	e083      	b.n	8006674 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800656c:	4b4a      	ldr	r3, [pc, #296]	; (8006698 <xTaskIncrementTick+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006574:	4b48      	ldr	r3, [pc, #288]	; (8006698 <xTaskIncrementTick+0x140>)
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d117      	bne.n	80065b0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006580:	4b46      	ldr	r3, [pc, #280]	; (800669c <xTaskIncrementTick+0x144>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <xTaskIncrementTick+0x36>
 800658a:	b672      	cpsid	i
 800658c:	e7fe      	b.n	800658c <xTaskIncrementTick+0x34>
 800658e:	4b43      	ldr	r3, [pc, #268]	; (800669c <xTaskIncrementTick+0x144>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <xTaskIncrementTick+0x148>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b40      	ldr	r3, [pc, #256]	; (800669c <xTaskIncrementTick+0x144>)
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	4b40      	ldr	r3, [pc, #256]	; (80066a0 <xTaskIncrementTick+0x148>)
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	4b40      	ldr	r3, [pc, #256]	; (80066a4 <xTaskIncrementTick+0x14c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	4b3e      	ldr	r3, [pc, #248]	; (80066a4 <xTaskIncrementTick+0x14c>)
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f000 faa0 	bl	8006af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065b0:	4b3d      	ldr	r3, [pc, #244]	; (80066a8 <xTaskIncrementTick+0x150>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d34e      	bcc.n	8006658 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ba:	4b38      	ldr	r3, [pc, #224]	; (800669c <xTaskIncrementTick+0x144>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <xTaskIncrementTick+0x70>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <xTaskIncrementTick+0x72>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d004      	beq.n	80065d8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ce:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <xTaskIncrementTick+0x150>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	4252      	negs	r2, r2
 80065d4:	601a      	str	r2, [r3, #0]
					break;
 80065d6:	e03f      	b.n	8006658 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065d8:	4b30      	ldr	r3, [pc, #192]	; (800669c <xTaskIncrementTick+0x144>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d203      	bcs.n	80065f8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065f0:	4b2d      	ldr	r3, [pc, #180]	; (80066a8 <xTaskIncrementTick+0x150>)
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
						break;
 80065f6:	e02f      	b.n	8006658 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	3304      	adds	r3, #4
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff f8a2 	bl	8005746 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	3318      	adds	r3, #24
 800660e:	0018      	movs	r0, r3
 8006610:	f7ff f899 	bl	8005746 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	4b24      	ldr	r3, [pc, #144]	; (80066ac <xTaskIncrementTick+0x154>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d903      	bls.n	8006628 <xTaskIncrementTick+0xd0>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4b21      	ldr	r3, [pc, #132]	; (80066ac <xTaskIncrementTick+0x154>)
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	0013      	movs	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	189b      	adds	r3, r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4a1e      	ldr	r2, [pc, #120]	; (80066b0 <xTaskIncrementTick+0x158>)
 8006636:	189a      	adds	r2, r3, r2
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	3304      	adds	r3, #4
 800663c:	0019      	movs	r1, r3
 800663e:	0010      	movs	r0, r2
 8006640:	f7ff f829 	bl	8005696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <xTaskIncrementTick+0x15c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	429a      	cmp	r2, r3
 8006650:	d3b3      	bcc.n	80065ba <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006652:	2301      	movs	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006656:	e7b0      	b.n	80065ba <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006658:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <xTaskIncrementTick+0x15c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665e:	4914      	ldr	r1, [pc, #80]	; (80066b0 <xTaskIncrementTick+0x158>)
 8006660:	0013      	movs	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	189b      	adds	r3, r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	585b      	ldr	r3, [r3, r1]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d907      	bls.n	800667e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e004      	b.n	800667e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <xTaskIncrementTick+0x160>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <xTaskIncrementTick+0x160>)
 800667c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800667e:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <xTaskIncrementTick+0x164>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006686:	2301      	movs	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800668a:	697b      	ldr	r3, [r7, #20]
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	b006      	add	sp, #24
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20002c4c 	.word	0x20002c4c
 8006698:	20002c28 	.word	0x20002c28
 800669c:	20002bdc 	.word	0x20002bdc
 80066a0:	20002be0 	.word	0x20002be0
 80066a4:	20002c3c 	.word	0x20002c3c
 80066a8:	20002c44 	.word	0x20002c44
 80066ac:	20002c2c 	.word	0x20002c2c
 80066b0:	20002754 	.word	0x20002754
 80066b4:	20002750 	.word	0x20002750
 80066b8:	20002c34 	.word	0x20002c34
 80066bc:	20002c38 	.word	0x20002c38

080066c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066c6:	4b25      	ldr	r3, [pc, #148]	; (800675c <vTaskSwitchContext+0x9c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ce:	4b24      	ldr	r3, [pc, #144]	; (8006760 <vTaskSwitchContext+0xa0>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066d4:	e03d      	b.n	8006752 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80066d6:	4b22      	ldr	r3, [pc, #136]	; (8006760 <vTaskSwitchContext+0xa0>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066dc:	4b21      	ldr	r3, [pc, #132]	; (8006764 <vTaskSwitchContext+0xa4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	e007      	b.n	80066f4 <vTaskSwitchContext+0x34>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <vTaskSwitchContext+0x2e>
 80066ea:	b672      	cpsid	i
 80066ec:	e7fe      	b.n	80066ec <vTaskSwitchContext+0x2c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	491c      	ldr	r1, [pc, #112]	; (8006768 <vTaskSwitchContext+0xa8>)
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	0013      	movs	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	189b      	adds	r3, r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	585b      	ldr	r3, [r3, r1]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0ee      	beq.n	80066e4 <vTaskSwitchContext+0x24>
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	0013      	movs	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	189b      	adds	r3, r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4a15      	ldr	r2, [pc, #84]	; (8006768 <vTaskSwitchContext+0xa8>)
 8006712:	189b      	adds	r3, r3, r2
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	605a      	str	r2, [r3, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3308      	adds	r3, #8
 8006728:	429a      	cmp	r2, r3
 800672a:	d104      	bne.n	8006736 <vTaskSwitchContext+0x76>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <vTaskSwitchContext+0xac>)
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	4b08      	ldr	r3, [pc, #32]	; (8006764 <vTaskSwitchContext+0xa4>)
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <vTaskSwitchContext+0xac>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3354      	adds	r3, #84	; 0x54
 800674c:	001a      	movs	r2, r3
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <vTaskSwitchContext+0xb0>)
 8006750:	601a      	str	r2, [r3, #0]
}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	46bd      	mov	sp, r7
 8006756:	b002      	add	sp, #8
 8006758:	bd80      	pop	{r7, pc}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	20002c4c 	.word	0x20002c4c
 8006760:	20002c38 	.word	0x20002c38
 8006764:	20002c2c 	.word	0x20002c2c
 8006768:	20002754 	.word	0x20002754
 800676c:	20002750 	.word	0x20002750
 8006770:	20001cdc 	.word	0x20001cdc

08006774 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <vTaskPlaceOnEventList+0x14>
 8006784:	b672      	cpsid	i
 8006786:	e7fe      	b.n	8006786 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006788:	4b08      	ldr	r3, [pc, #32]	; (80067ac <vTaskPlaceOnEventList+0x38>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3318      	adds	r3, #24
 800678e:	001a      	movs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f7fe ffa0 	bl	80056da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2101      	movs	r1, #1
 800679e:	0018      	movs	r0, r3
 80067a0:	f000 fa42 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
}
 80067a4:	46c0      	nop			; (mov r8, r8)
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b002      	add	sp, #8
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20002750 	.word	0x20002750

080067b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <vTaskPlaceOnEventListRestricted+0x16>
 80067c2:	b672      	cpsid	i
 80067c4:	e7fe      	b.n	80067c4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <vTaskPlaceOnEventListRestricted+0x48>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3318      	adds	r3, #24
 80067cc:	001a      	movs	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	0011      	movs	r1, r2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fe ff5f 	bl	8005696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80067de:	2301      	movs	r3, #1
 80067e0:	425b      	negs	r3, r3
 80067e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	0011      	movs	r1, r2
 80067ea:	0018      	movs	r0, r3
 80067ec:	f000 fa1c 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
	}
 80067f0:	46c0      	nop			; (mov r8, r8)
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b004      	add	sp, #16
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20002750 	.word	0x20002750

080067fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <xTaskRemoveFromEventList+0x1a>
 8006812:	b672      	cpsid	i
 8006814:	e7fe      	b.n	8006814 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3318      	adds	r3, #24
 800681a:	0018      	movs	r0, r3
 800681c:	f7fe ff93 	bl	8005746 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006820:	4b1e      	ldr	r3, [pc, #120]	; (800689c <xTaskRemoveFromEventList+0xa0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11d      	bne.n	8006864 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3304      	adds	r3, #4
 800682c:	0018      	movs	r0, r3
 800682e:	f7fe ff8a 	bl	8005746 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <xTaskRemoveFromEventList+0xa4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d903      	bls.n	8006846 <xTaskRemoveFromEventList+0x4a>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <xTaskRemoveFromEventList+0xa4>)
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	0013      	movs	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	189b      	adds	r3, r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <xTaskRemoveFromEventList+0xa8>)
 8006854:	189a      	adds	r2, r3, r2
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3304      	adds	r3, #4
 800685a:	0019      	movs	r1, r3
 800685c:	0010      	movs	r0, r2
 800685e:	f7fe ff1a 	bl	8005696 <vListInsertEnd>
 8006862:	e007      	b.n	8006874 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	3318      	adds	r3, #24
 8006868:	001a      	movs	r2, r3
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <xTaskRemoveFromEventList+0xac>)
 800686c:	0011      	movs	r1, r2
 800686e:	0018      	movs	r0, r3
 8006870:	f7fe ff11 	bl	8005696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <xTaskRemoveFromEventList+0xb0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	429a      	cmp	r2, r3
 8006880:	d905      	bls.n	800688e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <xTaskRemoveFromEventList+0xb4>)
 8006888:	2201      	movs	r2, #1
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e001      	b.n	8006892 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	0018      	movs	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	b004      	add	sp, #16
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20002c4c 	.word	0x20002c4c
 80068a0:	20002c2c 	.word	0x20002c2c
 80068a4:	20002754 	.word	0x20002754
 80068a8:	20002be4 	.word	0x20002be4
 80068ac:	20002750 	.word	0x20002750
 80068b0:	20002c38 	.word	0x20002c38

080068b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <vTaskInternalSetTimeOutState+0x20>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <vTaskInternalSetTimeOutState+0x24>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	605a      	str	r2, [r3, #4]
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b002      	add	sp, #8
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20002c3c 	.word	0x20002c3c
 80068d8:	20002c28 	.word	0x20002c28

080068dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <xTaskCheckForTimeOut+0x14>
 80068ec:	b672      	cpsid	i
 80068ee:	e7fe      	b.n	80068ee <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <xTaskCheckForTimeOut+0x1e>
 80068f6:	b672      	cpsid	i
 80068f8:	e7fe      	b.n	80068f8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80068fa:	f000 fd51 	bl	80073a0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068fe:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <xTaskCheckForTimeOut+0x98>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	d102      	bne.n	800691c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e024      	b.n	8006966 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b15      	ldr	r3, [pc, #84]	; (8006978 <xTaskCheckForTimeOut+0x9c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d007      	beq.n	8006938 <xTaskCheckForTimeOut+0x5c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006932:	2301      	movs	r3, #1
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e016      	b.n	8006966 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	429a      	cmp	r2, r3
 8006940:	d20c      	bcs.n	800695c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad2      	subs	r2, r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f7ff ffaf 	bl	80068b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e004      	b.n	8006966 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006962:	2301      	movs	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006966:	f000 fd2d 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 800696a:	697b      	ldr	r3, [r7, #20]
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b006      	add	sp, #24
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20002c28 	.word	0x20002c28
 8006978:	20002c3c 	.word	0x20002c3c

0800697c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <vTaskMissedYield+0x10>)
 8006982:	2201      	movs	r2, #1
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20002c38 	.word	0x20002c38

08006990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006998:	f000 f84e 	bl	8006a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <prvIdleTask+0x1c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d9f9      	bls.n	8006998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069a4:	f000 fcec 	bl	8007380 <vPortYield>
		prvCheckTasksWaitingTermination();
 80069a8:	e7f6      	b.n	8006998 <prvIdleTask+0x8>
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	20002754 	.word	0x20002754

080069b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e00c      	b.n	80069d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	0013      	movs	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <prvInitialiseTaskLists+0x68>)
 80069c8:	189b      	adds	r3, r3, r2
 80069ca:	0018      	movs	r0, r3
 80069cc:	f7fe fe3a 	bl	8005644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3301      	adds	r3, #1
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b37      	cmp	r3, #55	; 0x37
 80069da:	d9ef      	bls.n	80069bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <prvInitialiseTaskLists+0x6c>)
 80069de:	0018      	movs	r0, r3
 80069e0:	f7fe fe30 	bl	8005644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <prvInitialiseTaskLists+0x70>)
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7fe fe2c 	bl	8005644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069ec:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <prvInitialiseTaskLists+0x74>)
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7fe fe28 	bl	8005644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvInitialiseTaskLists+0x78>)
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7fe fe24 	bl	8005644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <prvInitialiseTaskLists+0x7c>)
 80069fe:	0018      	movs	r0, r3
 8006a00:	f7fe fe20 	bl	8005644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <prvInitialiseTaskLists+0x80>)
 8006a06:	4a05      	ldr	r2, [pc, #20]	; (8006a1c <prvInitialiseTaskLists+0x6c>)
 8006a08:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <prvInitialiseTaskLists+0x84>)
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <prvInitialiseTaskLists+0x70>)
 8006a0e:	601a      	str	r2, [r3, #0]
}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b002      	add	sp, #8
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20002754 	.word	0x20002754
 8006a1c:	20002bb4 	.word	0x20002bb4
 8006a20:	20002bc8 	.word	0x20002bc8
 8006a24:	20002be4 	.word	0x20002be4
 8006a28:	20002bf8 	.word	0x20002bf8
 8006a2c:	20002c10 	.word	0x20002c10
 8006a30:	20002bdc 	.word	0x20002bdc
 8006a34:	20002be0 	.word	0x20002be0

08006a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a3e:	e01a      	b.n	8006a76 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006a40:	f000 fcae 	bl	80073a0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a44:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <prvCheckTasksWaitingTermination+0x50>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7fe fe78 	bl	8005746 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <prvCheckTasksWaitingTermination+0x54>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	1e5a      	subs	r2, r3, #1
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <prvCheckTasksWaitingTermination+0x54>)
 8006a5e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <prvCheckTasksWaitingTermination+0x58>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvCheckTasksWaitingTermination+0x58>)
 8006a68:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006a6a:	f000 fcab 	bl	80073c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0018      	movs	r0, r3
 8006a72:	f000 f80f 	bl	8006a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a76:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <prvCheckTasksWaitingTermination+0x58>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e0      	bne.n	8006a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b002      	add	sp, #8
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20002bf8 	.word	0x20002bf8
 8006a8c:	20002c24 	.word	0x20002c24
 8006a90:	20002c0c 	.word	0x20002c0c

08006a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3354      	adds	r3, #84	; 0x54
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f000 feff 	bl	80078a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	22b9      	movs	r2, #185	; 0xb9
 8006aaa:	5c9b      	ldrb	r3, [r3, r2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d109      	bne.n	8006ac4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 fdb1 	bl	800761c <vPortFree>
				vPortFree( pxTCB );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 fdad 	bl	800761c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ac2:	e010      	b.n	8006ae6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	22b9      	movs	r2, #185	; 0xb9
 8006ac8:	5c9b      	ldrb	r3, [r3, r2]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d104      	bne.n	8006ad8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f000 fda3 	bl	800761c <vPortFree>
	}
 8006ad6:	e006      	b.n	8006ae6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	22b9      	movs	r2, #185	; 0xb9
 8006adc:	5c9b      	ldrb	r3, [r3, r2]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d001      	beq.n	8006ae6 <prvDeleteTCB+0x52>
 8006ae2:	b672      	cpsid	i
 8006ae4:	e7fe      	b.n	8006ae4 <prvDeleteTCB+0x50>
	}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b002      	add	sp, #8
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af6:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <prvResetNextTaskUnblockTime+0x40>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <prvResetNextTaskUnblockTime+0x14>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <prvResetNextTaskUnblockTime+0x16>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <prvResetNextTaskUnblockTime+0x44>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4252      	negs	r2, r2
 8006b10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b12:	e008      	b.n	8006b26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <prvResetNextTaskUnblockTime+0x40>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <prvResetNextTaskUnblockTime+0x44>)
 8006b24:	601a      	str	r2, [r3, #0]
}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	20002bdc 	.word	0x20002bdc
 8006b34:	20002c44 	.word	0x20002c44

08006b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <xTaskGetSchedulerState+0x30>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b46:	2301      	movs	r3, #1
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	e008      	b.n	8006b5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b4c:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <xTaskGetSchedulerState+0x34>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b54:	2302      	movs	r3, #2
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	e001      	b.n	8006b5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b5e:	687b      	ldr	r3, [r7, #4]
	}
 8006b60:	0018      	movs	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b002      	add	sp, #8
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20002c30 	.word	0x20002c30
 8006b6c:	20002c4c 	.word	0x20002c4c

08006b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d044      	beq.n	8006c10 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b86:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <xTaskPriorityDisinherit+0xac>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d001      	beq.n	8006b94 <xTaskPriorityDisinherit+0x24>
 8006b90:	b672      	cpsid	i
 8006b92:	e7fe      	b.n	8006b92 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <xTaskPriorityDisinherit+0x30>
 8006b9c:	b672      	cpsid	i
 8006b9e:	e7fe      	b.n	8006b9e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba4:	1e5a      	subs	r2, r3, #1
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d02c      	beq.n	8006c10 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d128      	bne.n	8006c10 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7fe fdbf 	bl	8005746 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	2238      	movs	r2, #56	; 0x38
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <xTaskPriorityDisinherit+0xb0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d903      	bls.n	8006bf0 <xTaskPriorityDisinherit+0x80>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <xTaskPriorityDisinherit+0xb0>)
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	0013      	movs	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	189b      	adds	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <xTaskPriorityDisinherit+0xb4>)
 8006bfe:	189a      	adds	r2, r3, r2
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3304      	adds	r3, #4
 8006c04:	0019      	movs	r1, r3
 8006c06:	0010      	movs	r0, r2
 8006c08:	f7fe fd45 	bl	8005696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c10:	68fb      	ldr	r3, [r7, #12]
	}
 8006c12:	0018      	movs	r0, r3
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b004      	add	sp, #16
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	20002750 	.word	0x20002750
 8006c20:	20002c2c 	.word	0x20002c2c
 8006c24:	20002754 	.word	0x20002754

08006c28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c32:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c38:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f7fe fd81 	bl	8005746 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3301      	adds	r3, #1
 8006c48:	d10b      	bne.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c50:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	1d1a      	adds	r2, r3, #4
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c58:	0011      	movs	r1, r2
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f7fe fd1b 	bl	8005696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c60:	e026      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	18d3      	adds	r3, r2, r3
 8006c68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d209      	bcs.n	8006c8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3304      	adds	r3, #4
 8006c84:	0019      	movs	r1, r3
 8006c86:	0010      	movs	r0, r2
 8006c88:	f7fe fd27 	bl	80056da <vListInsert>
}
 8006c8c:	e010      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	0019      	movs	r1, r3
 8006c9a:	0010      	movs	r0, r2
 8006c9c:	f7fe fd1d 	bl	80056da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d202      	bcs.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006caa:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	601a      	str	r2, [r3, #0]
}
 8006cb0:	46c0      	nop			; (mov r8, r8)
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	b004      	add	sp, #16
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20002c28 	.word	0x20002c28
 8006cbc:	20002750 	.word	0x20002750
 8006cc0:	20002c10 	.word	0x20002c10
 8006cc4:	20002be0 	.word	0x20002be0
 8006cc8:	20002bdc 	.word	0x20002bdc
 8006ccc:	20002c44 	.word	0x20002c44

08006cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b089      	sub	sp, #36	; 0x24
 8006cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cda:	f000 fa87 	bl	80071ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cde:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <xTimerCreateTimerTask+0x6c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d020      	beq.n	8006d28 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cee:	003a      	movs	r2, r7
 8006cf0:	1d39      	adds	r1, r7, #4
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7fe fc8c 	bl	8005614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cfc:	683c      	ldr	r4, [r7, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	490f      	ldr	r1, [pc, #60]	; (8006d40 <xTimerCreateTimerTask+0x70>)
 8006d04:	480f      	ldr	r0, [pc, #60]	; (8006d44 <xTimerCreateTimerTask+0x74>)
 8006d06:	9202      	str	r2, [sp, #8]
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	2306      	movs	r3, #6
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	0022      	movs	r2, r4
 8006d12:	f7ff f968 	bl	8005fe6 <xTaskCreateStatic>
 8006d16:	0002      	movs	r2, r0
 8006d18:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <xTimerCreateTimerTask+0x78>)
 8006d1a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <xTimerCreateTimerTask+0x78>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006d24:	2301      	movs	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <xTimerCreateTimerTask+0x62>
 8006d2e:	b672      	cpsid	i
 8006d30:	e7fe      	b.n	8006d30 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b005      	add	sp, #20
 8006d3a:	bd90      	pop	{r4, r7, pc}
 8006d3c:	20002c80 	.word	0x20002c80
 8006d40:	08007a84 	.word	0x08007a84
 8006d44:	08006e51 	.word	0x08006e51
 8006d48:	20002c84 	.word	0x20002c84

08006d4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d4c:	b590      	push	{r4, r7, lr}
 8006d4e:	b08b      	sub	sp, #44	; 0x2c
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <xTimerGenericCommand+0x1c>
 8006d64:	b672      	cpsid	i
 8006d66:	e7fe      	b.n	8006d66 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d68:	4b1c      	ldr	r3, [pc, #112]	; (8006ddc <xTimerGenericCommand+0x90>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d030      	beq.n	8006dd2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d70:	2414      	movs	r4, #20
 8006d72:	193b      	adds	r3, r7, r4
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d78:	193b      	adds	r3, r7, r4
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d7e:	193b      	adds	r3, r7, r4
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b05      	cmp	r3, #5
 8006d88:	dc19      	bgt.n	8006dbe <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d8a:	f7ff fed5 	bl	8006b38 <xTaskGetSchedulerState>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d109      	bne.n	8006da8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d94:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <xTimerGenericCommand+0x90>)
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9a:	1939      	adds	r1, r7, r4
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f7fe fdc0 	bl	8005922 <xQueueGenericSend>
 8006da2:	0003      	movs	r3, r0
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
 8006da6:	e014      	b.n	8006dd2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <xTimerGenericCommand+0x90>)
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	2314      	movs	r3, #20
 8006dae:	18f9      	adds	r1, r7, r3
 8006db0:	2300      	movs	r3, #0
 8006db2:	2200      	movs	r2, #0
 8006db4:	f7fe fdb5 	bl	8005922 <xQueueGenericSend>
 8006db8:	0003      	movs	r3, r0
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbc:	e009      	b.n	8006dd2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <xTimerGenericCommand+0x90>)
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	2314      	movs	r3, #20
 8006dc6:	18f9      	adds	r1, r7, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f7fe fe6e 	bl	8005aaa <xQueueGenericSendFromISR>
 8006dce:	0003      	movs	r3, r0
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b00b      	add	sp, #44	; 0x2c
 8006dda:	bd90      	pop	{r4, r7, pc}
 8006ddc:	20002c80 	.word	0x20002c80

08006de0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dea:	4b18      	ldr	r3, [pc, #96]	; (8006e4c <prvProcessExpiredTimer+0x6c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3304      	adds	r3, #4
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f7fe fca4 	bl	8005746 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d119      	bne.n	8006e3a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	18d1      	adds	r1, r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f8b6 	bl	8006f84 <prvInsertTimerInActiveList>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d00e      	beq.n	8006e3a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	2300      	movs	r3, #0
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	2300      	movs	r3, #0
 8006e26:	2100      	movs	r1, #0
 8006e28:	f7ff ff90 	bl	8006d4c <xTimerGenericCommand>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <prvProcessExpiredTimer+0x5a>
 8006e36:	b672      	cpsid	i
 8006e38:	e7fe      	b.n	8006e38 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	0010      	movs	r0, r2
 8006e42:	4798      	blx	r3
}
 8006e44:	46c0      	nop			; (mov r8, r8)
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b004      	add	sp, #16
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20002c78 	.word	0x20002c78

08006e50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e58:	2308      	movs	r3, #8
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 f851 	bl	8006f04 <prvGetNextExpireTime>
 8006e62:	0003      	movs	r3, r0
 8006e64:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	0011      	movs	r1, r2
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 f803 	bl	8006e78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e72:	f000 f8c9 	bl	8007008 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e76:	e7ef      	b.n	8006e58 <prvTimerTask+0x8>

08006e78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e82:	f7ff fac3 	bl	800640c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e86:	2308      	movs	r3, #8
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f000 f85a 	bl	8006f44 <prvSampleTimeNow>
 8006e90:	0003      	movs	r3, r0
 8006e92:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d129      	bne.n	8006eee <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10c      	bne.n	8006eba <prvProcessTimerOrBlockTask+0x42>
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d808      	bhi.n	8006eba <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006ea8:	f7ff fabc 	bl	8006424 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	0011      	movs	r1, r2
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7ff ff94 	bl	8006de0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006eb8:	e01b      	b.n	8006ef2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d006      	beq.n	8006ece <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ec0:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <prvProcessTimerOrBlockTask+0x84>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	425a      	negs	r2, r3
 8006ec8:	4153      	adcs	r3, r2
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ece:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <prvProcessTimerOrBlockTask+0x88>)
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	0019      	movs	r1, r3
 8006edc:	f7ff f850 	bl	8005f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ee0:	f7ff faa0 	bl	8006424 <xTaskResumeAll>
 8006ee4:	1e03      	subs	r3, r0, #0
 8006ee6:	d104      	bne.n	8006ef2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006ee8:	f000 fa4a 	bl	8007380 <vPortYield>
}
 8006eec:	e001      	b.n	8006ef2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006eee:	f7ff fa99 	bl	8006424 <xTaskResumeAll>
}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b004      	add	sp, #16
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	20002c7c 	.word	0x20002c7c
 8006f00:	20002c80 	.word	0x20002c80

08006f04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <prvGetNextExpireTime+0x3c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	425a      	negs	r2, r3
 8006f14:	4153      	adcs	r3, r2
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	001a      	movs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d105      	bne.n	8006f32 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f26:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <prvGetNextExpireTime+0x3c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e001      	b.n	8006f36 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	0018      	movs	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b004      	add	sp, #16
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20002c78 	.word	0x20002c78

08006f44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f4c:	f7ff faf6 	bl	800653c <xTaskGetTickCount>
 8006f50:	0003      	movs	r3, r0
 8006f52:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <prvSampleTimeNow+0x3c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d205      	bcs.n	8006f6a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006f5e:	f000 f8eb 	bl	8007138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e002      	b.n	8006f70 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f70:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <prvSampleTimeNow+0x3c>)
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	0018      	movs	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b004      	add	sp, #16
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20002c88 	.word	0x20002c88

08006f84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d812      	bhi.n	8006fd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d302      	bcc.n	8006fbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e01b      	b.n	8006ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fbe:	4b10      	ldr	r3, [pc, #64]	; (8007000 <prvInsertTimerInActiveList+0x7c>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	0010      	movs	r0, r2
 8006fca:	f7fe fb86 	bl	80056da <vListInsert>
 8006fce:	e012      	b.n	8006ff6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d206      	bcs.n	8006fe6 <prvInsertTimerInActiveList+0x62>
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d302      	bcc.n	8006fe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	e007      	b.n	8006ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <prvInsertTimerInActiveList+0x80>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3304      	adds	r3, #4
 8006fee:	0019      	movs	r1, r3
 8006ff0:	0010      	movs	r0, r2
 8006ff2:	f7fe fb72 	bl	80056da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ff6:	697b      	ldr	r3, [r7, #20]
}
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b006      	add	sp, #24
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20002c7c 	.word	0x20002c7c
 8007004:	20002c78 	.word	0x20002c78

08007008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b08d      	sub	sp, #52	; 0x34
 800700c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800700e:	e07f      	b.n	8007110 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007010:	2208      	movs	r2, #8
 8007012:	18bb      	adds	r3, r7, r2
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	da0f      	bge.n	800703a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800701a:	18bb      	adds	r3, r7, r2
 800701c:	3304      	adds	r3, #4
 800701e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <prvProcessReceivedCommands+0x22>
 8007026:	b672      	cpsid	i
 8007028:	e7fe      	b.n	8007028 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	6858      	ldr	r0, [r3, #4]
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	0019      	movs	r1, r3
 8007038:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800703a:	2208      	movs	r2, #8
 800703c:	18bb      	adds	r3, r7, r2
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db64      	blt.n	800710e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007044:	18bb      	adds	r3, r7, r2
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	3304      	adds	r3, #4
 8007056:	0018      	movs	r0, r3
 8007058:	f7fe fb75 	bl	8005746 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800705c:	1d3b      	adds	r3, r7, #4
 800705e:	0018      	movs	r0, r3
 8007060:	f7ff ff70 	bl	8006f44 <prvSampleTimeNow>
 8007064:	0003      	movs	r3, r0
 8007066:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007068:	2308      	movs	r3, #8
 800706a:	18fb      	adds	r3, r7, r3
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b09      	cmp	r3, #9
 8007070:	d84e      	bhi.n	8007110 <prvProcessReceivedCommands+0x108>
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	4b2e      	ldr	r3, [pc, #184]	; (8007130 <prvProcessReceivedCommands+0x128>)
 8007076:	18d3      	adds	r3, r2, r3
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800707c:	2408      	movs	r4, #8
 800707e:	193b      	adds	r3, r7, r4
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	18d1      	adds	r1, r2, r3
 8007088:	193b      	adds	r3, r7, r4
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	6a38      	ldr	r0, [r7, #32]
 8007090:	f7ff ff78 	bl	8006f84 <prvInsertTimerInActiveList>
 8007094:	1e03      	subs	r3, r0, #0
 8007096:	d03b      	beq.n	8007110 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	6a3a      	ldr	r2, [r7, #32]
 800709e:	0010      	movs	r0, r2
 80070a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d132      	bne.n	8007110 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070aa:	193b      	adds	r3, r7, r4
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	18d2      	adds	r2, r2, r3
 80070b4:	6a38      	ldr	r0, [r7, #32]
 80070b6:	2300      	movs	r3, #0
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	2300      	movs	r3, #0
 80070bc:	2100      	movs	r1, #0
 80070be:	f7ff fe45 	bl	8006d4c <xTimerGenericCommand>
 80070c2:	0003      	movs	r3, r0
 80070c4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d121      	bne.n	8007110 <prvProcessReceivedCommands+0x108>
 80070cc:	b672      	cpsid	i
 80070ce:	e7fe      	b.n	80070ce <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070d0:	2308      	movs	r3, #8
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <prvProcessReceivedCommands+0xde>
 80070e2:	b672      	cpsid	i
 80070e4:	e7fe      	b.n	80070e4 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	18d1      	adds	r1, r2, r3
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	6a38      	ldr	r0, [r7, #32]
 80070f4:	f7ff ff46 	bl	8006f84 <prvInsertTimerInActiveList>
					break;
 80070f8:	e00a      	b.n	8007110 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	222c      	movs	r2, #44	; 0x2c
 80070fe:	5c9b      	ldrb	r3, [r3, r2]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	0018      	movs	r0, r3
 8007108:	f000 fa88 	bl	800761c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800710c:	e000      	b.n	8007110 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800710e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007110:	4b08      	ldr	r3, [pc, #32]	; (8007134 <prvProcessReceivedCommands+0x12c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2208      	movs	r2, #8
 8007116:	18b9      	adds	r1, r7, r2
 8007118:	2200      	movs	r2, #0
 800711a:	0018      	movs	r0, r3
 800711c:	f7fe fd36 	bl	8005b8c <xQueueReceive>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d000      	beq.n	8007126 <prvProcessReceivedCommands+0x11e>
 8007124:	e774      	b.n	8007010 <prvProcessReceivedCommands+0x8>
	}
}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	46c0      	nop			; (mov r8, r8)
 800712a:	46bd      	mov	sp, r7
 800712c:	b00b      	add	sp, #44	; 0x2c
 800712e:	bd90      	pop	{r4, r7, pc}
 8007130:	08007ba4 	.word	0x08007ba4
 8007134:	20002c80 	.word	0x20002c80

08007138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800713e:	e03e      	b.n	80071be <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007140:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <prvSwitchTimerLists+0xac>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800714a:	4b26      	ldr	r3, [pc, #152]	; (80071e4 <prvSwitchTimerLists+0xac>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3304      	adds	r3, #4
 8007158:	0018      	movs	r0, r3
 800715a:	f7fe faf4 	bl	8005746 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	0010      	movs	r0, r2
 8007166:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d126      	bne.n	80071be <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	429a      	cmp	r2, r3
 8007180:	d90e      	bls.n	80071a0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800718e:	4b15      	ldr	r3, [pc, #84]	; (80071e4 <prvSwitchTimerLists+0xac>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3304      	adds	r3, #4
 8007196:	0019      	movs	r1, r3
 8007198:	0010      	movs	r0, r2
 800719a:	f7fe fa9e 	bl	80056da <vListInsert>
 800719e:	e00e      	b.n	80071be <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	2100      	movs	r1, #0
 80071ac:	f7ff fdce 	bl	8006d4c <xTimerGenericCommand>
 80071b0:	0003      	movs	r3, r0
 80071b2:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <prvSwitchTimerLists+0x86>
 80071ba:	b672      	cpsid	i
 80071bc:	e7fe      	b.n	80071bc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071be:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <prvSwitchTimerLists+0xac>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1bb      	bne.n	8007140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071c8:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <prvSwitchTimerLists+0xac>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <prvSwitchTimerLists+0xb0>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <prvSwitchTimerLists+0xac>)
 80071d4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80071d6:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <prvSwitchTimerLists+0xb0>)
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	601a      	str	r2, [r3, #0]
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b006      	add	sp, #24
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20002c78 	.word	0x20002c78
 80071e8:	20002c7c 	.word	0x20002c7c

080071ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071f2:	f000 f8d5 	bl	80073a0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071f6:	4b16      	ldr	r3, [pc, #88]	; (8007250 <prvCheckForValidListAndQueue+0x64>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d123      	bne.n	8007246 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <prvCheckForValidListAndQueue+0x68>)
 8007200:	0018      	movs	r0, r3
 8007202:	f7fe fa1f 	bl	8005644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <prvCheckForValidListAndQueue+0x6c>)
 8007208:	0018      	movs	r0, r3
 800720a:	f7fe fa1b 	bl	8005644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <prvCheckForValidListAndQueue+0x70>)
 8007210:	4a10      	ldr	r2, [pc, #64]	; (8007254 <prvCheckForValidListAndQueue+0x68>)
 8007212:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007214:	4b12      	ldr	r3, [pc, #72]	; (8007260 <prvCheckForValidListAndQueue+0x74>)
 8007216:	4a10      	ldr	r2, [pc, #64]	; (8007258 <prvCheckForValidListAndQueue+0x6c>)
 8007218:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800721a:	4b12      	ldr	r3, [pc, #72]	; (8007264 <prvCheckForValidListAndQueue+0x78>)
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <prvCheckForValidListAndQueue+0x7c>)
 800721e:	2100      	movs	r1, #0
 8007220:	9100      	str	r1, [sp, #0]
 8007222:	2110      	movs	r1, #16
 8007224:	200a      	movs	r0, #10
 8007226:	f7fe fb0a 	bl	800583e <xQueueGenericCreateStatic>
 800722a:	0002      	movs	r2, r0
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <prvCheckForValidListAndQueue+0x64>)
 800722e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <prvCheckForValidListAndQueue+0x64>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d006      	beq.n	8007246 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <prvCheckForValidListAndQueue+0x64>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a0b      	ldr	r2, [pc, #44]	; (800726c <prvCheckForValidListAndQueue+0x80>)
 800723e:	0011      	movs	r1, r2
 8007240:	0018      	movs	r0, r3
 8007242:	f7fe fe75 	bl	8005f30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007246:	f000 f8bd 	bl	80073c4 <vPortExitCritical>
}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20002c80 	.word	0x20002c80
 8007254:	20002c50 	.word	0x20002c50
 8007258:	20002c64 	.word	0x20002c64
 800725c:	20002c78 	.word	0x20002c78
 8007260:	20002c7c 	.word	0x20002c7c
 8007264:	20002d2c 	.word	0x20002d2c
 8007268:	20002c8c 	.word	0x20002c8c
 800726c:	08007a8c 	.word	0x08007a8c

08007270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3b04      	subs	r3, #4
 8007280:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2280      	movs	r2, #128	; 0x80
 8007286:	0452      	lsls	r2, r2, #17
 8007288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3b04      	subs	r3, #4
 800728e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3b04      	subs	r3, #4
 800729a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800729c:	4a08      	ldr	r2, [pc, #32]	; (80072c0 <pxPortInitialiseStack+0x50>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3b14      	subs	r3, #20
 80072a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b20      	subs	r3, #32
 80072b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072b4:	68fb      	ldr	r3, [r7, #12]
}
 80072b6:	0018      	movs	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	b004      	add	sp, #16
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	080072c5 	.word	0x080072c5

080072c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072ce:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <prvTaskExitError+0x2c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	d001      	beq.n	80072da <prvTaskExitError+0x16>
 80072d6:	b672      	cpsid	i
 80072d8:	e7fe      	b.n	80072d8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80072da:	b672      	cpsid	i
	while( ulDummy == 0 )
 80072dc:	46c0      	nop			; (mov r8, r8)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0fc      	beq.n	80072de <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072e4:	46c0      	nop			; (mov r8, r8)
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b002      	add	sp, #8
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	20001cd8 	.word	0x20001cd8

080072f4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80072f8:	46c0      	nop			; (mov r8, r8)
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007300:	4a0b      	ldr	r2, [pc, #44]	; (8007330 <pxCurrentTCBConst2>)
 8007302:	6813      	ldr	r3, [r2, #0]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	3020      	adds	r0, #32
 8007308:	f380 8809 	msr	PSP, r0
 800730c:	2002      	movs	r0, #2
 800730e:	f380 8814 	msr	CONTROL, r0
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007318:	46ae      	mov	lr, r5
 800731a:	bc08      	pop	{r3}
 800731c:	bc04      	pop	{r2}
 800731e:	b662      	cpsie	i
 8007320:	4718      	bx	r3
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	46c0      	nop			; (mov r8, r8)
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	46c0      	nop			; (mov r8, r8)
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	46c0      	nop			; (mov r8, r8)
 800732e:	46c0      	nop			; (mov r8, r8)

08007330 <pxCurrentTCBConst2>:
 8007330:	20002750 	.word	0x20002750
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007334:	46c0      	nop			; (mov r8, r8)
 8007336:	46c0      	nop			; (mov r8, r8)

08007338 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800733c:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <xPortStartScheduler+0x40>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <xPortStartScheduler+0x40>)
 8007342:	21ff      	movs	r1, #255	; 0xff
 8007344:	0409      	lsls	r1, r1, #16
 8007346:	430a      	orrs	r2, r1
 8007348:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <xPortStartScheduler+0x40>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <xPortStartScheduler+0x40>)
 8007350:	21ff      	movs	r1, #255	; 0xff
 8007352:	0609      	lsls	r1, r1, #24
 8007354:	430a      	orrs	r2, r1
 8007356:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007358:	f000 f898 	bl	800748c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800735c:	4b07      	ldr	r3, [pc, #28]	; (800737c <xPortStartScheduler+0x44>)
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007362:	f7ff ffcd 	bl	8007300 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007366:	f7ff f9ab 	bl	80066c0 <vTaskSwitchContext>
	prvTaskExitError();
 800736a:	f7ff ffab 	bl	80072c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800736e:	2300      	movs	r3, #0
}
 8007370:	0018      	movs	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	e000ed20 	.word	0xe000ed20
 800737c:	20001cd8 	.word	0x20001cd8

08007380 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <vPortYield+0x1c>)
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	0552      	lsls	r2, r2, #21
 800738a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800738c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007390:	f3bf 8f6f 	isb	sy
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80073a4:	b672      	cpsid	i
    uxCriticalNesting++;
 80073a6:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <vPortEnterCritical+0x20>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <vPortEnterCritical+0x20>)
 80073ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80073b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80073b4:	f3bf 8f6f 	isb	sy
}
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	20001cd8 	.word	0x20001cd8

080073c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073c8:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <vPortExitCritical+0x2c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <vPortExitCritical+0x10>
 80073d0:	b672      	cpsid	i
 80073d2:	e7fe      	b.n	80073d2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <vPortExitCritical+0x2c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	1e5a      	subs	r2, r3, #1
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <vPortExitCritical+0x2c>)
 80073dc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80073de:	4b04      	ldr	r3, [pc, #16]	; (80073f0 <vPortExitCritical+0x2c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d100      	bne.n	80073e8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80073e6:	b662      	cpsie	i
    }
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	20001cd8 	.word	0x20001cd8

080073f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80073f4:	f3ef 8010 	mrs	r0, PRIMASK
 80073f8:	b672      	cpsid	i
 80073fa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80073fc:	46c0      	nop			; (mov r8, r8)
 80073fe:	0018      	movs	r0, r3

08007400 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007400:	f380 8810 	msr	PRIMASK, r0
 8007404:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007406:	46c0      	nop			; (mov r8, r8)
	...

08007410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <pxCurrentTCBConst>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	3820      	subs	r0, #32
 800741a:	6010      	str	r0, [r2, #0]
 800741c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800741e:	4644      	mov	r4, r8
 8007420:	464d      	mov	r5, r9
 8007422:	4656      	mov	r6, sl
 8007424:	465f      	mov	r7, fp
 8007426:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007428:	b508      	push	{r3, lr}
 800742a:	b672      	cpsid	i
 800742c:	f7ff f948 	bl	80066c0 <vTaskSwitchContext>
 8007430:	b662      	cpsie	i
 8007432:	bc0c      	pop	{r2, r3}
 8007434:	6811      	ldr	r1, [r2, #0]
 8007436:	6808      	ldr	r0, [r1, #0]
 8007438:	3010      	adds	r0, #16
 800743a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800743c:	46a0      	mov	r8, r4
 800743e:	46a9      	mov	r9, r5
 8007440:	46b2      	mov	sl, r6
 8007442:	46bb      	mov	fp, r7
 8007444:	f380 8809 	msr	PSP, r0
 8007448:	3820      	subs	r0, #32
 800744a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800744c:	4718      	bx	r3
 800744e:	46c0      	nop			; (mov r8, r8)

08007450 <pxCurrentTCBConst>:
 8007450:	20002750 	.word	0x20002750
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46c0      	nop			; (mov r8, r8)

08007458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800745e:	f7ff ffc9 	bl	80073f4 <ulSetInterruptMaskFromISR>
 8007462:	0003      	movs	r3, r0
 8007464:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007466:	f7ff f877 	bl	8006558 <xTaskIncrementTick>
 800746a:	1e03      	subs	r3, r0, #0
 800746c:	d003      	beq.n	8007476 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <xPortSysTickHandler+0x30>)
 8007470:	2280      	movs	r2, #128	; 0x80
 8007472:	0552      	lsls	r2, r2, #21
 8007474:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0018      	movs	r0, r3
 800747a:	f7ff ffc1 	bl	8007400 <vClearInterruptMaskFromISR>
}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	46bd      	mov	sp, r7
 8007482:	b002      	add	sp, #8
 8007484:	bd80      	pop	{r7, pc}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <prvSetupTimerInterrupt+0x34>)
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <prvSetupTimerInterrupt+0x38>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800749c:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <prvSetupTimerInterrupt+0x3c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	22fa      	movs	r2, #250	; 0xfa
 80074a2:	0091      	lsls	r1, r2, #2
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7f8 fe2f 	bl	8000108 <__udivsi3>
 80074aa:	0003      	movs	r3, r0
 80074ac:	001a      	movs	r2, r3
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <prvSetupTimerInterrupt+0x40>)
 80074b0:	3a01      	subs	r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <prvSetupTimerInterrupt+0x34>)
 80074b6:	2207      	movs	r2, #7
 80074b8:	601a      	str	r2, [r3, #0]
}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	e000e010 	.word	0xe000e010
 80074c4:	e000e018 	.word	0xe000e018
 80074c8:	20001ccc 	.word	0x20001ccc
 80074cc:	e000e014 	.word	0xe000e014

080074d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80074dc:	f7fe ff96 	bl	800640c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074e0:	4b49      	ldr	r3, [pc, #292]	; (8007608 <pvPortMalloc+0x138>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e8:	f000 f8e0 	bl	80076ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074ec:	4b47      	ldr	r3, [pc, #284]	; (800760c <pvPortMalloc+0x13c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4013      	ands	r3, r2
 80074f4:	d000      	beq.n	80074f8 <pvPortMalloc+0x28>
 80074f6:	e079      	b.n	80075ec <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d012      	beq.n	8007524 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80074fe:	2208      	movs	r2, #8
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	189b      	adds	r3, r3, r2
 8007504:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2207      	movs	r2, #7
 800750a:	4013      	ands	r3, r2
 800750c:	d00a      	beq.n	8007524 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2207      	movs	r2, #7
 8007512:	4393      	bics	r3, r2
 8007514:	3308      	adds	r3, #8
 8007516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2207      	movs	r2, #7
 800751c:	4013      	ands	r3, r2
 800751e:	d001      	beq.n	8007524 <pvPortMalloc+0x54>
 8007520:	b672      	cpsid	i
 8007522:	e7fe      	b.n	8007522 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d060      	beq.n	80075ec <pvPortMalloc+0x11c>
 800752a:	4b39      	ldr	r3, [pc, #228]	; (8007610 <pvPortMalloc+0x140>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d85b      	bhi.n	80075ec <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007534:	4b37      	ldr	r3, [pc, #220]	; (8007614 <pvPortMalloc+0x144>)
 8007536:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007538:	4b36      	ldr	r3, [pc, #216]	; (8007614 <pvPortMalloc+0x144>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800753e:	e004      	b.n	800754a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	429a      	cmp	r2, r3
 8007552:	d903      	bls.n	800755c <pvPortMalloc+0x8c>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f1      	bne.n	8007540 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800755c:	4b2a      	ldr	r3, [pc, #168]	; (8007608 <pvPortMalloc+0x138>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	429a      	cmp	r2, r3
 8007564:	d042      	beq.n	80075ec <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2208      	movs	r2, #8
 800756c:	189b      	adds	r3, r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	2308      	movs	r3, #8
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	429a      	cmp	r2, r3
 8007586:	d916      	bls.n	80075b6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	18d3      	adds	r3, r2, r3
 800758e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2207      	movs	r2, #7
 8007594:	4013      	ands	r3, r2
 8007596:	d001      	beq.n	800759c <pvPortMalloc+0xcc>
 8007598:	b672      	cpsid	i
 800759a:	e7fe      	b.n	800759a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	1ad2      	subs	r2, r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f8db 	bl	800776c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075b6:	4b16      	ldr	r3, [pc, #88]	; (8007610 <pvPortMalloc+0x140>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <pvPortMalloc+0x140>)
 80075c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075c4:	4b12      	ldr	r3, [pc, #72]	; (8007610 <pvPortMalloc+0x140>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	4b13      	ldr	r3, [pc, #76]	; (8007618 <pvPortMalloc+0x148>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d203      	bcs.n	80075d8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075d0:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <pvPortMalloc+0x140>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	4b10      	ldr	r3, [pc, #64]	; (8007618 <pvPortMalloc+0x148>)
 80075d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <pvPortMalloc+0x13c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075ec:	f7fe ff1a 	bl	8006424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2207      	movs	r2, #7
 80075f4:	4013      	ands	r3, r2
 80075f6:	d001      	beq.n	80075fc <pvPortMalloc+0x12c>
 80075f8:	b672      	cpsid	i
 80075fa:	e7fe      	b.n	80075fa <pvPortMalloc+0x12a>
	return pvReturn;
 80075fc:	68fb      	ldr	r3, [r7, #12]
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b006      	add	sp, #24
 8007604:	bd80      	pop	{r7, pc}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	20003984 	.word	0x20003984
 800760c:	20003990 	.word	0x20003990
 8007610:	20003988 	.word	0x20003988
 8007614:	2000397c 	.word	0x2000397c
 8007618:	2000398c 	.word	0x2000398c

0800761c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d035      	beq.n	800769a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800762e:	2308      	movs	r3, #8
 8007630:	425b      	negs	r3, r3
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	18d3      	adds	r3, r2, r3
 8007636:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <vPortFree+0x88>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4013      	ands	r3, r2
 8007646:	d101      	bne.n	800764c <vPortFree+0x30>
 8007648:	b672      	cpsid	i
 800764a:	e7fe      	b.n	800764a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <vPortFree+0x3c>
 8007654:	b672      	cpsid	i
 8007656:	e7fe      	b.n	8007656 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	4b11      	ldr	r3, [pc, #68]	; (80076a4 <vPortFree+0x88>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4013      	ands	r3, r2
 8007662:	d01a      	beq.n	800769a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d116      	bne.n	800769a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <vPortFree+0x88>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	43db      	mvns	r3, r3
 8007676:	401a      	ands	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800767c:	f7fe fec6 	bl	800640c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <vPortFree+0x8c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	18d2      	adds	r2, r2, r3
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <vPortFree+0x8c>)
 800768c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	0018      	movs	r0, r3
 8007692:	f000 f86b 	bl	800776c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007696:	f7fe fec5 	bl	8006424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	46bd      	mov	sp, r7
 800769e:	b004      	add	sp, #16
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	20003990 	.word	0x20003990
 80076a8:	20003988 	.word	0x20003988

080076ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076b2:	23c0      	movs	r3, #192	; 0xc0
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076b8:	4b26      	ldr	r3, [pc, #152]	; (8007754 <prvHeapInit+0xa8>)
 80076ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2207      	movs	r2, #7
 80076c0:	4013      	ands	r3, r2
 80076c2:	d00c      	beq.n	80076de <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3307      	adds	r3, #7
 80076c8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2207      	movs	r2, #7
 80076ce:	4393      	bics	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	4b1e      	ldr	r3, [pc, #120]	; (8007754 <prvHeapInit+0xa8>)
 80076da:	18d3      	adds	r3, r2, r3
 80076dc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076e2:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <prvHeapInit+0xac>)
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076e8:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <prvHeapInit+0xac>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	18d3      	adds	r3, r2, r3
 80076f4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076f6:	2208      	movs	r2, #8
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2207      	movs	r2, #7
 8007702:	4393      	bics	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4b14      	ldr	r3, [pc, #80]	; (800775c <prvHeapInit+0xb0>)
 800770a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800770c:	4b13      	ldr	r3, [pc, #76]	; (800775c <prvHeapInit+0xb0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007714:	4b11      	ldr	r3, [pc, #68]	; (800775c <prvHeapInit+0xb0>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	1ad2      	subs	r2, r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800772a:	4b0c      	ldr	r3, [pc, #48]	; (800775c <prvHeapInit+0xb0>)
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <prvHeapInit+0xb4>)
 8007738:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <prvHeapInit+0xb8>)
 8007740:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <prvHeapInit+0xbc>)
 8007744:	2280      	movs	r2, #128	; 0x80
 8007746:	0612      	lsls	r2, r2, #24
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	46bd      	mov	sp, r7
 800774e:	b004      	add	sp, #16
 8007750:	bd80      	pop	{r7, pc}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	20002d7c 	.word	0x20002d7c
 8007758:	2000397c 	.word	0x2000397c
 800775c:	20003984 	.word	0x20003984
 8007760:	2000398c 	.word	0x2000398c
 8007764:	20003988 	.word	0x20003988
 8007768:	20003990 	.word	0x20003990

0800776c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007774:	4b27      	ldr	r3, [pc, #156]	; (8007814 <prvInsertBlockIntoFreeList+0xa8>)
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e002      	b.n	8007780 <prvInsertBlockIntoFreeList+0x14>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	429a      	cmp	r2, r3
 8007788:	d8f7      	bhi.n	800777a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	18d3      	adds	r3, r2, r3
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d108      	bne.n	80077ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	18d2      	adds	r2, r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	18d2      	adds	r2, r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d118      	bne.n	80077f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b14      	ldr	r3, [pc, #80]	; (8007818 <prvInsertBlockIntoFreeList+0xac>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d00d      	beq.n	80077ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	18d2      	adds	r2, r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e008      	b.n	80077fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077ea:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <prvInsertBlockIntoFreeList+0xac>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e003      	b.n	80077fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d002      	beq.n	800780a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	46bd      	mov	sp, r7
 800780e:	b004      	add	sp, #16
 8007810:	bd80      	pop	{r7, pc}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	2000397c 	.word	0x2000397c
 8007818:	20003984 	.word	0x20003984

0800781c <__libc_init_array>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	2600      	movs	r6, #0
 8007820:	4d0c      	ldr	r5, [pc, #48]	; (8007854 <__libc_init_array+0x38>)
 8007822:	4c0d      	ldr	r4, [pc, #52]	; (8007858 <__libc_init_array+0x3c>)
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	42a6      	cmp	r6, r4
 800782a:	d109      	bne.n	8007840 <__libc_init_array+0x24>
 800782c:	2600      	movs	r6, #0
 800782e:	f000 f8f9 	bl	8007a24 <_init>
 8007832:	4d0a      	ldr	r5, [pc, #40]	; (800785c <__libc_init_array+0x40>)
 8007834:	4c0a      	ldr	r4, [pc, #40]	; (8007860 <__libc_init_array+0x44>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	42a6      	cmp	r6, r4
 800783c:	d105      	bne.n	800784a <__libc_init_array+0x2e>
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	00b3      	lsls	r3, r6, #2
 8007842:	58eb      	ldr	r3, [r5, r3]
 8007844:	4798      	blx	r3
 8007846:	3601      	adds	r6, #1
 8007848:	e7ee      	b.n	8007828 <__libc_init_array+0xc>
 800784a:	00b3      	lsls	r3, r6, #2
 800784c:	58eb      	ldr	r3, [r5, r3]
 800784e:	4798      	blx	r3
 8007850:	3601      	adds	r6, #1
 8007852:	e7f2      	b.n	800783a <__libc_init_array+0x1e>
 8007854:	08007c2c 	.word	0x08007c2c
 8007858:	08007c2c 	.word	0x08007c2c
 800785c:	08007c2c 	.word	0x08007c2c
 8007860:	08007c30 	.word	0x08007c30

08007864 <__retarget_lock_acquire_recursive>:
 8007864:	4770      	bx	lr

08007866 <__retarget_lock_release_recursive>:
 8007866:	4770      	bx	lr

08007868 <memcpy>:
 8007868:	2300      	movs	r3, #0
 800786a:	b510      	push	{r4, lr}
 800786c:	429a      	cmp	r2, r3
 800786e:	d100      	bne.n	8007872 <memcpy+0xa>
 8007870:	bd10      	pop	{r4, pc}
 8007872:	5ccc      	ldrb	r4, [r1, r3]
 8007874:	54c4      	strb	r4, [r0, r3]
 8007876:	3301      	adds	r3, #1
 8007878:	e7f8      	b.n	800786c <memcpy+0x4>

0800787a <memset>:
 800787a:	0003      	movs	r3, r0
 800787c:	1882      	adds	r2, r0, r2
 800787e:	4293      	cmp	r3, r2
 8007880:	d100      	bne.n	8007884 <memset+0xa>
 8007882:	4770      	bx	lr
 8007884:	7019      	strb	r1, [r3, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	e7f9      	b.n	800787e <memset+0x4>

0800788a <cleanup_glue>:
 800788a:	b570      	push	{r4, r5, r6, lr}
 800788c:	000d      	movs	r5, r1
 800788e:	6809      	ldr	r1, [r1, #0]
 8007890:	0004      	movs	r4, r0
 8007892:	2900      	cmp	r1, #0
 8007894:	d001      	beq.n	800789a <cleanup_glue+0x10>
 8007896:	f7ff fff8 	bl	800788a <cleanup_glue>
 800789a:	0029      	movs	r1, r5
 800789c:	0020      	movs	r0, r4
 800789e:	f000 f877 	bl	8007990 <_free_r>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}

080078a4 <_reclaim_reent>:
 80078a4:	4b31      	ldr	r3, [pc, #196]	; (800796c <_reclaim_reent+0xc8>)
 80078a6:	b570      	push	{r4, r5, r6, lr}
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	0004      	movs	r4, r0
 80078ac:	4283      	cmp	r3, r0
 80078ae:	d049      	beq.n	8007944 <_reclaim_reent+0xa0>
 80078b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <_reclaim_reent+0x28>
 80078b6:	2500      	movs	r5, #0
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	42ab      	cmp	r3, r5
 80078bc:	d147      	bne.n	800794e <_reclaim_reent+0xaa>
 80078be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	2900      	cmp	r1, #0
 80078c4:	d002      	beq.n	80078cc <_reclaim_reent+0x28>
 80078c6:	0020      	movs	r0, r4
 80078c8:	f000 f862 	bl	8007990 <_free_r>
 80078cc:	6961      	ldr	r1, [r4, #20]
 80078ce:	2900      	cmp	r1, #0
 80078d0:	d002      	beq.n	80078d8 <_reclaim_reent+0x34>
 80078d2:	0020      	movs	r0, r4
 80078d4:	f000 f85c 	bl	8007990 <_free_r>
 80078d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80078da:	2900      	cmp	r1, #0
 80078dc:	d002      	beq.n	80078e4 <_reclaim_reent+0x40>
 80078de:	0020      	movs	r0, r4
 80078e0:	f000 f856 	bl	8007990 <_free_r>
 80078e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80078e6:	2900      	cmp	r1, #0
 80078e8:	d002      	beq.n	80078f0 <_reclaim_reent+0x4c>
 80078ea:	0020      	movs	r0, r4
 80078ec:	f000 f850 	bl	8007990 <_free_r>
 80078f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80078f2:	2900      	cmp	r1, #0
 80078f4:	d002      	beq.n	80078fc <_reclaim_reent+0x58>
 80078f6:	0020      	movs	r0, r4
 80078f8:	f000 f84a 	bl	8007990 <_free_r>
 80078fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078fe:	2900      	cmp	r1, #0
 8007900:	d002      	beq.n	8007908 <_reclaim_reent+0x64>
 8007902:	0020      	movs	r0, r4
 8007904:	f000 f844 	bl	8007990 <_free_r>
 8007908:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800790a:	2900      	cmp	r1, #0
 800790c:	d002      	beq.n	8007914 <_reclaim_reent+0x70>
 800790e:	0020      	movs	r0, r4
 8007910:	f000 f83e 	bl	8007990 <_free_r>
 8007914:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007916:	2900      	cmp	r1, #0
 8007918:	d002      	beq.n	8007920 <_reclaim_reent+0x7c>
 800791a:	0020      	movs	r0, r4
 800791c:	f000 f838 	bl	8007990 <_free_r>
 8007920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007922:	2900      	cmp	r1, #0
 8007924:	d002      	beq.n	800792c <_reclaim_reent+0x88>
 8007926:	0020      	movs	r0, r4
 8007928:	f000 f832 	bl	8007990 <_free_r>
 800792c:	69a3      	ldr	r3, [r4, #24]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <_reclaim_reent+0xa0>
 8007932:	0020      	movs	r0, r4
 8007934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007936:	4798      	blx	r3
 8007938:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800793a:	2900      	cmp	r1, #0
 800793c:	d002      	beq.n	8007944 <_reclaim_reent+0xa0>
 800793e:	0020      	movs	r0, r4
 8007940:	f7ff ffa3 	bl	800788a <cleanup_glue>
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	5949      	ldr	r1, [r1, r5]
 8007948:	2900      	cmp	r1, #0
 800794a:	d108      	bne.n	800795e <_reclaim_reent+0xba>
 800794c:	3504      	adds	r5, #4
 800794e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007950:	68d9      	ldr	r1, [r3, #12]
 8007952:	2d80      	cmp	r5, #128	; 0x80
 8007954:	d1f7      	bne.n	8007946 <_reclaim_reent+0xa2>
 8007956:	0020      	movs	r0, r4
 8007958:	f000 f81a 	bl	8007990 <_free_r>
 800795c:	e7af      	b.n	80078be <_reclaim_reent+0x1a>
 800795e:	680e      	ldr	r6, [r1, #0]
 8007960:	0020      	movs	r0, r4
 8007962:	f000 f815 	bl	8007990 <_free_r>
 8007966:	0031      	movs	r1, r6
 8007968:	e7ee      	b.n	8007948 <_reclaim_reent+0xa4>
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	20001cdc 	.word	0x20001cdc

08007970 <__malloc_lock>:
 8007970:	b510      	push	{r4, lr}
 8007972:	4802      	ldr	r0, [pc, #8]	; (800797c <__malloc_lock+0xc>)
 8007974:	f7ff ff76 	bl	8007864 <__retarget_lock_acquire_recursive>
 8007978:	bd10      	pop	{r4, pc}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	20003994 	.word	0x20003994

08007980 <__malloc_unlock>:
 8007980:	b510      	push	{r4, lr}
 8007982:	4802      	ldr	r0, [pc, #8]	; (800798c <__malloc_unlock+0xc>)
 8007984:	f7ff ff6f 	bl	8007866 <__retarget_lock_release_recursive>
 8007988:	bd10      	pop	{r4, pc}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	20003994 	.word	0x20003994

08007990 <_free_r>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	0005      	movs	r5, r0
 8007994:	2900      	cmp	r1, #0
 8007996:	d010      	beq.n	80079ba <_free_r+0x2a>
 8007998:	1f0c      	subs	r4, r1, #4
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	da00      	bge.n	80079a2 <_free_r+0x12>
 80079a0:	18e4      	adds	r4, r4, r3
 80079a2:	0028      	movs	r0, r5
 80079a4:	f7ff ffe4 	bl	8007970 <__malloc_lock>
 80079a8:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <_free_r+0x90>)
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <_free_r+0x2c>
 80079b0:	6063      	str	r3, [r4, #4]
 80079b2:	6014      	str	r4, [r2, #0]
 80079b4:	0028      	movs	r0, r5
 80079b6:	f7ff ffe3 	bl	8007980 <__malloc_unlock>
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	42a3      	cmp	r3, r4
 80079be:	d908      	bls.n	80079d2 <_free_r+0x42>
 80079c0:	6821      	ldr	r1, [r4, #0]
 80079c2:	1860      	adds	r0, r4, r1
 80079c4:	4283      	cmp	r3, r0
 80079c6:	d1f3      	bne.n	80079b0 <_free_r+0x20>
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	1841      	adds	r1, r0, r1
 80079ce:	6021      	str	r1, [r4, #0]
 80079d0:	e7ee      	b.n	80079b0 <_free_r+0x20>
 80079d2:	001a      	movs	r2, r3
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <_free_r+0x4e>
 80079da:	42a3      	cmp	r3, r4
 80079dc:	d9f9      	bls.n	80079d2 <_free_r+0x42>
 80079de:	6811      	ldr	r1, [r2, #0]
 80079e0:	1850      	adds	r0, r2, r1
 80079e2:	42a0      	cmp	r0, r4
 80079e4:	d10b      	bne.n	80079fe <_free_r+0x6e>
 80079e6:	6820      	ldr	r0, [r4, #0]
 80079e8:	1809      	adds	r1, r1, r0
 80079ea:	1850      	adds	r0, r2, r1
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	4283      	cmp	r3, r0
 80079f0:	d1e0      	bne.n	80079b4 <_free_r+0x24>
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	1841      	adds	r1, r0, r1
 80079f8:	6011      	str	r1, [r2, #0]
 80079fa:	6053      	str	r3, [r2, #4]
 80079fc:	e7da      	b.n	80079b4 <_free_r+0x24>
 80079fe:	42a0      	cmp	r0, r4
 8007a00:	d902      	bls.n	8007a08 <_free_r+0x78>
 8007a02:	230c      	movs	r3, #12
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	e7d5      	b.n	80079b4 <_free_r+0x24>
 8007a08:	6821      	ldr	r1, [r4, #0]
 8007a0a:	1860      	adds	r0, r4, r1
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	d103      	bne.n	8007a18 <_free_r+0x88>
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	1841      	adds	r1, r0, r1
 8007a16:	6021      	str	r1, [r4, #0]
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	6054      	str	r4, [r2, #4]
 8007a1c:	e7ca      	b.n	80079b4 <_free_r+0x24>
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	20003998 	.word	0x20003998

08007a24 <_init>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr

08007a30 <_fini>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a36:	bc08      	pop	{r3}
 8007a38:	469e      	mov	lr, r3
 8007a3a:	4770      	bx	lr
